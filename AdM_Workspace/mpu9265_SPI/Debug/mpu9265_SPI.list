
mpu9265_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002620  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027dc  080027dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027e4  080027e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080027ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000078  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065fd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013f3  00000000  00000000  0002663d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  00027a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000658  00000000  00000000  00028140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e57  00000000  00000000  00028798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007c13  00000000  00000000  0004a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd581  00000000  00000000  00052202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f783  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b10  00000000  00000000  0011f7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080027b4 	.word	0x080027b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080027b4 	.word	0x080027b4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <getXAngle>:
#define CALIB_POS	50000

uint8_t shiftBits = 1;
uint8_t accelRes = 2;

int16_t getXAngle(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
	int16_t retAngle;
	uint16_t xAccel = MPUReadAccelXAxis();
 80004f6:	f000 f995 	bl	8000824 <MPUReadAccelXAxis>
 80004fa:	4603      	mov	r3, r0
 80004fc:	80bb      	strh	r3, [r7, #4]
	/* See in which plane is inclined to determine how
	 * to calculate the angle*/
	/* Positive angles */
	if(xAccel > ACCEL_REF){
 80004fe:	88bb      	ldrh	r3, [r7, #4]
 8000500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000504:	d90f      	bls.n	8000526 <getXAngle+0x36>
		retAngle = 90 - (int16_t)((xAccel-CALIB_POS)/173);
 8000506:	88bb      	ldrh	r3, [r7, #4]
 8000508:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800050c:	3b50      	subs	r3, #80	; 0x50
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <getXAngle+0x5c>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1112      	asrs	r2, r2, #4
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b29b      	uxth	r3, r3
 800051c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000520:	b29b      	uxth	r3, r3
 8000522:	80fb      	strh	r3, [r7, #6]
 8000524:	e00b      	b.n	800053e <getXAngle+0x4e>
	}
	/* Negative angles */
	else{
		retAngle = (int16_t)-xAccel/178;
 8000526:	88bb      	ldrh	r3, [r7, #4]
 8000528:	425b      	negs	r3, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	b21b      	sxth	r3, r3
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <getXAngle+0x60>)
 8000530:	fb82 1203 	smull	r1, r2, r2, r3
 8000534:	441a      	add	r2, r3
 8000536:	11d2      	asrs	r2, r2, #7
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	80fb      	strh	r3, [r7, #6]
	}
	return (retAngle);
 800053e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	17ad2209 	.word	0x17ad2209
 8000550:	b81702e1 	.word	0xb81702e1

08000554 <getYAngle>:

int16_t getYAngle(){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	int16_t retAngle;
	uint16_t yAccel = MPUReadAccelYAxis();
 800055a:	f000 f980 	bl	800085e <MPUReadAccelYAxis>
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
	/* See in which plane is inclined to determine how
	 * to calculate the angle*/
	/* Positive angles */
	if(yAccel > ACCEL_REF){
 8000562:	88bb      	ldrh	r3, [r7, #4]
 8000564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000568:	d90f      	bls.n	800058a <getYAngle+0x36>
		retAngle = 90 - (int16_t)((yAccel-ACCEL_REF)/364);
 800056a:	88bb      	ldrh	r3, [r7, #4]
 800056c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000570:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <getYAngle+0x5c>)
 8000572:	fb82 1203 	smull	r1, r2, r2, r3
 8000576:	441a      	add	r2, r3
 8000578:	1212      	asrs	r2, r2, #8
 800057a:	17db      	asrs	r3, r3, #31
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	b29b      	uxth	r3, r3
 8000580:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000584:	b29b      	uxth	r3, r3
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	e00b      	b.n	80005a2 <getYAngle+0x4e>
	}
	/* Negative angles */
	else{
		retAngle = (int16_t)-yAccel/364;
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	425b      	negs	r3, r3
 800058e:	b29b      	uxth	r3, r3
 8000590:	b21b      	sxth	r3, r3
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <getYAngle+0x5c>)
 8000594:	fb82 1203 	smull	r1, r2, r2, r3
 8000598:	441a      	add	r2, r3
 800059a:	1212      	asrs	r2, r2, #8
 800059c:	17db      	asrs	r3, r3, #31
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	80fb      	strh	r3, [r7, #6]
	}
	return (retAngle);
 80005a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	b40b40b5 	.word	0xb40b40b5

080005b4 <main>:

int main(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

	APISysInit();
 80005ba:	f000 f9ad 	bl	8000918 <APISysInit>
	uint32_t x_acum, y_acum;
	int16_t accel_y, accel_x;

	while (1)
	{
		x_acum = MPUReadAccelXAxis();
 80005be:	f000 f931 	bl	8000824 <MPUReadAccelXAxis>
 80005c2:	4603      	mov	r3, r0
 80005c4:	60fb      	str	r3, [r7, #12]
		y_acum = MPUReadAccelYAxis();
 80005c6:	f000 f94a 	bl	800085e <MPUReadAccelYAxis>
 80005ca:	4603      	mov	r3, r0
 80005cc:	60bb      	str	r3, [r7, #8]
//		accel_x = (x_acum<<4);
		accel_x = getXAngle();
 80005ce:	f7ff ff8f 	bl	80004f0 <getXAngle>
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
		accel_y = getYAngle();
 80005d6:	f7ff ffbd 	bl	8000554 <getYAngle>
 80005da:	4603      	mov	r3, r0
 80005dc:	80bb      	strh	r3, [r7, #4]
		HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f000 fbe0 	bl	8000da4 <HAL_Delay>
		x_acum = MPUReadAccelXAxis();
 80005e4:	e7eb      	b.n	80005be <main+0xa>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_MspInit+0x4c>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <HAL_MspInit+0x4c>)
 80005f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fc:	6453      	str	r3, [r2, #68]	; 0x44
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <HAL_MspInit+0x4c>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_MspInit+0x4c>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_MspInit+0x4c>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	6413      	str	r3, [r2, #64]	; 0x40
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_MspInit+0x4c>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <HAL_SPI_MspInit+0xc0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d149      	bne.n	80006ee <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a26      	ldr	r2, [pc, #152]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 8000664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_SPI_MspInit+0xc4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006ae:	2360      	movs	r3, #96	; 0x60
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006be:	2305      	movs	r3, #5
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <HAL_SPI_MspInit+0xc8>)
 80006ca:	f000 fc75 	bl	8000fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ce:	2320      	movs	r3, #32
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006de:	2305      	movs	r3, #5
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <HAL_SPI_MspInit+0xcc>)
 80006ea:	f000 fc65 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40013000 	.word	0x40013000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 fb06 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000786:	490e      	ldr	r1, [pc, #56]	; (80007c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800079c:	4c0b      	ldr	r4, [pc, #44]	; (80007cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007aa:	f7ff ffd7 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ae:	f001 ffd5 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b2:	f7ff feff 	bl	80005b4 <main>
  bx  lr    
 80007b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80007b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007c4:	080027ec 	.word	0x080027ec
  ldr r2, =_sbss
 80007c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007cc:	20000088 	.word	0x20000088

080007d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC_IRQHandler>

080007d2 <MPURead>:
 * 			- reg: MPU register
 * 			- data: pointer to the received data
 * 			- bytes: amount of data to transmit
 * @retval: None
 * */
static void MPURead(uint8_t reg, uint8_t *data, uint8_t bytes){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	6039      	str	r1, [r7, #0]
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	4613      	mov	r3, r2
 80007e0:	71bb      	strb	r3, [r7, #6]
	SPIRead(reg, data, bytes);
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	6839      	ldr	r1, [r7, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f86d 	bl	80008c8 <SPIRead>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <convertData>:
 * @params:
 * 			- msbData: MSB portion of the data
 * 			- lsbData: MSB portion of the data
 * @retval: new value in the uint16_t format
 * */
static uint16_t convertData(uint8_t msbData, uint8_t lsbData){
 80007f6:	b480      	push	{r7}
 80007f8:	b085      	sub	sp, #20
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	460a      	mov	r2, r1
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	4613      	mov	r3, r2
 8000804:	71bb      	strb	r3, [r7, #6]
	uint16_t result = msbData<<8 | lsbData;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b21a      	sxth	r2, r3
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	b21b      	sxth	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b21b      	sxth	r3, r3
 8000814:	81fb      	strh	r3, [r7, #14]
	return (result);
 8000816:	89fb      	ldrh	r3, [r7, #14]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <MPUReadAccelXAxis>:

/* @brief: Get the x axis accelerometer data
 * @param: None
 * @retval: x axis acceleration read
 * */
uint16_t MPUReadAccelXAxis(){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	uint8_t byteCount = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	707b      	strb	r3, [r7, #1]
	uint8_t *data = &byteCount;
 800082e:	1c7b      	adds	r3, r7, #1
 8000830:	607b      	str	r3, [r7, #4]
	MPURead(ACCEL_XAXIS, data, byteCount);
 8000832:	787b      	ldrb	r3, [r7, #1]
 8000834:	461a      	mov	r2, r3
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	203b      	movs	r0, #59	; 0x3b
 800083a:	f7ff ffca 	bl	80007d2 <MPURead>
	uint16_t result = convertData(data[0], data[1]);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	4610      	mov	r0, r2
 800084c:	f7ff ffd3 	bl	80007f6 <convertData>
 8000850:	4603      	mov	r3, r0
 8000852:	807b      	strh	r3, [r7, #2]
	return(result);
 8000854:	887b      	ldrh	r3, [r7, #2]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <MPUReadAccelYAxis>:

/* @brief: Get the y axis accelerometer data
 * @param: None
 * @retval: y axis acceleration read
 * */
uint16_t MPUReadAccelYAxis(){
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
	uint8_t byteCount = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	707b      	strb	r3, [r7, #1]
	uint8_t *data = &byteCount;
 8000868:	1c7b      	adds	r3, r7, #1
 800086a:	607b      	str	r3, [r7, #4]
	MPURead(ACCEL_YAXIS, data, byteCount);
 800086c:	787b      	ldrb	r3, [r7, #1]
 800086e:	461a      	mov	r2, r3
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	203d      	movs	r0, #61	; 0x3d
 8000874:	f7ff ffad 	bl	80007d2 <MPURead>
	uint16_t result = convertData(data[0], data[1]);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4610      	mov	r0, r2
 8000886:	f7ff ffb6 	bl	80007f6 <convertData>
 800088a:	4603      	mov	r3, r0
 800088c:	807b      	strh	r3, [r7, #2]
	return(result);
 800088e:	887b      	ldrh	r3, [r7, #2]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <CSEnable>:

SPI_HandleTypeDef hspi1;

uint8_t timeOut = 1;

static void CSEnable(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2102      	movs	r1, #2
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <CSEnable+0x14>)
 80008a2:	f000 fd35 	bl	8001310 <HAL_GPIO_WritePin>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40020400 	.word	0x40020400

080008b0 <CSDisable>:

static void CSDisable(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2102      	movs	r1, #2
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <CSDisable+0x14>)
 80008ba:	f000 fd29 	bl	8001310 <HAL_GPIO_WritePin>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40020400 	.word	0x40020400

080008c8 <SPIRead>:

void SPIRead(uint8_t reg, uint8_t *data, uint8_t length){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
	/* Putting a one in the MSB position of the register direction means
	 in the mpu that it is a read operation */
	reg = reg + 128;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	3b80      	subs	r3, #128	; 0x80
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	71fb      	strb	r3, [r7, #7]
	CSEnable();
 80008e0:	f7ff ffda 	bl	8000898 <CSEnable>
	HAL_SPI_Transmit(&hspi1, &reg, 1, timeOut);
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <SPIRead+0x48>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	1df9      	adds	r1, r7, #7
 80008ea:	2201      	movs	r2, #1
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <SPIRead+0x4c>)
 80008ee:	f001 fa16 	bl	8001d1e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, length, timeOut);
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SPIRead+0x48>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	6839      	ldr	r1, [r7, #0]
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <SPIRead+0x4c>)
 80008fe:	f001 fb4a 	bl	8001f96 <HAL_SPI_Receive>
	CSDisable();
 8000902:	f7ff ffd5 	bl	80008b0 <CSDisable>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000004 	.word	0x20000004
 8000914:	2000002c 	.word	0x2000002c

08000918 <APISysInit>:
/* @brief: Initialize all the peripherals with the driver requirements
 * specified.
 * @param: None
 * @retval: None
 * */
void APISysInit(){
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	HAL_Init();
 800091c:	f000 f9d0 	bl	8000cc0 <HAL_Init>
	SystemClock_Config();
 8000920:	f000 f80c 	bl	800093c <SystemClock_Config>
	MX_GPIO_Init();
 8000924:	f000 f8aa 	bl	8000a7c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000928:	f000 f872 	bl	8000a10 <MX_SPI1_Init>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	2230      	movs	r2, #48	; 0x30
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 ff2a 	bl	80027a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <SystemClock_Config+0xcc>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <SystemClock_Config+0xcc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <SystemClock_Config+0xd0>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009b4:	2350      	movs	r3, #80	; 0x50
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fcbd 	bl	8001344 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d0:	f7ff ffae 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2302      	movs	r3, #2
 80009da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2102      	movs	r1, #2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 ff1f 	bl	8001834 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009fc:	f7ff ff98 	bl	8000930 <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3750      	adds	r7, #80	; 0x50
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <MX_SPI1_Init+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a44:	2220      	movs	r2, #32
 8000a46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a5c:	220a      	movs	r2, #10
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a62:	f001 f8d3 	bl	8001c0c <HAL_SPI_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f7ff ff60 	bl	8000930 <Error_Handler>
  }
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000002c 	.word	0x2000002c
 8000a78:	40013000 	.word	0x40013000

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	4b84      	ldr	r3, [pc, #528]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a83      	ldr	r2, [pc, #524]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b81      	ldr	r3, [pc, #516]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	4b7d      	ldr	r3, [pc, #500]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a7c      	ldr	r2, [pc, #496]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b7a      	ldr	r3, [pc, #488]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b76      	ldr	r3, [pc, #472]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a75      	ldr	r2, [pc, #468]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b73      	ldr	r3, [pc, #460]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b6f      	ldr	r3, [pc, #444]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a6e      	ldr	r2, [pc, #440]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b6c      	ldr	r3, [pc, #432]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b68      	ldr	r3, [pc, #416]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a67      	ldr	r2, [pc, #412]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b65      	ldr	r3, [pc, #404]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a60      	ldr	r2, [pc, #384]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI1_CS_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f244 0183 	movw	r1, #16515	; 0x4083
 8000b40:	485a      	ldr	r0, [pc, #360]	; (8000cac <MX_GPIO_Init+0x230>)
 8000b42:	f000 fbe5 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	4859      	ldr	r0, [pc, #356]	; (8000cb0 <MX_GPIO_Init+0x234>)
 8000b4c:	f000 fbe0 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4853      	ldr	r0, [pc, #332]	; (8000cb4 <MX_GPIO_Init+0x238>)
 8000b68:	f000 fa26 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b6c:	2332      	movs	r3, #50	; 0x32
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	484b      	ldr	r0, [pc, #300]	; (8000cb4 <MX_GPIO_Init+0x238>)
 8000b88:	f000 fa16 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b8c:	2386      	movs	r3, #134	; 0x86
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <MX_GPIO_Init+0x23c>)
 8000ba8:	f000 fa06 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPI1_CS_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI1_CS_Pin|LD3_Pin|LD2_Pin;
 8000bac:	f244 0383 	movw	r3, #16515	; 0x4083
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4839      	ldr	r0, [pc, #228]	; (8000cac <MX_GPIO_Init+0x230>)
 8000bc6:	f000 f9f7 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4831      	ldr	r0, [pc, #196]	; (8000cac <MX_GPIO_Init+0x230>)
 8000be8:	f000 f9e6 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	482c      	ldr	r0, [pc, #176]	; (8000cbc <MX_GPIO_Init+0x240>)
 8000c0a:	f000 f9d5 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4822      	ldr	r0, [pc, #136]	; (8000cb0 <MX_GPIO_Init+0x234>)
 8000c26:	f000 f9c7 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0x234>)
 8000c3e:	f000 f9bb 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c42:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c54:	230a      	movs	r3, #10
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4816      	ldr	r0, [pc, #88]	; (8000cb8 <MX_GPIO_Init+0x23c>)
 8000c60:	f000 f9aa 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <MX_GPIO_Init+0x23c>)
 8000c7a:	f000 f99d 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c90:	230b      	movs	r3, #11
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0x234>)
 8000c9c:	f000 f98c 	bl	8000fb8 <HAL_GPIO_Init>
}
 8000ca0:	bf00      	nop
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40021800 	.word	0x40021800
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f931 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fc78 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f93b 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f911 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	20000008 	.word	0x20000008

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000084 	.word	0x20000084

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000084 	.word	0x20000084

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000000c 	.word	0x2000000c

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff47 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff5c 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffb0 	bl	8000f0c <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e177      	b.n	80012c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8166 	bne.w	80012be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	2b02      	cmp	r3, #2
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80c0 	beq.w	80012be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b66      	ldr	r3, [pc, #408]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a65      	ldr	r2, [pc, #404]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115a:	4a61      	ldr	r2, [pc, #388]	; (80012e0 <HAL_GPIO_Init+0x328>)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <HAL_GPIO_Init+0x32c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d037      	beq.n	80011f6 <HAL_GPIO_Init+0x23e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a57      	ldr	r2, [pc, #348]	; (80012e8 <HAL_GPIO_Init+0x330>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d031      	beq.n	80011f2 <HAL_GPIO_Init+0x23a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a56      	ldr	r2, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x334>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d02b      	beq.n	80011ee <HAL_GPIO_Init+0x236>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a55      	ldr	r2, [pc, #340]	; (80012f0 <HAL_GPIO_Init+0x338>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d025      	beq.n	80011ea <HAL_GPIO_Init+0x232>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a54      	ldr	r2, [pc, #336]	; (80012f4 <HAL_GPIO_Init+0x33c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01f      	beq.n	80011e6 <HAL_GPIO_Init+0x22e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a53      	ldr	r2, [pc, #332]	; (80012f8 <HAL_GPIO_Init+0x340>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x22a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_GPIO_Init+0x344>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x226>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a51      	ldr	r2, [pc, #324]	; (8001300 <HAL_GPIO_Init+0x348>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x222>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a50      	ldr	r2, [pc, #320]	; (8001304 <HAL_GPIO_Init+0x34c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x21e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <HAL_GPIO_Init+0x350>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x21a>
 80011ce:	2309      	movs	r3, #9
 80011d0:	e012      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011d2:	230a      	movs	r3, #10
 80011d4:	e010      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011da:	2307      	movs	r3, #7
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x240>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_GPIO_Init+0x328>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <HAL_GPIO_Init+0x354>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123a:	4a34      	ldr	r2, [pc, #208]	; (800130c <HAL_GPIO_Init+0x354>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001240:	4b32      	ldr	r3, [pc, #200]	; (800130c <HAL_GPIO_Init+0x354>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <HAL_GPIO_Init+0x354>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_GPIO_Init+0x354>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_GPIO_Init+0x354>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_GPIO_Init+0x354>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_GPIO_Init+0x354>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae84 	bls.w	8000fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40021c00 	.word	0x40021c00
 8001304:	40022000 	.word	0x40022000
 8001308:	40022400 	.word	0x40022400
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e267      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d075      	beq.n	800144e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001362:	4b88      	ldr	r3, [pc, #544]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d00c      	beq.n	8001388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4b85      	ldr	r3, [pc, #532]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d112      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137a:	4b82      	ldr	r3, [pc, #520]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001386:	d10b      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	4b7e      	ldr	r3, [pc, #504]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d05b      	beq.n	800144c <HAL_RCC_OscConfig+0x108>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d157      	bne.n	800144c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e242      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d106      	bne.n	80013b8 <HAL_RCC_OscConfig+0x74>
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a75      	ldr	r2, [pc, #468]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x98>
 80013c2:	4b70      	ldr	r3, [pc, #448]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6f      	ldr	r2, [pc, #444]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6c      	ldr	r2, [pc, #432]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013dc:	4b69      	ldr	r3, [pc, #420]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a68      	ldr	r2, [pc, #416]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b66      	ldr	r3, [pc, #408]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a65      	ldr	r2, [pc, #404]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fcc6 	bl	8000d8c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fcc2 	bl	8000d8c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e207      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xc0>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fcb2 	bl	8000d8c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fcae 	bl	8000d8c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1f3      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0xe8>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146e:	2b08      	cmp	r3, #8
 8001470:	d11c      	bne.n	80014ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x152>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e1c7      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4937      	ldr	r1, [pc, #220]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e03a      	b.n	8001522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_RCC_OscConfig+0x244>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff fc67 	bl	8000d8c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc63 	bl	8000d8c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1a8      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4925      	ldr	r1, [pc, #148]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_OscConfig+0x244>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc46 	bl	8000d8c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fc42 	bl	8000d8c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e187      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d036      	beq.n	800159c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d016      	beq.n	8001564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_RCC_OscConfig+0x248>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fc26 	bl	8000d8c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc22 	bl	8000d8c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e167      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_OscConfig+0x240>)
 8001558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x200>
 8001562:	e01b      	b.n	800159c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_OscConfig+0x248>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fc0f 	bl	8000d8c <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	e00e      	b.n	8001590 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fc0b 	bl	8000d8c <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d907      	bls.n	8001590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e150      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
 8001584:	40023800 	.word	0x40023800
 8001588:	42470000 	.word	0x42470000
 800158c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ea      	bne.n	8001572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 8097 	beq.w	80016d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d6:	2301      	movs	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015da:	4b77      	ldr	r3, [pc, #476]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d118      	bne.n	8001618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e6:	4b74      	ldr	r3, [pc, #464]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a73      	ldr	r2, [pc, #460]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fbcb 	bl	8000d8c <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fa:	f7ff fbc7 	bl	8000d8c <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e10c      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_OscConfig+0x474>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x2ea>
 8001620:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a63      	ldr	r2, [pc, #396]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	e01c      	b.n	8001668 <HAL_RCC_OscConfig+0x324>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x30c>
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	4a5e      	ldr	r2, [pc, #376]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	6713      	str	r3, [r2, #112]	; 0x70
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0x324>
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a57      	ldr	r2, [pc, #348]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	4b55      	ldr	r3, [pc, #340]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a54      	ldr	r2, [pc, #336]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001662:	f023 0304 	bic.w	r3, r3, #4
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d015      	beq.n	800169c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fb8c 	bl	8000d8c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fb88 	bl	8000d8c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0cb      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0ee      	beq.n	8001678 <HAL_RCC_OscConfig+0x334>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff fb76 	bl	8000d8c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a4:	f7ff fb72 	bl	8000d8c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0b5      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ee      	bne.n	80016a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a38      	ldr	r2, [pc, #224]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80a1 	beq.w	8001824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d05c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d141      	bne.n	800177a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCC_OscConfig+0x478>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb46 	bl	8000d8c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fb42 	bl	8000d8c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e087      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	3b01      	subs	r3, #1
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	491b      	ldr	r1, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x478>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff fb1b 	bl	8000d8c <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff fb17 	bl	8000d8c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e05c      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x416>
 8001778:	e054      	b.n	8001824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_RCC_OscConfig+0x478>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb04 	bl	8000d8c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fb00 	bl	8000d8c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e045      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_RCC_OscConfig+0x470>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x444>
 80017a6:	e03d      	b.n	8001824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e038      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000
 80017bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x4ec>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d028      	beq.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d121      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d11a      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f0:	4013      	ands	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d111      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	3b01      	subs	r3, #1
 800180a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0cc      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d90c      	bls.n	8001870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b65      	ldr	r3, [pc, #404]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0b8      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001888:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a0:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	494d      	ldr	r1, [pc, #308]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d044      	beq.n	8001954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d119      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e07f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e067      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001912:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f023 0203 	bic.w	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4934      	ldr	r1, [pc, #208]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	4313      	orrs	r3, r2
 8001922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001924:	f7ff fa32 	bl	8000d8c <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	e00a      	b.n	8001942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7ff fa2e 	bl	8000d8c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e04f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 020c 	and.w	r2, r3, #12
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	429a      	cmp	r2, r3
 8001952:	d1eb      	bne.n	800192c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d20c      	bcs.n	800197c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e032      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4916      	ldr	r1, [pc, #88]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ba:	f000 f821 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019be:	4602      	mov	r2, r0
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	490a      	ldr	r1, [pc, #40]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	5ccb      	ldrb	r3, [r1, r3]
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f992 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023c00 	.word	0x40023c00
 80019f0:	40023800 	.word	0x40023800
 80019f4:	080027cc 	.word	0x080027cc
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	b094      	sub	sp, #80	; 0x50
 8001a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a10:	2300      	movs	r3, #0
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a18:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d00d      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x40>
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	f200 80e1 	bhi.w	8001bec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x34>
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a32:	e0db      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a38:	e0db      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a3e:	e0d8      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a40:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d063      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a72:	4622      	mov	r2, r4
 8001a74:	462b      	mov	r3, r5
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	0159      	lsls	r1, r3, #5
 8001a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a84:	0150      	lsls	r0, r2, #5
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	1a51      	subs	r1, r2, r1
 8001a8e:	6139      	str	r1, [r7, #16]
 8001a90:	4629      	mov	r1, r5
 8001a92:	eb63 0301 	sbc.w	r3, r3, r1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aa4:	4659      	mov	r1, fp
 8001aa6:	018b      	lsls	r3, r1, #6
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aae:	4651      	mov	r1, sl
 8001ab0:	018a      	lsls	r2, r1, #6
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ab8:	4659      	mov	r1, fp
 8001aba:	eb63 0901 	sbc.w	r9, r3, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	eb18 0303 	adds.w	r3, r8, r3
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	462b      	mov	r3, r5
 8001ae0:	eb49 0303 	adc.w	r3, r9, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001af2:	4629      	mov	r1, r5
 8001af4:	024b      	lsls	r3, r1, #9
 8001af6:	4621      	mov	r1, r4
 8001af8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001afc:	4621      	mov	r1, r4
 8001afe:	024a      	lsls	r2, r1, #9
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b06:	2200      	movs	r2, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b10:	f7fe fb6c 	bl	80001ec <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b1c:	e058      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	4611      	mov	r1, r2
 8001b2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b38:	4642      	mov	r2, r8
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	0159      	lsls	r1, r3, #5
 8001b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4a:	0150      	lsls	r0, r2, #5
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4641      	mov	r1, r8
 8001b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b56:	4649      	mov	r1, r9
 8001b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b70:	ebb2 040a 	subs.w	r4, r2, sl
 8001b74:	eb63 050b 	sbc.w	r5, r3, fp
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	00eb      	lsls	r3, r5, #3
 8001b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b86:	00e2      	lsls	r2, r4, #3
 8001b88:	4614      	mov	r4, r2
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	4643      	mov	r3, r8
 8001b8e:	18e3      	adds	r3, r4, r3
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	464b      	mov	r3, r9
 8001b94:	eb45 0303 	adc.w	r3, r5, r3
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	028b      	lsls	r3, r1, #10
 8001baa:	4621      	mov	r1, r4
 8001bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	028a      	lsls	r2, r1, #10
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	61fa      	str	r2, [r7, #28]
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fb12 	bl	80001ec <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bea:	e002      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3750      	adds	r7, #80	; 0x50
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200

08001c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07b      	b.n	8001d16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d108      	bne.n	8001c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c2e:	d009      	beq.n	8001c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
 8001c36:	e005      	b.n	8001c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fcea 	bl	8000638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	ea42 0103 	orr.w	r1, r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f003 0104 	and.w	r1, r3, #4
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	f003 0210 	and.w	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b088      	sub	sp, #32
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_SPI_Transmit+0x22>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e126      	b.n	8001f8e <HAL_SPI_Transmit+0x270>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d48:	f7ff f820 	bl	8000d8c <HAL_GetTick>
 8001d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d62:	e10b      	b.n	8001f7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_SPI_Transmit+0x52>
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d74:	e102      	b.n	8001f7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dbc:	d10f      	bne.n	8001dde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d007      	beq.n	8001dfc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e04:	d14b      	bne.n	8001e9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_SPI_Transmit+0xf6>
 8001e0e:	8afb      	ldrh	r3, [r7, #22]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d13e      	bne.n	8001e92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	1c9a      	adds	r2, r3, #2
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e38:	e02b      	b.n	8001e92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d112      	bne.n	8001e6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	1c9a      	adds	r2, r3, #2
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e6c:	e011      	b.n	8001e92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e6e:	f7fe ff8d 	bl	8000d8c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d803      	bhi.n	8001e86 <HAL_SPI_Transmit+0x168>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d102      	bne.n	8001e8c <HAL_SPI_Transmit+0x16e>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e90:	e074      	b.n	8001f7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ce      	bne.n	8001e3a <HAL_SPI_Transmit+0x11c>
 8001e9c:	e04c      	b.n	8001f38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_SPI_Transmit+0x18e>
 8001ea6:	8afb      	ldrh	r3, [r7, #22]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d140      	bne.n	8001f2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	7812      	ldrb	r2, [r2, #0]
 8001eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ed2:	e02c      	b.n	8001f2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d113      	bne.n	8001f0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	330c      	adds	r3, #12
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f08:	e011      	b.n	8001f2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f0a:	f7fe ff3f 	bl	8000d8c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d803      	bhi.n	8001f22 <HAL_SPI_Transmit+0x204>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d102      	bne.n	8001f28 <HAL_SPI_Transmit+0x20a>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f2c:	e026      	b.n	8001f7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1cd      	bne.n	8001ed4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	6839      	ldr	r1, [r7, #0]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fbcb 	bl	80026d8 <SPI_EndRxTxTransaction>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	77fb      	strb	r3, [r7, #31]
 8001f78:	e000      	b.n	8001f7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b088      	sub	sp, #32
 8001f9a:	af02      	add	r7, sp, #8
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb2:	d112      	bne.n	8001fda <HAL_SPI_Receive+0x44>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10e      	bne.n	8001fda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fc4:	88fa      	ldrh	r2, [r7, #6]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f8f1 	bl	80021b8 <HAL_SPI_TransmitReceive>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	e0ea      	b.n	80021b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_SPI_Receive+0x52>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0e3      	b.n	80021b0 <HAL_SPI_Receive+0x21a>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ff0:	f7fe fecc 	bl	8000d8c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d002      	beq.n	8002008 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002006:	e0ca      	b.n	800219e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_SPI_Receive+0x7e>
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002018:	e0c1      	b.n	800219e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2204      	movs	r2, #4
 800201e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002060:	d10f      	bne.n	8002082 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002070:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d007      	beq.n	80020a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d162      	bne.n	800216e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020a8:	e02e      	b.n	8002108 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d115      	bne.n	80020e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f103 020c 	add.w	r2, r3, #12
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020e2:	e011      	b.n	8002108 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e4:	f7fe fe52 	bl	8000d8c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d803      	bhi.n	80020fc <HAL_SPI_Receive+0x166>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d102      	bne.n	8002102 <HAL_SPI_Receive+0x16c>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002106:	e04a      	b.n	800219e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1cb      	bne.n	80020aa <HAL_SPI_Receive+0x114>
 8002112:	e031      	b.n	8002178 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d113      	bne.n	800214a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	b292      	uxth	r2, r2
 800212e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	1c9a      	adds	r2, r3, #2
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002148:	e011      	b.n	800216e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800214a:	f7fe fe1f 	bl	8000d8c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d803      	bhi.n	8002162 <HAL_SPI_Receive+0x1cc>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d102      	bne.n	8002168 <HAL_SPI_Receive+0x1d2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800216c:	e017      	b.n	800219e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1cd      	bne.n	8002114 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fa45 	bl	800260c <SPI_EndRxTransaction>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
 800219a:	e000      	b.n	800219e <HAL_SPI_Receive+0x208>
  }

error :
 800219c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021c6:	2301      	movs	r3, #1
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_SPI_TransmitReceive+0x26>
 80021da:	2302      	movs	r3, #2
 80021dc:	e18a      	b.n	80024f4 <HAL_SPI_TransmitReceive+0x33c>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021e6:	f7fe fdd1 	bl	8000d8c <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002204:	2b01      	cmp	r3, #1
 8002206:	d00f      	beq.n	8002228 <HAL_SPI_TransmitReceive+0x70>
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800220e:	d107      	bne.n	8002220 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_SPI_TransmitReceive+0x68>
 8002218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800221c:	2b04      	cmp	r3, #4
 800221e:	d003      	beq.n	8002228 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002220:	2302      	movs	r3, #2
 8002222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002226:	e15b      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_SPI_TransmitReceive+0x82>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_SPI_TransmitReceive+0x82>
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002240:	e14e      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b04      	cmp	r3, #4
 800224c:	d003      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2205      	movs	r2, #5
 8002252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	887a      	ldrh	r2, [r7, #2]
 8002266:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d007      	beq.n	80022aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022b2:	d178      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_SPI_TransmitReceive+0x10a>
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d166      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	1c9a      	adds	r2, r3, #2
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e6:	e053      	b.n	8002390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d11b      	bne.n	800232e <HAL_SPI_TransmitReceive+0x176>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d016      	beq.n	800232e <HAL_SPI_TransmitReceive+0x176>
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d113      	bne.n	800232e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d119      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x1b8>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d014      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	1c9a      	adds	r2, r3, #2
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800236c:	2301      	movs	r3, #1
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002370:	f7fe fd0c 	bl	8000d8c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237c:	429a      	cmp	r2, r3
 800237e:	d807      	bhi.n	8002390 <HAL_SPI_TransmitReceive+0x1d8>
 8002380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002386:	d003      	beq.n	8002390 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800238e:	e0a7      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1a6      	bne.n	80022e8 <HAL_SPI_TransmitReceive+0x130>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1a1      	bne.n	80022e8 <HAL_SPI_TransmitReceive+0x130>
 80023a4:	e07c      	b.n	80024a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x1fc>
 80023ae:	8b7b      	ldrh	r3, [r7, #26]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d16b      	bne.n	800248c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330c      	adds	r3, #12
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023da:	e057      	b.n	800248c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d11c      	bne.n	8002424 <HAL_SPI_TransmitReceive+0x26c>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d017      	beq.n	8002424 <HAL_SPI_TransmitReceive+0x26c>
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d114      	bne.n	8002424 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d119      	bne.n	8002466 <HAL_SPI_TransmitReceive+0x2ae>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d014      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002462:	2301      	movs	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002466:	f7fe fc91 	bl	8000d8c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002472:	429a      	cmp	r2, r3
 8002474:	d803      	bhi.n	800247e <HAL_SPI_TransmitReceive+0x2c6>
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d102      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x2cc>
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800248a:	e029      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1a2      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x224>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d19d      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f917 	bl	80026d8 <SPI_EndRxTxTransaction>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80024bc:	e010      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	e000      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80024de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3730      	adds	r7, #48	; 0x30
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800250c:	f7fe fc3e 	bl	8000d8c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800251c:	f7fe fc36 	bl	8000d8c <HAL_GetTick>
 8002520:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	0d1b      	lsrs	r3, r3, #20
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002532:	e054      	b.n	80025de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d050      	beq.n	80025de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800253c:	f7fe fc26 	bl	8000d8c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	429a      	cmp	r2, r3
 800254a:	d902      	bls.n	8002552 <SPI_WaitFlagStateUntilTimeout+0x56>
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d13d      	bne.n	80025ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002560:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800256a:	d111      	bne.n	8002590 <SPI_WaitFlagStateUntilTimeout+0x94>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002574:	d004      	beq.n	8002580 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257e:	d107      	bne.n	8002590 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002598:	d10f      	bne.n	80025ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e017      	b.n	80025fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3b01      	subs	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d19b      	bne.n	8002534 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000000 	.word	0x20000000

0800260c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002620:	d111      	bne.n	8002646 <SPI_EndRxTransaction+0x3a>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262a:	d004      	beq.n	8002636 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002634:	d107      	bne.n	8002646 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264e:	d12a      	bne.n	80026a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002658:	d012      	beq.n	8002680 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff ff49 	bl	80024fc <SPI_WaitFlagStateUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02d      	beq.n	80026cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e026      	b.n	80026ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	2101      	movs	r1, #1
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff ff36 	bl	80024fc <SPI_WaitFlagStateUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01a      	beq.n	80026cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e013      	b.n	80026ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2101      	movs	r1, #1
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ff23 	bl	80024fc <SPI_WaitFlagStateUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e000      	b.n	80026ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <SPI_EndRxTxTransaction+0x7c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <SPI_EndRxTxTransaction+0x80>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0d5b      	lsrs	r3, r3, #21
 80026f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002702:	d112      	bne.n	800272a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fef4 	bl	80024fc <SPI_WaitFlagStateUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e00f      	b.n	800274a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3b01      	subs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d0f2      	beq.n	800272a <SPI_EndRxTxTransaction+0x52>
 8002744:	e000      	b.n	8002748 <SPI_EndRxTxTransaction+0x70>
        break;
 8002746:	bf00      	nop
  }

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000000 	.word	0x20000000
 8002758:	165e9f81 	.word	0x165e9f81

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4d0d      	ldr	r5, [pc, #52]	; (8002794 <__libc_init_array+0x38>)
 8002760:	4c0d      	ldr	r4, [pc, #52]	; (8002798 <__libc_init_array+0x3c>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	2600      	movs	r6, #0
 8002768:	42a6      	cmp	r6, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	4d0b      	ldr	r5, [pc, #44]	; (800279c <__libc_init_array+0x40>)
 800276e:	4c0c      	ldr	r4, [pc, #48]	; (80027a0 <__libc_init_array+0x44>)
 8002770:	f000 f820 	bl	80027b4 <_init>
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	2600      	movs	r6, #0
 800277a:	42a6      	cmp	r6, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f855 3b04 	ldr.w	r3, [r5], #4
 8002784:	4798      	blx	r3
 8002786:	3601      	adds	r6, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f855 3b04 	ldr.w	r3, [r5], #4
 800278e:	4798      	blx	r3
 8002790:	3601      	adds	r6, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	080027e4 	.word	0x080027e4
 8002798:	080027e4 	.word	0x080027e4
 800279c:	080027e4 	.word	0x080027e4
 80027a0:	080027e8 	.word	0x080027e8

080027a4 <memset>:
 80027a4:	4402      	add	r2, r0
 80027a6:	4603      	mov	r3, r0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	f803 1b01 	strb.w	r1, [r3], #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <_init>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr

080027c0 <_fini>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr
