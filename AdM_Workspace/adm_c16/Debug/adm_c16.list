
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000465c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004974  08004974  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800497c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000edd2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fbe0  00000000  00000000  0002ee72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f99  00000000  00000000  0003ea52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c60  00000000  00000000  000409f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dbec1  00000000  00000000  00041650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b88  00000000  00000000  0011d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024ca0  00000000  00000000  0011e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142d40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d6c  00000000  00000000  00142d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080047f4 	.word	0x080047f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080047f4 	.word	0x080047f4

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@ Valor de retorno: Nada
@
.thumb_func
    asm_zeros:
		// Guardas de seguridad
		cbz r0, exit
 80001f8:	b130      	cbz	r0, 8000208 <exit>
		cbz r1, exit
 80001fa:	b129      	cbz	r1, 8000208 <exit>
		mov r2, #0
 80001fc:	f04f 0200 	mov.w	r2, #0

08000200 <loop>:
	loop:
		// Se recorre el vector del último al primer elemento
		subs r1, #1
 8000200:	3901      	subs	r1, #1
		// El shift se hace por dos, por lo que se incrementa de a 4 bytes
		str r2, [r0, r1, LSL #2]
 8000202:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		bne loop
 8000206:	d1fb      	bne.n	8000200 <loop>

08000208 <exit>:
	exit:
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000208:	4770      	bx	lr

0800020a <asm_zeros16>:
@ Valor de retorno: Nada
@
.thumb_func
    asm_zeros16:
    	// Guardas de seguridad
		cbz r0, exit1
 800020a:	b130      	cbz	r0, 800021a <exit1>
		cbz r1, exit1
 800020c:	b129      	cbz	r1, 800021a <exit1>
		mov r2, #0
 800020e:	f04f 0200 	mov.w	r2, #0

08000212 <loop1>:
	loop1:
		// Se recorre el vector del último al primer elemento
		subs r1, #1
 8000212:	3901      	subs	r1, #1
		// El shift se hace por 1, por lo que se incrementa de a 2 bytes
		strh r2, [r0, r1, LSL #1]
 8000214:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
		bne loop1
 8000218:	d1fb      	bne.n	8000212 <loop1>

0800021a <exit1>:
	exit1:
    	bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar32>:
@ Valor de retorno: Nada
@
.thumb_func
    asm_productoEscalar32:
    	// Los registros a partir de r4 se deben guardar (ejemplo de varios registros)
    	push {r4-r8}				// Resguardar registros de r4 a r8
 800021c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}

08000220 <_for>:
    _for:
    	subs r2, #1
 8000220:	3a01      	subs	r2, #1
    	ldr r4, [r0, r2, LSL #2]	// r4 = *(r0 + (r2 << 2))
 8000222:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	mul r4, r4, r3 				// r4 = r3*r4
 8000226:	fb04 f403 	mul.w	r4, r4, r3
    	str r4, [r1, r2, LSL #2]	// *(r1 + (r2 << 2) = r4
 800022a:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    	bne _for					// Seguir en el ciclo mientras r2>0
 800022e:	d1f7      	bne.n	8000220 <_for>
    	pop {r4-r8}					// Recuperar valores de registros. 1Se puede ocupar hasta r12
 8000230:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000234:	4770      	bx	lr

08000236 <asm_productoEscalar16>:
@
@ Valor de retorno: Nada
@
.thumb_func
    asm_productoEscalar16:
    	push {r4}					// Resguardar r4
 8000236:	b410      	push	{r4}

08000238 <_for1>:
    _for1:
    	subs r2, #1					// r2 = r2 - 1
 8000238:	3a01      	subs	r2, #1
    	ldrh r4, [r0, r2, LSL #2]	// r4 = *(r0 + (r2 << 2))
 800023a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
    	mul r4, r4, r3				// r4 = r4 * r3
 800023e:	fb04 f403 	mul.w	r4, r4, r3
    	strh r4, [r1, r2, LSL #2]	// *(r1 + (r2 << 2)) = r4
 8000242:	f821 4022 	strh.w	r4, [r1, r2, lsl #2]
        bne _for1					// Seguir en el ciclo mientras r2>0
 8000246:	d1f7      	bne.n	8000238 <_for1>
        pop {r4}					// Recuperar el valor de r4
 8000248:	bc10      	pop	{r4}
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800024a:	4770      	bx	lr

0800024c <asm_productoEscalar12>:
@
@ Valor de retorno: Nada
@
.thumb_func
    asm_productoEscalar12:
        push {r4, r5}				// Resguardar r4 y r5
 800024c:	b430      	push	{r4, r5}

0800024e <_for2>:
    _for2:
    	subs r2, #1					// r2 = r2 - 1
 800024e:	3a01      	subs	r2, #1
    	ldrh r4, [r0, r2, LSL #2]	// r4 = *(r0 + (r2 << 2))
 8000250:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
    	mul r4, r4, r3				// r4 = r4 * r3
 8000254:	fb04 f403 	mul.w	r4, r4, r3
    	usat r5, #12, r4			// Saturación en 12 bits
 8000258:	f384 050c 	usat	r5, #12, r4
    	strh r5, [r1, r2, LSL #2]	// *(r1 + (r2 << 2)) = r5
 800025c:	f821 5022 	strh.w	r5, [r1, r2, lsl #2]
        bne _for2					// Seguir en el ciclo mientras r2>0
 8000260:	d1f5      	bne.n	800024e <_for2>
        pop {r4, r5}				// Recuperar el valor de r4 y r5
 8000262:	bc30      	pop	{r4, r5}
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000264:	4770      	bx	lr

08000266 <asm_filtroVentana10>:
 * -r7: Límite inferior de la ventana en el vector de muestras
*/

.thumb_func
    asm_filtroVentana10:
    	push {r4-r10}
 8000266:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    	mov r3, r2		// Resguardo longitud (r2) para ver cuando estoy fuera del vector
 800026a:	4613      	mov	r3, r2

0800026c <_for3>:
    // Vucle que recorre el vector de muestras
    _for3:
    	subs r3, #1		// r3 = r3 - 1 --> r3 indice que recorre el vector
 800026c:	3b01      	subs	r3, #1
    	beq _exit2		// Salir del programa si se terminaron las muestras
 800026e:	d01b      	beq.n	80002a8 <_exit2>
    	mov r6, #0		// Reinicio el valor del acumulador cada vez que me muevo de muestra
 8000270:	f04f 0600 	mov.w	r6, #0
    	add r4, r3, #SampleOffset	// r4 = r3 + 6 --> r4 indice para mover la ventana
 8000274:	f103 0406 	add.w	r4, r3, #6
    	cmp r4, #LimInfVentana	// Comparo con la cantidad de muestras que tiene la ventana
 8000278:	2c0b      	cmp	r4, #11
    	mov r7, #0	// Límite inferior igual a cero si no quedan más muestras --> ventana más grande que cantidad de muestras restantes
 800027a:	f04f 0700 	mov.w	r7, #0
    	itt hi			// Si el tamamño de la ventana es mas grande que las muestras que quedan, se compara con cero
 800027e:	bf84      	itt	hi
    	subhi r7, r4, #LimInfVentana	// Límite inferior de la ventana, si es necesario --> ventana más pequeña que muestras restantes
 8000280:	f1a4 070b 	subhi.w	r7, r4, #11
    	subhi r7, #1
 8000284:	3f01      	subhi	r7, #1
    	mov r8, #LimInfVentana // No se puede dividir directamente por un número, se acá para no esta dentror de it y sacar una instrucción
 8000286:	f04f 080b 	mov.w	r8, #11

0800028a <_for4>:

    	// Bucle que recorre las muestras en la ventana
    	_for4:
    		subs r4, #1
 800028a:	3c01      	subs	r4, #1
    		beq _for3		// si r4 es cero volver al bucle principal
 800028c:	d0ee      	beq.n	800026c <_for3>
    		cmp r2, r4		// ignorar operaciones si estamos afura del vector
 800028e:	42a2      	cmp	r2, r4
    		bls _for4		// retorna al for para seguir descontando r4
 8000290:	d9fb      	bls.n	800028a <_for4>
    		cmp r4, r7		// Comparo con el limite inferior
 8000292:	42bc      	cmp	r4, r7
    		ittt ls			// Comparo para ver si llegue al límite del recorrido
 8000294:	bf9e      	ittt	ls
    		udivls r6, r6, r8	// Si llegué al límite divido por la cantidad de muestras (cargadas en r5 previamente)
 8000296:	fbb6 f6f8 	udivls	r6, r6, r8
    		strhls r6, [r1, r3, LSL #1]	// *(r1 + (r3>>1)) = r6 --> guardo resultado en vector de salida
 800029a:	f821 6013 	strhls.w	r6, [r1, r3, lsl #1]
    		bls _for3		// Vuelvo al bucle principal
 800029e:	e7e5      	bls.n	800026c <_for3>
    		// En caso de que no llegue al límite, sigo acumulando
    		ldrh r5, [r0, r4, LSL #1]	// r5 = *(r0 + (r3>>1)) --> cargo un nuevo valor del vector de muestras
 80002a0:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
    		add r6, r6, r5				// r6 = r6 + r5
 80002a4:	442e      	add	r6, r5
    		b _for4
 80002a6:	e7f0      	b.n	800028a <_for4>

080002a8 <_exit2>:

    _exit2:
    	pop {r4-r10}
 80002a8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    	bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80002ac:	4770      	bx	lr

080002ae <asm_pack32to16>:
@
@ Valor de retorno: Nada
@
.thumb_func
    asm_pack32to16:
    	push {r4}				// Resguardar r4
 80002ae:	b410      	push	{r4}

080002b0 <_for5>:
    _for5:
    	subs r2, #1					// r2 = r2 - 1
 80002b0:	3a01      	subs	r2, #1
    	ldr r4, [r0, r2, LSL #2]	// r4 = *(r0 + (r2 << 4))
 80002b2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	asr r3, r4, #16				// r3 = r4>>16 --> aritmetic shift right (tiene en cuenta el signo)
 80002b6:	ea4f 4324 	mov.w	r3, r4, asr #16
    	strh r3, [r1, r2, LSL #1]	// *(r1 + (r2 << 2)) = r3
 80002ba:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
        bne _for5					// Seguir en el ciclo mientras r2>0
 80002be:	d1f7      	bne.n	80002b0 <_for5>
        pop {r4}
 80002c0:	bc10      	pop	{r4}

        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80002c2:	4770      	bx	lr

080002c4 <asm_max>:
@
@ Valor de retorno: indice donde se encuentra el mayor valor
@
.thumb_func
    asm_max:
    	push {r4-r7}
 80002c4:	b4f0      	push	{r4, r5, r6, r7}
    	sub r1, #1
 80002c6:	f1a1 0101 	sub.w	r1, r1, #1
    	ldr r2, [r0, r1, LSL #2] // Se guarda el primer valor para comparar
 80002ca:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    	mov r3, r1	// Se guarda el índice
 80002ce:	460b      	mov	r3, r1
    	subs r1, #1
 80002d0:	3901      	subs	r1, #1

080002d2 <_for6>:

    _for6:
    	ldr r4, [r0, r1, LSL #2] // Se carga siguiente valor para comparar
 80002d2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    	cmp r4, r2 // Se compara con el valor cargado previo
 80002d6:	4294      	cmp	r4, r2
    	itt gt
 80002d8:	bfc4      	itt	gt
    	movgt r2, r4 // Si el nuevo valor es mayor, se almacena en r2 para volver a comparar
 80002da:	4622      	movgt	r2, r4
    	movgt r3, r1 // Se guarda el indice
 80002dc:	460b      	movgt	r3, r1
    	subs r1, #1
 80002de:	3901      	subs	r1, #1
    	bne _for6
 80002e0:	d1f7      	bne.n	80002d2 <_for6>

    	pop {r4-r7}
 80002e2:	bcf0      	pop	{r4, r5, r6, r7}
    	mov r0, r3	// Se guarda el valor de retorno
 80002e4:	4618      	mov	r0, r3
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80002e6:	4770      	bx	lr

080002e8 <asm_downSampleM>:
@
@ Valor de retorno: indice donde se encuentra el mayor valor
@
.thumb_func
    asm_downSampleM:
    	push {r4-r7}
 80002e8:	b4f0      	push	{r4, r5, r6, r7}
    	mov r4, #0  // Indice para recorrer el vector
 80002ea:	f04f 0400 	mov.w	r4, #0
    	mov r5, #0  // Indice para guardar los valores
 80002ee:	f04f 0500 	mov.w	r5, #0
    	mov r6, r3  // Se copia n para ir modificando el valor de comparación
 80002f2:	461e      	mov	r6, r3
    	sub r6, #1  // Se resta uno para tener en cuenta la muestra en posición cero
 80002f4:	f1a6 0601 	sub.w	r6, r6, #1
    	sub r2, #1  // Se resta uno, para no exceder el límite del vector
 80002f8:	f1a2 0201 	sub.w	r2, r2, #1

080002fc <_for7>:

    _for7:
    	ldr r7, [r0, r4, LSL #2]  // Se carga el valor del vector de entrada
 80002fc:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
    	cmp r4, r6  // Se compara con el N, que se va desplazando (por eso se hizo la copia)
 8000300:	42b4      	cmp	r4, r6
    	itee eq
 8000302:	bf0e      	itee	eq
    	addeq r6, r6, r3	// Si es igual a N, omitir la muestra y actualizar el N de comparación
 8000304:	18f6      	addeq	r6, r6, r3
    	strne r7, [r1, r5, LSL #2] // Si es distinto, se guarda en el vector destino
 8000306:	f841 7025 	strne.w	r7, [r1, r5, lsl #2]
    	addne r5, #1  // Se actualiza el índice del vector de salida
 800030a:	3501      	addne	r5, #1
    	add r4, #1   // Se actualiza el índice del vector de entrada
 800030c:	f104 0401 	add.w	r4, r4, #1
    	cmp r4, r2  // Si el índice llego a la longitud se sale de la función
 8000310:	4294      	cmp	r4, r2
    	bne _for7  // Si no se llegó al final, se sigue iterando
 8000312:	d1f3      	bne.n	80002fc <_for7>

    	pop {r4-r7}
 8000314:	bcf0      	pop	{r4, r5, r6, r7}
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000316:	4770      	bx	lr

08000318 <asm_invertir>:
@
@ Valor de retorno: indice donde se encuentra el mayor valor
@
.thumb_func
    asm_invertir:
    	push {r4-r7}
 8000318:	b4f0      	push	{r4, r5, r6, r7}
    	mov r2, #0  // Índice para invertir el vector
 800031a:	f04f 0200 	mov.w	r2, #0

0800031e <_for8>:

    _for8:
    	subs r1, #1	// Se decrementa el contador decreciente
 800031e:	3901      	subs	r1, #1
    	ldrh r3, [r0, r1, LSL #1]  // Se carga la muestras desde "longitud" hacia el medio --> índice que decrece
 8000320:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
    	ldrh r4, [r0, r2, LSL #1]  // Se carga la muestras desde "cero" hacia el medio --> índice que crece
 8000324:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
    	cmp r1, r2 //Comparo los índices, sin son iguales o r2 supero a r1 entonces ya se terminó el proceso
 8000328:	4291      	cmp	r1, r2
    	itte hi
 800032a:	bf86      	itte	hi
    	strhhi r4, [r0, r1, LSL #1] // Guardar desde el extremo "longitud" el valor hacia el extremo "cero"
 800032c:	f820 4011 	strhhi.w	r4, [r0, r1, lsl #1]
		strhhi r3, [r0, r2, LSL #1]// Guardar desde el extremo "cero" el valor hacia el extremo "longitud"
 8000330:	f820 3012 	strhhi.w	r3, [r0, r2, lsl #1]
		bls _exit3		// Salir si los índices son iguales o r2 superó a r1
 8000334:	e002      	bls.n	800033c <_exit3>
    	add r2, #1		// Se incrementa el índice creciente
 8000336:	f102 0201 	add.w	r2, r2, #1
    	bne _for8  // Si no se llegó al final, se sigue iterando
 800033a:	d1f0      	bne.n	800031e <_for8>

0800033c <_exit3>:

    _exit3:
    	pop {r4-r7}
 800033c:	bcf0      	pop	{r4, r5, r6, r7}
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800033e:	4770      	bx	lr

08000340 <asm_generaEco>:

#define SAMPLE_FREQ	44100

.thumb_func
    asm_generaEco:
    	push {r4-r10}
 8000340:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    	// Calcular muestra a partir de donde se inicia el eco --> r4
    	// La cuenta es SampleOffset = msegRetardo*SAMPLE_FREQ/1000
    	mov r4, #SAMPLE_FREQ  // r4 será el límite a partir de donde se aplicará el eco
 8000344:	f64a 4444 	movw	r4, #44100	; 0xac44
    	mul r4, r4, r3    // r4 = SAMPLE_FREQ*msegRetardo
 8000348:	fb04 f403 	mul.w	r4, r4, r3
    	mov r3, #1000  // Se recicla r3 --> 1000 por que son milisegundos, y la frecuencia está en segundos
 800034c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    	udiv r4, r4, r3  // r4 = r4/1000 (para el ej 10 debería da 882)
 8000350:	fbb4 f4f3 	udiv	r4, r4, r3
    	sub r2, #1  // longitud = longitud - 1
 8000354:	f1a2 0201 	sub.w	r2, r2, #1
    	mov r6, #-1
 8000358:	f04f 36ff 	mov.w	r6, #4294967295

0800035c <_for9>:

    _for9:
    	sub r3, r2, r4  // Se recicla r3 = longitud - muestraEco(882 en el ejemplo)
 800035c:	eba2 0304 	sub.w	r3, r2, r4
    	ldrsh r5, [r0, r2, LSL #1]  // Desde la última muestra
 8000360:	f930 5012 	ldrsh.w	r5, [r0, r2, lsl #1]
    	ldrsh r6, [r0, r3, LSL #1]  // Desde la muestra del eco
 8000364:	f930 6013 	ldrsh.w	r6, [r0, r3, lsl #1]
    	asr r6, #1	// Muestra de eco dividido por dos
 8000368:	ea4f 0666 	mov.w	r6, r6, asr #1
    	add r5, r5, r6 // Se compone la muestra con el eco
 800036c:	4435      	add	r5, r6
    	ssat r6, #16, r5
 800036e:	f305 060f 	ssat	r6, #16, r5
    	strh r6, [r1, r2, LSL #1] // Se guarda con el índice r2
 8000372:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]
    	cmp r2, r4  // Si el índice es igual al offset del eco, se debe dejar de añadir
 8000376:	42a2      	cmp	r2, r4
    	sub r2, #1	// Se decrementa el índice, sin modificar el APSR
 8000378:	f1a2 0201 	sub.w	r2, r2, #1
    	bne _for9
 800037c:	d1ee      	bne.n	800035c <_for9>

0800037e <_for10>:

    _for10:
    	// Muestras sin eco
    	ldrh r5, [r0, r2, LSL #1]
 800037e:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
    	strh r5, [r1, r2, LSL #1]
 8000382:	f821 5012 	strh.w	r5, [r1, r2, lsl #1]
    	subs r2, #1
 8000386:	3a01      	subs	r2, #1
    	bne _for10
 8000388:	d1f9      	bne.n	800037e <_for10>

    	pop {r4-r10}
 800038a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800038e:	4770      	bx	lr

08000390 <asm_generaEcoSIMD>:
        @ bx lr
        @ push {lr} ... pop {pc}

.thumb_func
    asm_generaEcoSIMD:
    	push {r4-r10}
 8000390:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    	// Calcular muestra a partir de donde se inicia el eco --> r4
    	// La cuenta es SampleOffset = msegRetardo*SAMPLE_FREQ/1000
    	mov r4, #SAMPLE_FREQ  // r4 será el límite a partir de donde se aplicará el eco
 8000394:	f64a 4444 	movw	r4, #44100	; 0xac44
    	mul r4, r4, r3    // r4 = SAMPLE_FREQ*msegRetardo
 8000398:	fb04 f403 	mul.w	r4, r4, r3
    	mov r3, #1000  // Se recicla r3 --> 1000 por que son milisegundos, y la frecuencia está en segundos
 800039c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    	udiv r4, r4, r3  // r4 = r4/1000 (para el ej 10 debería da 882)
 80003a0:	fbb4 f4f3 	udiv	r4, r4, r3
    	lsr r4, #1
 80003a4:	ea4f 0454 	mov.w	r4, r4, lsr #1
    	lsr r2, #1
 80003a8:	ea4f 0252 	mov.w	r2, r2, lsr #1
    	sub r2, #1  // longitud = longitud - 1
 80003ac:	f1a2 0201 	sub.w	r2, r2, #1

080003b0 <_for11>:

    _for11:
    	sub r3, r2, r4  // Se recicla r3 = longitud - muestraEco(882 en el ejemplo)
 80003b0:	eba2 0304 	sub.w	r3, r2, r4
    	ldr r5, [r0, r2, LSL #2]  // Desde la última muestra
 80003b4:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    	ldr r6, [r0, r3, LSL #2]  // Desde la muestra del eco
 80003b8:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
    	asr r6, #1 // muestra de eco dividido por 2
 80003bc:	ea4f 0666 	mov.w	r6, r6, asr #1
    	qadd16 r6, r6, r5	// r6 = sat(r6 + r5, 16bits)
 80003c0:	fa96 f615 	qadd16	r6, r6, r5
    	str r6, [r1, r2, LSL #2] // Se guarda con el índice r2
 80003c4:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
    	cmp r2, r4  // Si el índice es igual al offset del eco, se debe dejar de añadir
 80003c8:	42a2      	cmp	r2, r4
    	sub r2, #1	// Se decrementa el índice, sin modificar el APSR
 80003ca:	f1a2 0201 	sub.w	r2, r2, #1
    	bne _for11
 80003ce:	d1ef      	bne.n	80003b0 <_for11>

080003d0 <_for12>:

    _for12:
    	// Muestras sin eco
    	ldrh r5, [r0, r2, LSL #1]
 80003d0:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
    	strh r5, [r1, r2, LSL #1]
 80003d4:	f821 5012 	strh.w	r5, [r1, r2, lsl #1]
    	subs r2, #1
 80003d8:	3a01      	subs	r2, #1
    	bne _for12
 80003da:	d1f9      	bne.n	80003d0 <_for12>

    	pop {r4-r10}
 80003dc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80003e0:	4770      	bx	lr
	...

080003f0 <memchr>:
 80003f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003f4:	2a10      	cmp	r2, #16
 80003f6:	db2b      	blt.n	8000450 <memchr+0x60>
 80003f8:	f010 0f07 	tst.w	r0, #7
 80003fc:	d008      	beq.n	8000410 <memchr+0x20>
 80003fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000402:	3a01      	subs	r2, #1
 8000404:	428b      	cmp	r3, r1
 8000406:	d02d      	beq.n	8000464 <memchr+0x74>
 8000408:	f010 0f07 	tst.w	r0, #7
 800040c:	b342      	cbz	r2, 8000460 <memchr+0x70>
 800040e:	d1f6      	bne.n	80003fe <memchr+0xe>
 8000410:	b4f0      	push	{r4, r5, r6, r7}
 8000412:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000416:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800041a:	f022 0407 	bic.w	r4, r2, #7
 800041e:	f07f 0700 	mvns.w	r7, #0
 8000422:	2300      	movs	r3, #0
 8000424:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000428:	3c08      	subs	r4, #8
 800042a:	ea85 0501 	eor.w	r5, r5, r1
 800042e:	ea86 0601 	eor.w	r6, r6, r1
 8000432:	fa85 f547 	uadd8	r5, r5, r7
 8000436:	faa3 f587 	sel	r5, r3, r7
 800043a:	fa86 f647 	uadd8	r6, r6, r7
 800043e:	faa5 f687 	sel	r6, r5, r7
 8000442:	b98e      	cbnz	r6, 8000468 <memchr+0x78>
 8000444:	d1ee      	bne.n	8000424 <memchr+0x34>
 8000446:	bcf0      	pop	{r4, r5, r6, r7}
 8000448:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800044c:	f002 0207 	and.w	r2, r2, #7
 8000450:	b132      	cbz	r2, 8000460 <memchr+0x70>
 8000452:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000456:	3a01      	subs	r2, #1
 8000458:	ea83 0301 	eor.w	r3, r3, r1
 800045c:	b113      	cbz	r3, 8000464 <memchr+0x74>
 800045e:	d1f8      	bne.n	8000452 <memchr+0x62>
 8000460:	2000      	movs	r0, #0
 8000462:	4770      	bx	lr
 8000464:	3801      	subs	r0, #1
 8000466:	4770      	bx	lr
 8000468:	2d00      	cmp	r5, #0
 800046a:	bf06      	itte	eq
 800046c:	4635      	moveq	r5, r6
 800046e:	3803      	subeq	r0, #3
 8000470:	3807      	subne	r0, #7
 8000472:	f015 0f01 	tst.w	r5, #1
 8000476:	d107      	bne.n	8000488 <memchr+0x98>
 8000478:	3001      	adds	r0, #1
 800047a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800047e:	bf02      	ittt	eq
 8000480:	3001      	addeq	r0, #1
 8000482:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000486:	3001      	addeq	r0, #1
 8000488:	bcf0      	pop	{r4, r5, r6, r7}
 800048a:	3801      	subs	r0, #1
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <__aeabi_uldivmod>:
 8000490:	b953      	cbnz	r3, 80004a8 <__aeabi_uldivmod+0x18>
 8000492:	b94a      	cbnz	r2, 80004a8 <__aeabi_uldivmod+0x18>
 8000494:	2900      	cmp	r1, #0
 8000496:	bf08      	it	eq
 8000498:	2800      	cmpeq	r0, #0
 800049a:	bf1c      	itt	ne
 800049c:	f04f 31ff 	movne.w	r1, #4294967295
 80004a0:	f04f 30ff 	movne.w	r0, #4294967295
 80004a4:	f000 b974 	b.w	8000790 <__aeabi_idiv0>
 80004a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004b0:	f000 f806 	bl	80004c0 <__udivmoddi4>
 80004b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004bc:	b004      	add	sp, #16
 80004be:	4770      	bx	lr

080004c0 <__udivmoddi4>:
 80004c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004c4:	9d08      	ldr	r5, [sp, #32]
 80004c6:	4604      	mov	r4, r0
 80004c8:	468e      	mov	lr, r1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d14d      	bne.n	800056a <__udivmoddi4+0xaa>
 80004ce:	428a      	cmp	r2, r1
 80004d0:	4694      	mov	ip, r2
 80004d2:	d969      	bls.n	80005a8 <__udivmoddi4+0xe8>
 80004d4:	fab2 f282 	clz	r2, r2
 80004d8:	b152      	cbz	r2, 80004f0 <__udivmoddi4+0x30>
 80004da:	fa01 f302 	lsl.w	r3, r1, r2
 80004de:	f1c2 0120 	rsb	r1, r2, #32
 80004e2:	fa20 f101 	lsr.w	r1, r0, r1
 80004e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ea:	ea41 0e03 	orr.w	lr, r1, r3
 80004ee:	4094      	lsls	r4, r2
 80004f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f4:	0c21      	lsrs	r1, r4, #16
 80004f6:	fbbe f6f8 	udiv	r6, lr, r8
 80004fa:	fa1f f78c 	uxth.w	r7, ip
 80004fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000502:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000506:	fb06 f107 	mul.w	r1, r6, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d90a      	bls.n	8000524 <__udivmoddi4+0x64>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f106 30ff 	add.w	r0, r6, #4294967295
 8000516:	f080 811f 	bcs.w	8000758 <__udivmoddi4+0x298>
 800051a:	4299      	cmp	r1, r3
 800051c:	f240 811c 	bls.w	8000758 <__udivmoddi4+0x298>
 8000520:	3e02      	subs	r6, #2
 8000522:	4463      	add	r3, ip
 8000524:	1a5b      	subs	r3, r3, r1
 8000526:	b2a4      	uxth	r4, r4
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3310 	mls	r3, r8, r0, r3
 8000530:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000534:	fb00 f707 	mul.w	r7, r0, r7
 8000538:	42a7      	cmp	r7, r4
 800053a:	d90a      	bls.n	8000552 <__udivmoddi4+0x92>
 800053c:	eb1c 0404 	adds.w	r4, ip, r4
 8000540:	f100 33ff 	add.w	r3, r0, #4294967295
 8000544:	f080 810a 	bcs.w	800075c <__udivmoddi4+0x29c>
 8000548:	42a7      	cmp	r7, r4
 800054a:	f240 8107 	bls.w	800075c <__udivmoddi4+0x29c>
 800054e:	4464      	add	r4, ip
 8000550:	3802      	subs	r0, #2
 8000552:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000556:	1be4      	subs	r4, r4, r7
 8000558:	2600      	movs	r6, #0
 800055a:	b11d      	cbz	r5, 8000564 <__udivmoddi4+0xa4>
 800055c:	40d4      	lsrs	r4, r2
 800055e:	2300      	movs	r3, #0
 8000560:	e9c5 4300 	strd	r4, r3, [r5]
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	428b      	cmp	r3, r1
 800056c:	d909      	bls.n	8000582 <__udivmoddi4+0xc2>
 800056e:	2d00      	cmp	r5, #0
 8000570:	f000 80ef 	beq.w	8000752 <__udivmoddi4+0x292>
 8000574:	2600      	movs	r6, #0
 8000576:	e9c5 0100 	strd	r0, r1, [r5]
 800057a:	4630      	mov	r0, r6
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	fab3 f683 	clz	r6, r3
 8000586:	2e00      	cmp	r6, #0
 8000588:	d14a      	bne.n	8000620 <__udivmoddi4+0x160>
 800058a:	428b      	cmp	r3, r1
 800058c:	d302      	bcc.n	8000594 <__udivmoddi4+0xd4>
 800058e:	4282      	cmp	r2, r0
 8000590:	f200 80f9 	bhi.w	8000786 <__udivmoddi4+0x2c6>
 8000594:	1a84      	subs	r4, r0, r2
 8000596:	eb61 0303 	sbc.w	r3, r1, r3
 800059a:	2001      	movs	r0, #1
 800059c:	469e      	mov	lr, r3
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d0e0      	beq.n	8000564 <__udivmoddi4+0xa4>
 80005a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80005a6:	e7dd      	b.n	8000564 <__udivmoddi4+0xa4>
 80005a8:	b902      	cbnz	r2, 80005ac <__udivmoddi4+0xec>
 80005aa:	deff      	udf	#255	; 0xff
 80005ac:	fab2 f282 	clz	r2, r2
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	f040 8092 	bne.w	80006da <__udivmoddi4+0x21a>
 80005b6:	eba1 010c 	sub.w	r1, r1, ip
 80005ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005be:	fa1f fe8c 	uxth.w	lr, ip
 80005c2:	2601      	movs	r6, #1
 80005c4:	0c20      	lsrs	r0, r4, #16
 80005c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80005ca:	fb07 1113 	mls	r1, r7, r3, r1
 80005ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005d2:	fb0e f003 	mul.w	r0, lr, r3
 80005d6:	4288      	cmp	r0, r1
 80005d8:	d908      	bls.n	80005ec <__udivmoddi4+0x12c>
 80005da:	eb1c 0101 	adds.w	r1, ip, r1
 80005de:	f103 38ff 	add.w	r8, r3, #4294967295
 80005e2:	d202      	bcs.n	80005ea <__udivmoddi4+0x12a>
 80005e4:	4288      	cmp	r0, r1
 80005e6:	f200 80cb 	bhi.w	8000780 <__udivmoddi4+0x2c0>
 80005ea:	4643      	mov	r3, r8
 80005ec:	1a09      	subs	r1, r1, r0
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f4:	fb07 1110 	mls	r1, r7, r0, r1
 80005f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000600:	45a6      	cmp	lr, r4
 8000602:	d908      	bls.n	8000616 <__udivmoddi4+0x156>
 8000604:	eb1c 0404 	adds.w	r4, ip, r4
 8000608:	f100 31ff 	add.w	r1, r0, #4294967295
 800060c:	d202      	bcs.n	8000614 <__udivmoddi4+0x154>
 800060e:	45a6      	cmp	lr, r4
 8000610:	f200 80bb 	bhi.w	800078a <__udivmoddi4+0x2ca>
 8000614:	4608      	mov	r0, r1
 8000616:	eba4 040e 	sub.w	r4, r4, lr
 800061a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800061e:	e79c      	b.n	800055a <__udivmoddi4+0x9a>
 8000620:	f1c6 0720 	rsb	r7, r6, #32
 8000624:	40b3      	lsls	r3, r6
 8000626:	fa22 fc07 	lsr.w	ip, r2, r7
 800062a:	ea4c 0c03 	orr.w	ip, ip, r3
 800062e:	fa20 f407 	lsr.w	r4, r0, r7
 8000632:	fa01 f306 	lsl.w	r3, r1, r6
 8000636:	431c      	orrs	r4, r3
 8000638:	40f9      	lsrs	r1, r7
 800063a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800063e:	fa00 f306 	lsl.w	r3, r0, r6
 8000642:	fbb1 f8f9 	udiv	r8, r1, r9
 8000646:	0c20      	lsrs	r0, r4, #16
 8000648:	fa1f fe8c 	uxth.w	lr, ip
 800064c:	fb09 1118 	mls	r1, r9, r8, r1
 8000650:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000654:	fb08 f00e 	mul.w	r0, r8, lr
 8000658:	4288      	cmp	r0, r1
 800065a:	fa02 f206 	lsl.w	r2, r2, r6
 800065e:	d90b      	bls.n	8000678 <__udivmoddi4+0x1b8>
 8000660:	eb1c 0101 	adds.w	r1, ip, r1
 8000664:	f108 3aff 	add.w	sl, r8, #4294967295
 8000668:	f080 8088 	bcs.w	800077c <__udivmoddi4+0x2bc>
 800066c:	4288      	cmp	r0, r1
 800066e:	f240 8085 	bls.w	800077c <__udivmoddi4+0x2bc>
 8000672:	f1a8 0802 	sub.w	r8, r8, #2
 8000676:	4461      	add	r1, ip
 8000678:	1a09      	subs	r1, r1, r0
 800067a:	b2a4      	uxth	r4, r4
 800067c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000680:	fb09 1110 	mls	r1, r9, r0, r1
 8000684:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000688:	fb00 fe0e 	mul.w	lr, r0, lr
 800068c:	458e      	cmp	lr, r1
 800068e:	d908      	bls.n	80006a2 <__udivmoddi4+0x1e2>
 8000690:	eb1c 0101 	adds.w	r1, ip, r1
 8000694:	f100 34ff 	add.w	r4, r0, #4294967295
 8000698:	d26c      	bcs.n	8000774 <__udivmoddi4+0x2b4>
 800069a:	458e      	cmp	lr, r1
 800069c:	d96a      	bls.n	8000774 <__udivmoddi4+0x2b4>
 800069e:	3802      	subs	r0, #2
 80006a0:	4461      	add	r1, ip
 80006a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006a6:	fba0 9402 	umull	r9, r4, r0, r2
 80006aa:	eba1 010e 	sub.w	r1, r1, lr
 80006ae:	42a1      	cmp	r1, r4
 80006b0:	46c8      	mov	r8, r9
 80006b2:	46a6      	mov	lr, r4
 80006b4:	d356      	bcc.n	8000764 <__udivmoddi4+0x2a4>
 80006b6:	d053      	beq.n	8000760 <__udivmoddi4+0x2a0>
 80006b8:	b15d      	cbz	r5, 80006d2 <__udivmoddi4+0x212>
 80006ba:	ebb3 0208 	subs.w	r2, r3, r8
 80006be:	eb61 010e 	sbc.w	r1, r1, lr
 80006c2:	fa01 f707 	lsl.w	r7, r1, r7
 80006c6:	fa22 f306 	lsr.w	r3, r2, r6
 80006ca:	40f1      	lsrs	r1, r6
 80006cc:	431f      	orrs	r7, r3
 80006ce:	e9c5 7100 	strd	r7, r1, [r5]
 80006d2:	2600      	movs	r6, #0
 80006d4:	4631      	mov	r1, r6
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	40d8      	lsrs	r0, r3
 80006e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006e4:	fa21 f303 	lsr.w	r3, r1, r3
 80006e8:	4091      	lsls	r1, r2
 80006ea:	4301      	orrs	r1, r0
 80006ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f0:	fa1f fe8c 	uxth.w	lr, ip
 80006f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80006f8:	fb07 3610 	mls	r6, r7, r0, r3
 80006fc:	0c0b      	lsrs	r3, r1, #16
 80006fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000702:	fb00 f60e 	mul.w	r6, r0, lr
 8000706:	429e      	cmp	r6, r3
 8000708:	fa04 f402 	lsl.w	r4, r4, r2
 800070c:	d908      	bls.n	8000720 <__udivmoddi4+0x260>
 800070e:	eb1c 0303 	adds.w	r3, ip, r3
 8000712:	f100 38ff 	add.w	r8, r0, #4294967295
 8000716:	d22f      	bcs.n	8000778 <__udivmoddi4+0x2b8>
 8000718:	429e      	cmp	r6, r3
 800071a:	d92d      	bls.n	8000778 <__udivmoddi4+0x2b8>
 800071c:	3802      	subs	r0, #2
 800071e:	4463      	add	r3, ip
 8000720:	1b9b      	subs	r3, r3, r6
 8000722:	b289      	uxth	r1, r1
 8000724:	fbb3 f6f7 	udiv	r6, r3, r7
 8000728:	fb07 3316 	mls	r3, r7, r6, r3
 800072c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000730:	fb06 f30e 	mul.w	r3, r6, lr
 8000734:	428b      	cmp	r3, r1
 8000736:	d908      	bls.n	800074a <__udivmoddi4+0x28a>
 8000738:	eb1c 0101 	adds.w	r1, ip, r1
 800073c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000740:	d216      	bcs.n	8000770 <__udivmoddi4+0x2b0>
 8000742:	428b      	cmp	r3, r1
 8000744:	d914      	bls.n	8000770 <__udivmoddi4+0x2b0>
 8000746:	3e02      	subs	r6, #2
 8000748:	4461      	add	r1, ip
 800074a:	1ac9      	subs	r1, r1, r3
 800074c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000750:	e738      	b.n	80005c4 <__udivmoddi4+0x104>
 8000752:	462e      	mov	r6, r5
 8000754:	4628      	mov	r0, r5
 8000756:	e705      	b.n	8000564 <__udivmoddi4+0xa4>
 8000758:	4606      	mov	r6, r0
 800075a:	e6e3      	b.n	8000524 <__udivmoddi4+0x64>
 800075c:	4618      	mov	r0, r3
 800075e:	e6f8      	b.n	8000552 <__udivmoddi4+0x92>
 8000760:	454b      	cmp	r3, r9
 8000762:	d2a9      	bcs.n	80006b8 <__udivmoddi4+0x1f8>
 8000764:	ebb9 0802 	subs.w	r8, r9, r2
 8000768:	eb64 0e0c 	sbc.w	lr, r4, ip
 800076c:	3801      	subs	r0, #1
 800076e:	e7a3      	b.n	80006b8 <__udivmoddi4+0x1f8>
 8000770:	4646      	mov	r6, r8
 8000772:	e7ea      	b.n	800074a <__udivmoddi4+0x28a>
 8000774:	4620      	mov	r0, r4
 8000776:	e794      	b.n	80006a2 <__udivmoddi4+0x1e2>
 8000778:	4640      	mov	r0, r8
 800077a:	e7d1      	b.n	8000720 <__udivmoddi4+0x260>
 800077c:	46d0      	mov	r8, sl
 800077e:	e77b      	b.n	8000678 <__udivmoddi4+0x1b8>
 8000780:	3b02      	subs	r3, #2
 8000782:	4461      	add	r1, ip
 8000784:	e732      	b.n	80005ec <__udivmoddi4+0x12c>
 8000786:	4630      	mov	r0, r6
 8000788:	e709      	b.n	800059e <__udivmoddi4+0xde>
 800078a:	4464      	add	r4, ip
 800078c:	3802      	subs	r0, #2
 800078e:	e742      	b.n	8000616 <__udivmoddi4+0x156>

08000790 <__aeabi_idiv0>:
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800079a:	f3ef 8314 	mrs	r3, CONTROL
 800079e:	607b      	str	r3, [r7, #4]
  return(result);
 80007a0:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80007a2:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	f383 8814 	msr	CONTROL, r3
}
 80007b6:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80007b8:	f3ef 8314 	mrs	r3, CONTROL
 80007bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80007be:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80007c0:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	f383 8814 	msr	CONTROL, r3
}
 80007d4:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80007d6:	f3ef 8314 	mrs	r3, CONTROL
 80007da:	617b      	str	r3, [r7, #20]
  return(result);
 80007dc:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80007de:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80007e0:	f7ff fd06 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80007e4:	f3ef 8314 	mrs	r3, CONTROL
 80007e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80007ea:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80007ec:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007fc:	b08a      	sub	sp, #40	; 0x28
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fdac 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f890 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f99e 	bl	8000b48 <MX_GPIO_Init>
  MX_ETH_Init();
 800080c:	f000 f8f6 	bl	80009fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000810:	f000 f942 	bl	8000a98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000814:	f000 f96a 	bl	8000aec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000818:	f7ff ffbc 	bl	8000794 <PrivilegiosSVC>

  // Activa contador de ciclos (iniciar una sola vez)
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 800081c:	4b41      	ldr	r3, [pc, #260]	; (8000924 <main+0x12c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a40      	ldr	r2, [pc, #256]	; (8000924 <main+0x12c>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]
//  ciclos_C = DWT->CYCCNT;
//  DWT->CYCCNT = 0;
//  asm_invertir(vector, tam);
//  ciclos_ASM = DWT->CYCCNT;

  uint32_t tam2 = 4096;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  int16_t vec[tam2], res[tam2];
 800082e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000830:	460b      	mov	r3, r1
 8000832:	3b01      	subs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
 8000836:	2300      	movs	r3, #0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	0103      	lsls	r3, r0, #4
 8000848:	6838      	ldr	r0, [r7, #0]
 800084a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800084e:	6838      	ldr	r0, [r7, #0]
 8000850:	0102      	lsls	r2, r0, #4
 8000852:	2300      	movs	r3, #0
 8000854:	468a      	mov	sl, r1
 8000856:	469b      	mov	fp, r3
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000864:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000868:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800086c:	004b      	lsls	r3, r1, #1
 800086e:	3307      	adds	r3, #7
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	ebad 0d03 	sub.w	sp, sp, r3
 8000878:	466b      	mov	r3, sp
 800087a:	3301      	adds	r3, #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000884:	460b      	mov	r3, r1
 8000886:	3b01      	subs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	2300      	movs	r3, #0
 800088c:	4688      	mov	r8, r1
 800088e:	4699      	mov	r9, r3
 8000890:	f04f 0200 	mov.w	r2, #0
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800089c:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80008a0:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80008a4:	2300      	movs	r3, #0
 80008a6:	460c      	mov	r4, r1
 80008a8:	461d      	mov	r5, r3
 80008aa:	f04f 0200 	mov.w	r2, #0
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	012b      	lsls	r3, r5, #4
 80008b4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80008b8:	0122      	lsls	r2, r4, #4
 80008ba:	004b      	lsls	r3, r1, #1
 80008bc:	3307      	adds	r3, #7
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	ebad 0d03 	sub.w	sp, sp, r3
 80008c6:	466b      	mov	r3, sp
 80008c8:	3301      	adds	r3, #1
 80008ca:	085b      	lsrs	r3, r3, #1
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
  generaVector(vec, tam2);
 80008d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008d2:	69f8      	ldr	r0, [r7, #28]
 80008d4:	f000 f9e6 	bl	8000ca4 <generaVector>
  DWT->CYCCNT = 0;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <main+0x12c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  generaEco(vec, res, tam2, 20);
 80008de:	2314      	movs	r3, #20
 80008e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e2:	6979      	ldr	r1, [r7, #20]
 80008e4:	69f8      	ldr	r0, [r7, #28]
 80008e6:	f000 f9fd 	bl	8000ce4 <generaEco>
  ciclos_C = DWT->CYCCNT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <main+0x12c>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	613b      	str	r3, [r7, #16]
  DWT->CYCCNT = 0;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <main+0x12c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  asm_generaEco(vec, res, tam2, 20);
 80008f6:	2314      	movs	r3, #20
 80008f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fa:	6979      	ldr	r1, [r7, #20]
 80008fc:	69f8      	ldr	r0, [r7, #28]
 80008fe:	f7ff fd1f 	bl	8000340 <asm_generaEco>
  ciclos_ASM = DWT->CYCCNT;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <main+0x12c>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	60fb      	str	r3, [r7, #12]
  DWT->CYCCNT = 0;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <main+0x12c>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  asm_generaEcoSIMD(vec, res, tam2, 20);
 800090e:	2314      	movs	r3, #20
 8000910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000912:	6979      	ldr	r1, [r7, #20]
 8000914:	69f8      	ldr	r0, [r7, #28]
 8000916:	f7ff fd3b 	bl	8000390 <asm_generaEcoSIMD>
  ciclos_SIMD = DWT->CYCCNT;
 800091a:	4b02      	ldr	r3, [pc, #8]	; (8000924 <main+0x12c>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	60bb      	str	r3, [r7, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x128>
 8000922:	bf00      	nop
 8000924:	e0001000 	.word	0xe0001000

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 ff1c 	bl	8003774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <SystemClock_Config+0xcc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xd0>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000988:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800099c:	23a8      	movs	r3, #168	; 0xa8
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a4:	2307      	movs	r3, #7
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fc5b 	bl	8002268 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b8:	f000 f9fc 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2105      	movs	r1, #5
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 febc 	bl	8002758 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009e6:	f000 f9e5 	bl	8000db4 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	; 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a02:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <MX_ETH_Init+0x88>)
 8000a04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a14:	22e1      	movs	r2, #225	; 0xe1
 8000a16:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a2c:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <MX_ETH_Init+0x8c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a36:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <MX_ETH_Init+0x90>)
 8000a3c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <MX_ETH_Init+0x94>)
 8000a42:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a46:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a4a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_ETH_Init+0x84>)
 8000a4e:	f000 fe01 	bl	8001654 <HAL_ETH_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a58:	f000 f9ac 	bl	8000db4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a5c:	2238      	movs	r2, #56	; 0x38
 8000a5e:	2100      	movs	r1, #0
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_ETH_Init+0x98>)
 8000a62:	f002 fe87 	bl	8003774 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_ETH_Init+0x98>)
 8000a68:	2221      	movs	r2, #33	; 0x21
 8000a6a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_ETH_Init+0x98>)
 8000a6e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a72:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_ETH_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000204 	.word	0x20000204
 8000a84:	40028000 	.word	0x40028000
 8000a88:	20000804 	.word	0x20000804
 8000a8c:	20000164 	.word	0x20000164
 8000a90:	200000c4 	.word	0x200000c4
 8000a94:	2000008c 	.word	0x2000008c

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART3_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	f002 f862 	bl	8002b98 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f96b 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002b4 	.word	0x200002b4
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000af6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	f001 fa7d 	bl	800202e <HAL_PCD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f93b 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200002f8 	.word	0x200002f8

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a4b      	ldr	r2, [pc, #300]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a44      	ldr	r2, [pc, #272]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a3d      	ldr	r2, [pc, #244]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c0c:	4822      	ldr	r0, [pc, #136]	; (8000c98 <MX_GPIO_Init+0x150>)
 8000c0e:	f001 f9f5 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2140      	movs	r1, #64	; 0x40
 8000c16:	4821      	ldr	r0, [pc, #132]	; (8000c9c <MX_GPIO_Init+0x154>)
 8000c18:	f001 f9f0 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <MX_GPIO_Init+0x158>)
 8000c34:	f001 f836 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c38:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_GPIO_Init+0x150>)
 8000c52:	f001 f827 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <MX_GPIO_Init+0x154>)
 8000c6e:	f001 f819 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_GPIO_Init+0x154>)
 8000c86:	f001 f80d 	bl	8001ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <generaVector>:
	}
}

/* Ej 10: función que crea un eco de la mitad de amplitud a partir de 20 mseg */
/* Función para crear el vector */
void generaVector(int16_t *vectorIn, uint32_t longitud){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	for(uint32_t i = longitud; i > 0; i --){
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e00e      	b.n	8000cd2 <generaVector+0x2e>
		vectorIn[i-1] = rand();
 8000cb4:	f002 fd66 	bl	8003784 <rand>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b20a      	sxth	r2, r1
 8000cca:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = longitud; i > 0; i --){
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1ed      	bne.n	8000cb4 <generaVector+0x10>
	}
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <generaEco>:
/* Función que genera eco a los msegRetardo mseg */
#define SAMPLE_FREQ	44100
#define LIM_SUP32	32767
#define LIM_INF32	-32768

void generaEco(int16_t *vectorIn, int16_t *vectorOut, uint32_t longitud, uint32_t msegRetardo){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b08b      	sub	sp, #44	; 0x2c
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
	uint32_t sampleEco = msegRetardo*SAMPLE_FREQ/1000;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <generaEco+0xc8>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	099b      	lsrs	r3, r3, #6
 8000d04:	617b      	str	r3, [r7, #20]
	uint32_t cont = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t sample;
	for(uint32_t i = 0; i < sampleEco; i ++){
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	e00d      	b.n	8000d2c <generaEco+0x48>
		vectorOut[i] = vectorIn[i];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	441a      	add	r2, r3
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	440b      	add	r3, r1
 8000d20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d24:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < sampleEco; i ++){
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3ed      	bcc.n	8000d10 <generaEco+0x2c>
	}
	for(uint32_t i = sampleEco; i < longitud; i ++){
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e02c      	b.n	8000d94 <generaEco+0xb0>
		sample = vectorIn[i] + (vectorIn[cont]/2);
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4413      	add	r3, r2
 8000d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d46:	4619      	mov	r1, r3
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d54:	0fda      	lsrs	r2, r3, #31
 8000d56:	4413      	add	r3, r2
 8000d58:	105b      	asrs	r3, r3, #1
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	440b      	add	r3, r1
 8000d5e:	623b      	str	r3, [r7, #32]
		if(sample > LIM_SUP32){
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d66:	db02      	blt.n	8000d6e <generaEco+0x8a>
			sample = LIM_SUP32;
 8000d68:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d6c:	623b      	str	r3, [r7, #32]
		}
		if(sample < LIM_INF32){
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000d74:	da01      	bge.n	8000d7a <generaEco+0x96>
			sample = LIM_INF32;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <generaEco+0xcc>)
 8000d78:	623b      	str	r3, [r7, #32]
		}
		vectorOut[i] = (int16_t)sample;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	4413      	add	r3, r2
 8000d82:	6a3a      	ldr	r2, [r7, #32]
 8000d84:	b212      	sxth	r2, r2
 8000d86:	801a      	strh	r2, [r3, #0]
		cont ++;
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint32_t i = sampleEco; i < longitud; i ++){
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	3301      	adds	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3ce      	bcc.n	8000d3a <generaEco+0x56>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	372c      	adds	r7, #44	; 0x2c
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	10624dd3 	.word	0x10624dd3
 8000db0:	ffff8000 	.word	0xffff8000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a55      	ldr	r2, [pc, #340]	; (8000f84 <HAL_ETH_MspInit+0x174>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	f040 80a4 	bne.w	8000f7c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
 8000e38:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a52      	ldr	r2, [pc, #328]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
 8000e44:	4b50      	ldr	r3, [pc, #320]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4c:	623b      	str	r3, [r7, #32]
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb4:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_ETH_MspInit+0x178>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ef8:	2332      	movs	r3, #50	; 0x32
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	481e      	ldr	r0, [pc, #120]	; (8000f8c <HAL_ETH_MspInit+0x17c>)
 8000f14:	f000 fec6 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f18:	2386      	movs	r3, #134	; 0x86
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f28:	230b      	movs	r3, #11
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4817      	ldr	r0, [pc, #92]	; (8000f90 <HAL_ETH_MspInit+0x180>)
 8000f34:	f000 feb6 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4a:	230b      	movs	r3, #11
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <HAL_ETH_MspInit+0x184>)
 8000f56:	f000 fea5 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6c:	230b      	movs	r3, #11
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <HAL_ETH_MspInit+0x188>)
 8000f78:	f000 fe94 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3738      	adds	r7, #56	; 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40028000 	.word	0x40028000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40021800 	.word	0x40021800

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_UART_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12c      	bne.n	8001018 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001008:	2307      	movs	r3, #7
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_UART_MspInit+0x8c>)
 8001014:	f000 fe46 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40004800 	.word	0x40004800
 8001024:	40023800 	.word	0x40023800
 8001028:	40020c00 	.word	0x40020c00

0800102c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800104c:	d13f      	bne.n	80010ce <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800106a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800107c:	230a      	movs	r3, #10
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4815      	ldr	r0, [pc, #84]	; (80010dc <HAL_PCD_MspInit+0xb0>)
 8001088:	f000 fe0c 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480e      	ldr	r0, [pc, #56]	; (80010dc <HAL_PCD_MspInit+0xb0>)
 80010a2:	f000 fdff 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 80010a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b0:	6353      	str	r3, [r2, #52]	; 0x34
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_PCD_MspInit+0xac>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001104:	f3ef 8314 	mrs	r3, CONTROL
 8001108:	607b      	str	r3, [r7, #4]
  return(result);
 800110a:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 800110c:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f383 8814 	msr	CONTROL, r3
}
 8001120:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f957 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}

08001156 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
	return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_kill>:

int _kill(int pid, int sig)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001170:	f002 fad6 	bl	8003720 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	2216      	movs	r2, #22
 8001178:	601a      	str	r2, [r3, #0]
	return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_exit>:

void _exit (int status)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800118e:	f04f 31ff 	mov.w	r1, #4294967295
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffe7 	bl	8001166 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001198:	e7fe      	b.n	8001198 <_exit+0x12>

0800119a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e00a      	b.n	80011c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ac:	f3af 8000 	nop.w
 80011b0:	4601      	mov	r1, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	60ba      	str	r2, [r7, #8]
 80011b8:	b2ca      	uxtb	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dbf0      	blt.n	80011ac <_read+0x12>
	}

return len;
 80011ca:	687b      	ldr	r3, [r7, #4]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e009      	b.n	80011fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	60ba      	str	r2, [r7, #8]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dbf1      	blt.n	80011e6 <_write+0x12>
	}
	return len;
 8001202:	687b      	ldr	r3, [r7, #4]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_close>:

int _close(int file)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001234:	605a      	str	r2, [r3, #4]
	return 0;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_isatty>:

int _isatty(int file)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
	return 0;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f002 fa3c 	bl	8003720 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20030000 	.word	0x20030000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	2000080c 	.word	0x2000080c
 80012dc:	20000828 	.word	0x20000828

080012e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001304:	bf00      	nop
  nop
 8001306:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001332:	f7ff ffd5 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f002 f9f9 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fa5d 	bl	80007f8 <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001340:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800134c:	0800497c 	.word	0x0800497c
  ldr r2, =_sbss
 8001350:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001354:	20000824 	.word	0x20000824

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_Init+0x40>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_Init+0x40>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_Init+0x40>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f931 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f808 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff fd16 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f93b 	bl	800163a <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f911 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	20000810 	.word	0x20000810

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000810 	.word	0x20000810

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff47 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff5c 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffb0 	bl	80015a8 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06c      	b.n	8001740 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800166c:	2b00      	cmp	r3, #0
 800166e:	d106      	bne.n	800167e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2223      	movs	r2, #35	; 0x23
 8001674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fbc9 	bl	8000e10 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_ETH_Init+0xf4>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a30      	ldr	r2, [pc, #192]	; (8001748 <HAL_ETH_Init+0xf4>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_ETH_Init+0xf4>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800169a:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_ETH_Init+0xf8>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a2b      	ldr	r2, [pc, #172]	; (800174c <HAL_ETH_Init+0xf8>)
 80016a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <HAL_ETH_Init+0xf8>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4927      	ldr	r1, [pc, #156]	; (800174c <HAL_ETH_Init+0xf8>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_ETH_Init+0xf8>)
 80016b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d0:	f7ff feaa 	bl	8001428 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016d6:	e011      	b.n	80016fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016d8:	f7ff fea6 	bl	8001428 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e6:	d909      	bls.n	80016fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2204      	movs	r2, #4
 80016ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	22e0      	movs	r2, #224	; 0xe0
 80016f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e021      	b.n	8001740 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1e4      	bne.n	80016d8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f958 	bl	80019c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f9ff 	bl	8001b18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fa55 	bl	8001bca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	461a      	mov	r2, r3
 8001726:	2100      	movs	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f9bd 	bl	8001aa8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2210      	movs	r2, #16
 800173a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800

08001750 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4b51      	ldr	r3, [pc, #324]	; (80018ac <ETH_SetMACConfig+0x15c>)
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	7c1b      	ldrb	r3, [r3, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <ETH_SetMACConfig+0x28>
 8001772:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001776:	e000      	b.n	800177a <ETH_SetMACConfig+0x2a>
 8001778:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	7c5b      	ldrb	r3, [r3, #17]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <ETH_SetMACConfig+0x38>
 8001782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001786:	e000      	b.n	800178a <ETH_SetMACConfig+0x3a>
 8001788:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800178a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001790:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	7fdb      	ldrb	r3, [r3, #31]
 8001796:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001798:	431a      	orrs	r2, r3
                        macconf->Speed |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800179e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	7f92      	ldrb	r2, [r2, #30]
 80017a4:	2a00      	cmp	r2, #0
 80017a6:	d102      	bne.n	80017ae <ETH_SetMACConfig+0x5e>
 80017a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ac:	e000      	b.n	80017b0 <ETH_SetMACConfig+0x60>
 80017ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80017b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	7f1b      	ldrb	r3, [r3, #28]
 80017b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80017c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d102      	bne.n	80017d8 <ETH_SetMACConfig+0x88>
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	e000      	b.n	80017da <ETH_SetMACConfig+0x8a>
 80017d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7bdb      	ldrb	r3, [r3, #15]
 80017e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017f2:	4313      	orrs	r3, r2
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff fe18 	bl	8001440 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001826:	4013      	ands	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001836:	2a00      	cmp	r2, #0
 8001838:	d101      	bne.n	800183e <ETH_SetMACConfig+0xee>
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	e000      	b.n	8001840 <ETH_SetMACConfig+0xf0>
 800183e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001840:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001846:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800184e:	2a01      	cmp	r2, #1
 8001850:	d101      	bne.n	8001856 <ETH_SetMACConfig+0x106>
 8001852:	2208      	movs	r2, #8
 8001854:	e000      	b.n	8001858 <ETH_SetMACConfig+0x108>
 8001856:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001858:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001860:	2a01      	cmp	r2, #1
 8001862:	d101      	bne.n	8001868 <ETH_SetMACConfig+0x118>
 8001864:	2204      	movs	r2, #4
 8001866:	e000      	b.n	800186a <ETH_SetMACConfig+0x11a>
 8001868:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800186a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001872:	2a01      	cmp	r2, #1
 8001874:	d101      	bne.n	800187a <ETH_SetMACConfig+0x12a>
 8001876:	2202      	movs	r2, #2
 8001878:	e000      	b.n	800187c <ETH_SetMACConfig+0x12c>
 800187a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800187c:	4313      	orrs	r3, r2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff fdd3 	bl	8001440 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	ff20810f 	.word	0xff20810f

080018b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <ETH_SetDMAConfig+0x110>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7b1b      	ldrb	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <ETH_SetDMAConfig+0x2c>
 80018d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018da:	e000      	b.n	80018de <ETH_SetDMAConfig+0x2e>
 80018dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	7b5b      	ldrb	r3, [r3, #13]
 80018e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	7f52      	ldrb	r2, [r2, #29]
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d102      	bne.n	80018f4 <ETH_SetDMAConfig+0x44>
 80018ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018f2:	e000      	b.n	80018f6 <ETH_SetDMAConfig+0x46>
 80018f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	7b9b      	ldrb	r3, [r3, #14]
 80018fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001904:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	7f1b      	ldrb	r3, [r3, #28]
 800190a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800190c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	7f9b      	ldrb	r3, [r3, #30]
 8001912:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001914:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800191a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001922:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001924:	4313      	orrs	r3, r2
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001946:	2001      	movs	r0, #1
 8001948:	f7ff fd7a 	bl	8001440 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	461a      	mov	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	791b      	ldrb	r3, [r3, #4]
 800195e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001964:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800196a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001970:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001978:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800197a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001982:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001988:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001996:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff fd4b 	bl	8001440 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	f8de3f23 	.word	0xf8de3f23

080019c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0a6      	sub	sp, #152	; 0x98
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80019d8:	2300      	movs	r3, #0
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a00:	2300      	movs	r3, #0
 8001a02:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fe86 	bl	8001750 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a44:	2301      	movs	r3, #1
 8001a46:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a78:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ff08 	bl	80018b0 <ETH_SetDMAConfig>
}
 8001aa0:	bf00      	nop
 8001aa2:	3798      	adds	r7, #152	; 0x98
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3305      	adds	r3, #5
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	3204      	adds	r2, #4
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <ETH_MACAddressConfig+0x68>)
 8001aca:	4413      	add	r3, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	061a      	lsls	r2, r3, #24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3302      	adds	r3, #2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	041b      	lsls	r3, r3, #16
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	4313      	orrs	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <ETH_MACAddressConfig+0x6c>)
 8001afa:	4413      	add	r3, r2
 8001afc:	461a      	mov	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40028040 	.word	0x40028040
 8001b14:	40028044 	.word	0x40028044

08001b18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e03e      	b.n	8001ba4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68d9      	ldr	r1, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	3206      	adds	r2, #6
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d80c      	bhi.n	8001b88 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	461a      	mov	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	e004      	b.n	8001b92 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d9bd      	bls.n	8001b26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	611a      	str	r2, [r3, #16]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e046      	b.n	8001c66 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6919      	ldr	r1, [r3, #16]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c1c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	3212      	adds	r2, #18
 8001c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d80c      	bhi.n	8001c56 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6919      	ldr	r1, [r3, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	e004      	b.n	8001c60 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d9b5      	bls.n	8001bd8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c96:	60da      	str	r2, [r3, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e177      	b.n	8001fb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8166 	bne.w	8001faa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d130      	bne.n	8001d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0201 	and.w	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d017      	beq.n	8001d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d123      	bne.n	8001de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80c0 	beq.w	8001faa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_GPIO_Init+0x324>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <HAL_GPIO_Init+0x324>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_GPIO_Init+0x324>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e46:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <HAL_GPIO_Init+0x328>)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_GPIO_Init+0x32c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d037      	beq.n	8001ee2 <HAL_GPIO_Init+0x23e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a57      	ldr	r2, [pc, #348]	; (8001fd4 <HAL_GPIO_Init+0x330>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d031      	beq.n	8001ede <HAL_GPIO_Init+0x23a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a56      	ldr	r2, [pc, #344]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d02b      	beq.n	8001eda <HAL_GPIO_Init+0x236>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a55      	ldr	r2, [pc, #340]	; (8001fdc <HAL_GPIO_Init+0x338>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x232>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a54      	ldr	r2, [pc, #336]	; (8001fe0 <HAL_GPIO_Init+0x33c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x22e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a53      	ldr	r2, [pc, #332]	; (8001fe4 <HAL_GPIO_Init+0x340>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x22a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_GPIO_Init+0x344>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x226>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a51      	ldr	r2, [pc, #324]	; (8001fec <HAL_GPIO_Init+0x348>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x222>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_GPIO_Init+0x34c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x21e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <HAL_GPIO_Init+0x350>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x21a>
 8001eba:	2309      	movs	r3, #9
 8001ebc:	e012      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	e010      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	e00e      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e00c      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e00a      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ece:	2305      	movs	r3, #5
 8001ed0:	e008      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e004      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x240>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	f002 0203 	and.w	r2, r2, #3
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	4093      	lsls	r3, r2
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef4:	4935      	ldr	r1, [pc, #212]	; (8001fcc <HAL_GPIO_Init+0x328>)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f26:	4a34      	ldr	r2, [pc, #208]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f2c:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f50:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_GPIO_Init+0x354>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	f67f ae84 	bls.w	8001cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	40020c00 	.word	0x40020c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40021400 	.word	0x40021400
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40021c00 	.word	0x40021c00
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40022400 	.word	0x40022400
 8001ff8:	40013c00 	.word	0x40013c00

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800202e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002030:	b08f      	sub	sp, #60	; 0x3c
 8002032:	af0a      	add	r7, sp, #40	; 0x28
 8002034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e10f      	b.n	8002260 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe ffe6 	bl	800102c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2203      	movs	r2, #3
 8002064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f001 f8ad 	bl	80031de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	687e      	ldr	r6, [r7, #4]
 800208c:	466d      	mov	r5, sp
 800208e:	f106 0410 	add.w	r4, r6, #16
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800209e:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a2:	1d33      	adds	r3, r6, #4
 80020a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a6:	6838      	ldr	r0, [r7, #0]
 80020a8:	f001 f838 	bl	800311c <USB_CoreInit>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0d0      	b.n	8002260 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 f89b 	bl	8003200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e04a      	b.n	8002166 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	333d      	adds	r3, #61	; 0x3d
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	333c      	adds	r3, #60	; 0x3c
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	b298      	uxth	r0, r3
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3344      	adds	r3, #68	; 0x44
 800210c:	4602      	mov	r2, r0
 800210e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	3340      	adds	r3, #64	; 0x40
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3348      	adds	r3, #72	; 0x48
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	334c      	adds	r3, #76	; 0x4c
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3354      	adds	r3, #84	; 0x54
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	3301      	adds	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d3af      	bcc.n	80020d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e044      	b.n	8002200 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	3301      	adds	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3b5      	bcc.n	8002176 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	687e      	ldr	r6, [r7, #4]
 8002212:	466d      	mov	r5, sp
 8002214:	f106 0410 	add.w	r4, r6, #16
 8002218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002224:	e885 0003 	stmia.w	r5, {r0, r1}
 8002228:	1d33      	adds	r3, r6, #4
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f001 f833 	bl	8003298 <USB_DevInit>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e00d      	b.n	8002260 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f001 f9fe 	bl	800365a <USB_DevDisconnect>

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e267      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d075      	beq.n	8002372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d00c      	beq.n	80022ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4b85      	ldr	r3, [pc, #532]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229a:	2b08      	cmp	r3, #8
 800229c:	d112      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b82      	ldr	r3, [pc, #520]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b7e      	ldr	r3, [pc, #504]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05b      	beq.n	8002370 <HAL_RCC_OscConfig+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d157      	bne.n	8002370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e242      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x74>
 80022ce:	4b76      	ldr	r3, [pc, #472]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a75      	ldr	r2, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x98>
 80022e6:	4b70      	ldr	r3, [pc, #448]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6f      	ldr	r2, [pc, #444]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6c      	ldr	r2, [pc, #432]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 8002300:	4b69      	ldr	r3, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a68      	ldr	r2, [pc, #416]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b66      	ldr	r3, [pc, #408]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a65      	ldr	r2, [pc, #404]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff f882 	bl	8001428 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff f87e 	bl	8001428 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e207      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xc0>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff f86e 	bl	8001428 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff f86a 	bl	8001428 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1f3      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b51      	ldr	r3, [pc, #324]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0xe8>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1c7      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4937      	ldr	r1, [pc, #220]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_RCC_OscConfig+0x244>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff f823 	bl	8001428 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff f81f 	bl	8001428 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1a8      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4925      	ldr	r1, [pc, #148]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_OscConfig+0x244>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f802 	bl	8001428 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002428:	f7fe fffe 	bl	8001428 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e187      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d036      	beq.n	80024c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_RCC_OscConfig+0x248>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe ffe2 	bl	8001428 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe ffde 	bl	8001428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e167      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_OscConfig+0x240>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x200>
 8002486:	e01b      	b.n	80024c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_OscConfig+0x248>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7fe ffcb 	bl	8001428 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	e00e      	b.n	80024b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002496:	f7fe ffc7 	bl	8001428 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d907      	bls.n	80024b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e150      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	42470000 	.word	0x42470000
 80024b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ea      	bne.n	8002496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8097 	beq.w	80025fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d2:	4b81      	ldr	r3, [pc, #516]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10f      	bne.n	80024fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	4b7d      	ldr	r3, [pc, #500]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a7c      	ldr	r2, [pc, #496]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b7a      	ldr	r3, [pc, #488]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	4b77      	ldr	r3, [pc, #476]	; (80026dc <HAL_RCC_OscConfig+0x474>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d118      	bne.n	800253c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250a:	4b74      	ldr	r3, [pc, #464]	; (80026dc <HAL_RCC_OscConfig+0x474>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a73      	ldr	r2, [pc, #460]	; (80026dc <HAL_RCC_OscConfig+0x474>)
 8002510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002516:	f7fe ff87 	bl	8001428 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251e:	f7fe ff83 	bl	8001428 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e10c      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x474>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x2ea>
 8002544:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a63      	ldr	r2, [pc, #396]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x324>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x30c>
 800255a:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a5e      	ldr	r2, [pc, #376]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a5b      	ldr	r2, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0x324>
 8002574:	4b58      	ldr	r3, [pc, #352]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	4a57      	ldr	r2, [pc, #348]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6713      	str	r3, [r2, #112]	; 0x70
 8002580:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a54      	ldr	r2, [pc, #336]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002586:	f023 0304 	bic.w	r3, r3, #4
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d015      	beq.n	80025c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe ff48 	bl	8001428 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe ff44 	bl	8001428 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0cb      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ee      	beq.n	800259c <HAL_RCC_OscConfig+0x334>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7fe ff32 	bl	8001428 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7fe ff2e 	bl	8001428 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0b5      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025de:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ee      	bne.n	80025c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	4a38      	ldr	r2, [pc, #224]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a1 	beq.w	8002748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b08      	cmp	r3, #8
 8002610:	d05c      	beq.n	80026cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d141      	bne.n	800269e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_RCC_OscConfig+0x478>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe ff02 	bl	8001428 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fefe 	bl	8001428 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e087      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	3b01      	subs	r3, #1
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	491b      	ldr	r1, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x478>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fed7 	bl	8001428 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fed3 	bl	8001428 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e05c      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x416>
 800269c:	e054      	b.n	8002748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_RCC_OscConfig+0x478>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fec0 	bl	8001428 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe febc 	bl	8001428 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e045      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_OscConfig+0x470>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x444>
 80026ca:	e03d      	b.n	8002748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e038      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000
 80026e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x4ec>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d028      	beq.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d121      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d11a      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800271a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800271c:	4293      	cmp	r3, r2
 800271e:	d111      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0cc      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b68      	ldr	r3, [pc, #416]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d90c      	bls.n	8002794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b63      	ldr	r3, [pc, #396]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0b8      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ac:	4b59      	ldr	r3, [pc, #356]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c4:	4b53      	ldr	r3, [pc, #332]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b50      	ldr	r3, [pc, #320]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	494d      	ldr	r1, [pc, #308]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d044      	beq.n	8002878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d119      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e07f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d003      	beq.n	8002816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002812:	2b03      	cmp	r3, #3
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e06f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e067      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4934      	ldr	r1, [pc, #208]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7fe fdee 	bl	8001428 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fe fdea 	bl	8001428 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e04f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d20c      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e032      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4916      	ldr	r1, [pc, #88]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	490e      	ldr	r1, [pc, #56]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028de:	f000 f821 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	490a      	ldr	r1, [pc, #40]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fd4e 	bl	80013a0 <HAL_InitTick>

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00
 8002914:	40023800 	.word	0x40023800
 8002918:	0800480c 	.word	0x0800480c
 800291c:	20000000 	.word	0x20000000
 8002920:	20000004 	.word	0x20000004

08002924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002928:	b094      	sub	sp, #80	; 0x50
 800292a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	647b      	str	r3, [r7, #68]	; 0x44
 8002930:	2300      	movs	r3, #0
 8002932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002934:	2300      	movs	r3, #0
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800293c:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d00d      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x40>
 8002948:	2b08      	cmp	r3, #8
 800294a:	f200 80e1 	bhi.w	8002b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x34>
 8002952:	2b04      	cmp	r3, #4
 8002954:	d003      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x3a>
 8002956:	e0db      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800295a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800295c:	e0db      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800295e:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002962:	e0d8      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002964:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800296e:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d063      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	2200      	movs	r2, #0
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
 8002984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
 800298e:	2300      	movs	r3, #0
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
 8002992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002996:	4622      	mov	r2, r4
 8002998:	462b      	mov	r3, r5
 800299a:	f04f 0000 	mov.w	r0, #0
 800299e:	f04f 0100 	mov.w	r1, #0
 80029a2:	0159      	lsls	r1, r3, #5
 80029a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a8:	0150      	lsls	r0, r2, #5
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4621      	mov	r1, r4
 80029b0:	1a51      	subs	r1, r2, r1
 80029b2:	6139      	str	r1, [r7, #16]
 80029b4:	4629      	mov	r1, r5
 80029b6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029c8:	4659      	mov	r1, fp
 80029ca:	018b      	lsls	r3, r1, #6
 80029cc:	4651      	mov	r1, sl
 80029ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029d2:	4651      	mov	r1, sl
 80029d4:	018a      	lsls	r2, r1, #6
 80029d6:	4651      	mov	r1, sl
 80029d8:	ebb2 0801 	subs.w	r8, r2, r1
 80029dc:	4659      	mov	r1, fp
 80029de:	eb63 0901 	sbc.w	r9, r3, r1
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029f6:	4690      	mov	r8, r2
 80029f8:	4699      	mov	r9, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	eb18 0303 	adds.w	r3, r8, r3
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	462b      	mov	r3, r5
 8002a04:	eb49 0303 	adc.w	r3, r9, r3
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a16:	4629      	mov	r1, r5
 8002a18:	024b      	lsls	r3, r1, #9
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a20:	4621      	mov	r1, r4
 8002a22:	024a      	lsls	r2, r1, #9
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a34:	f7fd fd2c 	bl	8000490 <__aeabi_uldivmod>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a40:	e058      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
 8002a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a5c:	4642      	mov	r2, r8
 8002a5e:	464b      	mov	r3, r9
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	0159      	lsls	r1, r3, #5
 8002a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6e:	0150      	lsls	r0, r2, #5
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4641      	mov	r1, r8
 8002a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a94:	ebb2 040a 	subs.w	r4, r2, sl
 8002a98:	eb63 050b 	sbc.w	r5, r3, fp
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	00eb      	lsls	r3, r5, #3
 8002aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aaa:	00e2      	lsls	r2, r4, #3
 8002aac:	4614      	mov	r4, r2
 8002aae:	461d      	mov	r5, r3
 8002ab0:	4643      	mov	r3, r8
 8002ab2:	18e3      	adds	r3, r4, r3
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	eb45 0303 	adc.w	r3, r5, r3
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aca:	4629      	mov	r1, r5
 8002acc:	028b      	lsls	r3, r1, #10
 8002ace:	4621      	mov	r1, r4
 8002ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	028a      	lsls	r2, r1, #10
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	61fa      	str	r2, [r7, #28]
 8002ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae8:	f7fd fcd2 	bl	8000490 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4613      	mov	r3, r2
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	3301      	adds	r3, #1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3750      	adds	r7, #80	; 0x50
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	00f42400 	.word	0x00f42400
 8002b2c:	007a1200 	.word	0x007a1200

08002b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000000 	.word	0x20000000

08002b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b4c:	f7ff fff0 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0a9b      	lsrs	r3, r3, #10
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4903      	ldr	r1, [pc, #12]	; (8002b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	0800481c 	.word	0x0800481c

08002b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b74:	f7ff ffdc 	bl	8002b30 <HAL_RCC_GetHCLKFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0b5b      	lsrs	r3, r3, #13
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4903      	ldr	r1, [pc, #12]	; (8002b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	0800481c 	.word	0x0800481c

08002b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e03f      	b.n	8002c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe f9ec 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f829 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b0c0      	sub	sp, #256	; 0x100
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	68d9      	ldr	r1, [r3, #12]
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	ea40 0301 	orr.w	r3, r0, r1
 8002c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c8c:	f021 010c 	bic.w	r1, r1, #12
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	6999      	ldr	r1, [r3, #24]
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	ea40 0301 	orr.w	r3, r0, r1
 8002cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <UART_SetConfig+0x2cc>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <UART_SetConfig+0xa0>
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b8d      	ldr	r3, [pc, #564]	; (8002f04 <UART_SetConfig+0x2d0>)
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d104      	bne.n	8002cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd4:	f7ff ff4c 	bl	8002b70 <HAL_RCC_GetPCLK2Freq>
 8002cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cdc:	e003      	b.n	8002ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cde:	f7ff ff33 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 8002ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf0:	f040 810c 	bne.w	8002f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d16:	4621      	mov	r1, r4
 8002d18:	eb12 0801 	adds.w	r8, r2, r1
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb43 0901 	adc.w	r9, r3, r1
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d36:	4690      	mov	r8, r2
 8002d38:	4699      	mov	r9, r3
 8002d3a:	4623      	mov	r3, r4
 8002d3c:	eb18 0303 	adds.w	r3, r8, r3
 8002d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d44:	462b      	mov	r3, r5
 8002d46:	eb49 0303 	adc.w	r3, r9, r3
 8002d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d62:	460b      	mov	r3, r1
 8002d64:	18db      	adds	r3, r3, r3
 8002d66:	653b      	str	r3, [r7, #80]	; 0x50
 8002d68:	4613      	mov	r3, r2
 8002d6a:	eb42 0303 	adc.w	r3, r2, r3
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d78:	f7fd fb8a 	bl	8000490 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002d82:	fba3 2302 	umull	r2, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	011c      	lsls	r4, r3, #4
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da4:	415b      	adcs	r3, r3
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dac:	4641      	mov	r1, r8
 8002dae:	eb12 0a01 	adds.w	sl, r2, r1
 8002db2:	4649      	mov	r1, r9
 8002db4:	eb43 0b01 	adc.w	fp, r3, r1
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dcc:	4692      	mov	sl, r2
 8002dce:	469b      	mov	fp, r3
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8002de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	18db      	adds	r3, r3, r3
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfe:	4613      	mov	r3, r2
 8002e00:	eb42 0303 	adc.w	r3, r2, r3
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
 8002e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e0e:	f7fd fb3f 	bl	8000490 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2264      	movs	r2, #100	; 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e30:	fba3 2302 	umull	r2, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e3c:	441c      	add	r4, r3
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6339      	str	r1, [r7, #48]	; 0x30
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e94:	464b      	mov	r3, r9
 8002e96:	460a      	mov	r2, r1
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	18db      	adds	r3, r3, r3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eba:	4613      	mov	r3, r2
 8002ebc:	eb42 0303 	adc.w	r3, r2, r3
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eca:	f7fd fae1 	bl	8000490 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	2164      	movs	r1, #100	; 0x64
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	3332      	adds	r3, #50	; 0x32
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4422      	add	r2, r4
 8002efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002efc:	e105      	b.n	800310a <UART_SetConfig+0x4d6>
 8002efe:	bf00      	nop
 8002f00:	40011000 	.word	0x40011000
 8002f04:	40011400 	.word	0x40011400
 8002f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	6239      	str	r1, [r7, #32]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1854      	adds	r4, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb43 0501 	adc.w	r5, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	00eb      	lsls	r3, r5, #3
 8002f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f46:	00e2      	lsls	r2, r4, #3
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f54:	464b      	mov	r3, r9
 8002f56:	eb45 0303 	adc.w	r3, r5, r3
 8002f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	008b      	lsls	r3, r1, #2
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f84:	4621      	mov	r1, r4
 8002f86:	008a      	lsls	r2, r1, #2
 8002f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f8c:	f7fd fa80 	bl	8000490 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b60      	ldr	r3, [pc, #384]	; (8003118 <UART_SetConfig+0x4e4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	61b9      	str	r1, [r7, #24]
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	1851      	adds	r1, r2, r1
 8002fc4:	6139      	str	r1, [r7, #16]
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	414b      	adcs	r3, r1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd8:	4659      	mov	r1, fp
 8002fda:	00cb      	lsls	r3, r1, #3
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	00ca      	lsls	r2, r1, #3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	4642      	mov	r2, r8
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	460a      	mov	r2, r1
 8002ff8:	eb42 0303 	adc.w	r3, r2, r3
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	67bb      	str	r3, [r7, #120]	; 0x78
 800300a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003018:	4649      	mov	r1, r9
 800301a:	008b      	lsls	r3, r1, #2
 800301c:	4641      	mov	r1, r8
 800301e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003022:	4641      	mov	r1, r8
 8003024:	008a      	lsls	r2, r1, #2
 8003026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800302a:	f7fd fa31 	bl	8000490 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <UART_SetConfig+0x4e4>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2164      	movs	r1, #100	; 0x64
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a34      	ldr	r2, [pc, #208]	; (8003118 <UART_SetConfig+0x4e4>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003052:	441c      	add	r4, r3
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	673b      	str	r3, [r7, #112]	; 0x70
 800305c:	677a      	str	r2, [r7, #116]	; 0x74
 800305e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003062:	4642      	mov	r2, r8
 8003064:	464b      	mov	r3, r9
 8003066:	1891      	adds	r1, r2, r2
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	415b      	adcs	r3, r3
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003072:	4641      	mov	r1, r8
 8003074:	1851      	adds	r1, r2, r1
 8003076:	6039      	str	r1, [r7, #0]
 8003078:	4649      	mov	r1, r9
 800307a:	414b      	adcs	r3, r1
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800308a:	4659      	mov	r1, fp
 800308c:	00cb      	lsls	r3, r1, #3
 800308e:	4651      	mov	r1, sl
 8003090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003094:	4651      	mov	r1, sl
 8003096:	00ca      	lsls	r2, r1, #3
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	4603      	mov	r3, r0
 800309e:	4642      	mov	r2, r8
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a4:	464b      	mov	r3, r9
 80030a6:	460a      	mov	r2, r1
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	663b      	str	r3, [r7, #96]	; 0x60
 80030b8:	667a      	str	r2, [r7, #100]	; 0x64
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030c6:	4649      	mov	r1, r9
 80030c8:	008b      	lsls	r3, r1, #2
 80030ca:	4641      	mov	r1, r8
 80030cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d0:	4641      	mov	r1, r8
 80030d2:	008a      	lsls	r2, r1, #2
 80030d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030d8:	f7fd f9da 	bl	8000490 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <UART_SetConfig+0x4e4>)
 80030e2:	fba3 1302 	umull	r1, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	3332      	adds	r3, #50	; 0x32
 80030f4:	4a08      	ldr	r2, [pc, #32]	; (8003118 <UART_SetConfig+0x4e4>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4422      	add	r2, r4
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	bf00      	nop
 800310c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800311c:	b084      	sub	sp, #16
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	f107 001c 	add.w	r0, r7, #28
 800312a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2b01      	cmp	r3, #1
 8003132:	d122      	bne.n	800317a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800315c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d105      	bne.n	800316e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 faa2 	bl	80036b8 <USB_CoreReset>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e01a      	b.n	80031b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa96 	bl	80036b8 <USB_CoreReset>
 800318c:	4603      	mov	r3, r0
 800318e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
 80031a2:	e005      	b.n	80031b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d10b      	bne.n	80031ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f043 0206 	orr.w	r2, r3, #6
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031da:	b004      	add	sp, #16
 80031dc:	4770      	bx	lr

080031de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0201 	bic.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d115      	bne.n	800324e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800322e:	2001      	movs	r0, #1
 8003230:	f7fe f906 	bl	8001440 <HAL_Delay>
      ms++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa2e 	bl	800369c <USB_GetMode>
 8003240:	4603      	mov	r3, r0
 8003242:	2b01      	cmp	r3, #1
 8003244:	d01e      	beq.n	8003284 <USB_SetCurrentMode+0x84>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b31      	cmp	r3, #49	; 0x31
 800324a:	d9f0      	bls.n	800322e <USB_SetCurrentMode+0x2e>
 800324c:	e01a      	b.n	8003284 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d115      	bne.n	8003280 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003260:	2001      	movs	r0, #1
 8003262:	f7fe f8ed 	bl	8001440 <HAL_Delay>
      ms++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3301      	adds	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fa15 	bl	800369c <USB_GetMode>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <USB_SetCurrentMode+0x84>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b31      	cmp	r3, #49	; 0x31
 800327c:	d9f0      	bls.n	8003260 <USB_SetCurrentMode+0x60>
 800327e:	e001      	b.n	8003284 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e005      	b.n	8003290 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b32      	cmp	r3, #50	; 0x32
 8003288:	d101      	bne.n	800328e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003298:	b084      	sub	sp, #16
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e009      	b.n	80032cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3340      	adds	r3, #64	; 0x40
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3301      	adds	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0e      	cmp	r3, #14
 80032d0:	d9f2      	bls.n	80032b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11c      	bne.n	8003312 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e6:	f043 0302 	orr.w	r3, r3, #2
 80032ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
 8003310:	e00b      	b.n	800332a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003330:	461a      	mov	r2, r3
 8003332:	2300      	movs	r3, #0
 8003334:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333c:	4619      	mov	r1, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003344:	461a      	mov	r2, r3
 8003346:	680b      	ldr	r3, [r1, #0]
 8003348:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10c      	bne.n	800336a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003356:	2100      	movs	r1, #0
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f965 	bl	8003628 <USB_SetDevSpeed>
 800335e:	e008      	b.n	8003372 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003360:	2101      	movs	r1, #1
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f960 	bl	8003628 <USB_SetDevSpeed>
 8003368:	e003      	b.n	8003372 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800336a:	2103      	movs	r1, #3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f95b 	bl	8003628 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003372:	2110      	movs	r1, #16
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f8f3 	bl	8003560 <USB_FlushTxFifo>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f91f 	bl	80035c8 <USB_FlushRxFifo>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	461a      	mov	r2, r3
 800339c:	2300      	movs	r3, #0
 800339e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a6:	461a      	mov	r2, r3
 80033a8:	2300      	movs	r3, #0
 80033aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e043      	b.n	8003446 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d4:	d118      	bne.n	8003408 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e8:	461a      	mov	r2, r3
 80033ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e013      	b.n	800341a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fe:	461a      	mov	r2, r3
 8003400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e008      	b.n	800341a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003414:	461a      	mov	r2, r3
 8003416:	2300      	movs	r3, #0
 8003418:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003438:	461a      	mov	r2, r3
 800343a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800343e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3301      	adds	r3, #1
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3b7      	bcc.n	80033be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e043      	b.n	80034dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346a:	d118      	bne.n	800349e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e013      	b.n	80034b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e008      	b.n	80034b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2300      	movs	r3, #0
 80034ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	2300      	movs	r3, #0
 80034c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	3301      	adds	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3b7      	bcc.n	8003454 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003504:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <USB_DevInit+0x2c4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f043 0208 	orr.w	r2, r3, #8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d107      	bne.n	800354c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003558:	b004      	add	sp, #16
 800355a:	4770      	bx	lr
 800355c:	803c3800 	.word	0x803c3800

08003560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <USB_FlushTxFifo+0x64>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e01b      	b.n	80035b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	daf2      	bge.n	800356e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	019b      	lsls	r3, r3, #6
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3301      	adds	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <USB_FlushTxFifo+0x64>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e006      	b.n	80035b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d0f0      	beq.n	8003598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	00030d40 	.word	0x00030d40

080035c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <USB_FlushRxFifo+0x5c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e018      	b.n	8003618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	daf2      	bge.n	80035d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2210      	movs	r2, #16
 80035f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a08      	ldr	r2, [pc, #32]	; (8003624 <USB_FlushRxFifo+0x5c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e006      	b.n	8003618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b10      	cmp	r3, #16
 8003614:	d0f0      	beq.n	80035f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	00030d40 	.word	0x00030d40

08003628 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003674:	f023 0303 	bic.w	r3, r3, #3
 8003678:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0301 	and.w	r3, r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <USB_CoreReset+0x64>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e01b      	b.n	800370e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	daf2      	bge.n	80036c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3301      	adds	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <USB_CoreReset+0x64>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e006      	b.n	800370e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d0f0      	beq.n	80036ee <USB_CoreReset+0x36>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	00030d40 	.word	0x00030d40

08003720 <__errno>:
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <__errno+0x8>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	2000000c 	.word	0x2000000c

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4d0d      	ldr	r5, [pc, #52]	; (8003764 <__libc_init_array+0x38>)
 8003730:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003732:	1b64      	subs	r4, r4, r5
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2600      	movs	r6, #0
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	4d0b      	ldr	r5, [pc, #44]	; (800376c <__libc_init_array+0x40>)
 800373e:	4c0c      	ldr	r4, [pc, #48]	; (8003770 <__libc_init_array+0x44>)
 8003740:	f001 f858 	bl	80047f4 <_init>
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	2600      	movs	r6, #0
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	08004974 	.word	0x08004974
 8003768:	08004974 	.word	0x08004974
 800376c:	08004974 	.word	0x08004974
 8003770:	08004978 	.word	0x08004978

08003774 <memset>:
 8003774:	4402      	add	r2, r0
 8003776:	4603      	mov	r3, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	f803 1b01 	strb.w	r1, [r3], #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <rand>:
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <rand+0x5c>)
 8003786:	b510      	push	{r4, lr}
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800378c:	b9b3      	cbnz	r3, 80037bc <rand+0x38>
 800378e:	2018      	movs	r0, #24
 8003790:	f000 f866 	bl	8003860 <malloc>
 8003794:	63a0      	str	r0, [r4, #56]	; 0x38
 8003796:	b928      	cbnz	r0, 80037a4 <rand+0x20>
 8003798:	4602      	mov	r2, r0
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <rand+0x60>)
 800379c:	4812      	ldr	r0, [pc, #72]	; (80037e8 <rand+0x64>)
 800379e:	214e      	movs	r1, #78	; 0x4e
 80037a0:	f000 f82e 	bl	8003800 <__assert_func>
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <rand+0x68>)
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <rand+0x6c>)
 80037a8:	e9c0 2300 	strd	r2, r3, [r0]
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <rand+0x70>)
 80037ae:	6083      	str	r3, [r0, #8]
 80037b0:	230b      	movs	r3, #11
 80037b2:	8183      	strh	r3, [r0, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	2300      	movs	r3, #0
 80037b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80037bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <rand+0x74>)
 80037c0:	6920      	ldr	r0, [r4, #16]
 80037c2:	6963      	ldr	r3, [r4, #20]
 80037c4:	490d      	ldr	r1, [pc, #52]	; (80037fc <rand+0x78>)
 80037c6:	4342      	muls	r2, r0
 80037c8:	fb01 2203 	mla	r2, r1, r3, r2
 80037cc:	fba0 0101 	umull	r0, r1, r0, r1
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	eb42 0001 	adc.w	r0, r2, r1
 80037d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80037da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80037de:	bd10      	pop	{r4, pc}
 80037e0:	2000000c 	.word	0x2000000c
 80037e4:	08004828 	.word	0x08004828
 80037e8:	0800483f 	.word	0x0800483f
 80037ec:	abcd330e 	.word	0xabcd330e
 80037f0:	e66d1234 	.word	0xe66d1234
 80037f4:	0005deec 	.word	0x0005deec
 80037f8:	5851f42d 	.word	0x5851f42d
 80037fc:	4c957f2d 	.word	0x4c957f2d

08003800 <__assert_func>:
 8003800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003802:	4614      	mov	r4, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <__assert_func+0x2c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4605      	mov	r5, r0
 800380c:	68d8      	ldr	r0, [r3, #12]
 800380e:	b14c      	cbz	r4, 8003824 <__assert_func+0x24>
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <__assert_func+0x30>)
 8003812:	9100      	str	r1, [sp, #0]
 8003814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003818:	4906      	ldr	r1, [pc, #24]	; (8003834 <__assert_func+0x34>)
 800381a:	462b      	mov	r3, r5
 800381c:	f000 f80e 	bl	800383c <fiprintf>
 8003820:	f000 fcc4 	bl	80041ac <abort>
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__assert_func+0x38>)
 8003826:	461c      	mov	r4, r3
 8003828:	e7f3      	b.n	8003812 <__assert_func+0x12>
 800382a:	bf00      	nop
 800382c:	2000000c 	.word	0x2000000c
 8003830:	0800489a 	.word	0x0800489a
 8003834:	080048a7 	.word	0x080048a7
 8003838:	080048d5 	.word	0x080048d5

0800383c <fiprintf>:
 800383c:	b40e      	push	{r1, r2, r3}
 800383e:	b503      	push	{r0, r1, lr}
 8003840:	4601      	mov	r1, r0
 8003842:	ab03      	add	r3, sp, #12
 8003844:	4805      	ldr	r0, [pc, #20]	; (800385c <fiprintf+0x20>)
 8003846:	f853 2b04 	ldr.w	r2, [r3], #4
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	f000 f919 	bl	8003a84 <_vfiprintf_r>
 8003852:	b002      	add	sp, #8
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b003      	add	sp, #12
 800385a:	4770      	bx	lr
 800385c:	2000000c 	.word	0x2000000c

08003860 <malloc>:
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <malloc+0xc>)
 8003862:	4601      	mov	r1, r0
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	f000 b86f 	b.w	8003948 <_malloc_r>
 800386a:	bf00      	nop
 800386c:	2000000c 	.word	0x2000000c

08003870 <_free_r>:
 8003870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003872:	2900      	cmp	r1, #0
 8003874:	d044      	beq.n	8003900 <_free_r+0x90>
 8003876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800387a:	9001      	str	r0, [sp, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f1a1 0404 	sub.w	r4, r1, #4
 8003882:	bfb8      	it	lt
 8003884:	18e4      	addlt	r4, r4, r3
 8003886:	f000 feb9 	bl	80045fc <__malloc_lock>
 800388a:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <_free_r+0x94>)
 800388c:	9801      	ldr	r0, [sp, #4]
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x30>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	b003      	add	sp, #12
 8003898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800389c:	f000 beb4 	b.w	8004608 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x46>
 80038a4:	6825      	ldr	r5, [r4, #0]
 80038a6:	1961      	adds	r1, r4, r5
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1949      	addeq	r1, r1, r5
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x22>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x50>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x46>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1855      	adds	r5, r2, r1
 80038c4:	42a5      	cmp	r5, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x70>
 80038c8:	6824      	ldr	r4, [r4, #0]
 80038ca:	4421      	add	r1, r4
 80038cc:	1854      	adds	r4, r2, r1
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x26>
 80038d4:	681c      	ldr	r4, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	6053      	str	r3, [r2, #4]
 80038da:	4421      	add	r1, r4
 80038dc:	6011      	str	r1, [r2, #0]
 80038de:	e7da      	b.n	8003896 <_free_r+0x26>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x78>
 80038e2:	230c      	movs	r3, #12
 80038e4:	6003      	str	r3, [r0, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x26>
 80038e8:	6825      	ldr	r5, [r4, #0]
 80038ea:	1961      	adds	r1, r4, r5
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf04      	itt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	bf04      	itt	eq
 80038f8:	1949      	addeq	r1, r1, r5
 80038fa:	6021      	streq	r1, [r4, #0]
 80038fc:	6054      	str	r4, [r2, #4]
 80038fe:	e7ca      	b.n	8003896 <_free_r+0x26>
 8003900:	b003      	add	sp, #12
 8003902:	bd30      	pop	{r4, r5, pc}
 8003904:	20000814 	.word	0x20000814

08003908 <sbrk_aligned>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4e0e      	ldr	r6, [pc, #56]	; (8003944 <sbrk_aligned+0x3c>)
 800390c:	460c      	mov	r4, r1
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	4605      	mov	r5, r0
 8003912:	b911      	cbnz	r1, 800391a <sbrk_aligned+0x12>
 8003914:	f000 fb7a 	bl	800400c <_sbrk_r>
 8003918:	6030      	str	r0, [r6, #0]
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f000 fb75 	bl	800400c <_sbrk_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d00a      	beq.n	800393c <sbrk_aligned+0x34>
 8003926:	1cc4      	adds	r4, r0, #3
 8003928:	f024 0403 	bic.w	r4, r4, #3
 800392c:	42a0      	cmp	r0, r4
 800392e:	d007      	beq.n	8003940 <sbrk_aligned+0x38>
 8003930:	1a21      	subs	r1, r4, r0
 8003932:	4628      	mov	r0, r5
 8003934:	f000 fb6a 	bl	800400c <_sbrk_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d101      	bne.n	8003940 <sbrk_aligned+0x38>
 800393c:	f04f 34ff 	mov.w	r4, #4294967295
 8003940:	4620      	mov	r0, r4
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	20000818 	.word	0x20000818

08003948 <_malloc_r>:
 8003948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394c:	1ccd      	adds	r5, r1, #3
 800394e:	f025 0503 	bic.w	r5, r5, #3
 8003952:	3508      	adds	r5, #8
 8003954:	2d0c      	cmp	r5, #12
 8003956:	bf38      	it	cc
 8003958:	250c      	movcc	r5, #12
 800395a:	2d00      	cmp	r5, #0
 800395c:	4607      	mov	r7, r0
 800395e:	db01      	blt.n	8003964 <_malloc_r+0x1c>
 8003960:	42a9      	cmp	r1, r5
 8003962:	d905      	bls.n	8003970 <_malloc_r+0x28>
 8003964:	230c      	movs	r3, #12
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	2600      	movs	r6, #0
 800396a:	4630      	mov	r0, r6
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003970:	4e2e      	ldr	r6, [pc, #184]	; (8003a2c <_malloc_r+0xe4>)
 8003972:	f000 fe43 	bl	80045fc <__malloc_lock>
 8003976:	6833      	ldr	r3, [r6, #0]
 8003978:	461c      	mov	r4, r3
 800397a:	bb34      	cbnz	r4, 80039ca <_malloc_r+0x82>
 800397c:	4629      	mov	r1, r5
 800397e:	4638      	mov	r0, r7
 8003980:	f7ff ffc2 	bl	8003908 <sbrk_aligned>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	4604      	mov	r4, r0
 8003988:	d14d      	bne.n	8003a26 <_malloc_r+0xde>
 800398a:	6834      	ldr	r4, [r6, #0]
 800398c:	4626      	mov	r6, r4
 800398e:	2e00      	cmp	r6, #0
 8003990:	d140      	bne.n	8003a14 <_malloc_r+0xcc>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	4631      	mov	r1, r6
 8003996:	4638      	mov	r0, r7
 8003998:	eb04 0803 	add.w	r8, r4, r3
 800399c:	f000 fb36 	bl	800400c <_sbrk_r>
 80039a0:	4580      	cmp	r8, r0
 80039a2:	d13a      	bne.n	8003a1a <_malloc_r+0xd2>
 80039a4:	6821      	ldr	r1, [r4, #0]
 80039a6:	3503      	adds	r5, #3
 80039a8:	1a6d      	subs	r5, r5, r1
 80039aa:	f025 0503 	bic.w	r5, r5, #3
 80039ae:	3508      	adds	r5, #8
 80039b0:	2d0c      	cmp	r5, #12
 80039b2:	bf38      	it	cc
 80039b4:	250c      	movcc	r5, #12
 80039b6:	4629      	mov	r1, r5
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7ff ffa5 	bl	8003908 <sbrk_aligned>
 80039be:	3001      	adds	r0, #1
 80039c0:	d02b      	beq.n	8003a1a <_malloc_r+0xd2>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	442b      	add	r3, r5
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	e00e      	b.n	80039e8 <_malloc_r+0xa0>
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	1b52      	subs	r2, r2, r5
 80039ce:	d41e      	bmi.n	8003a0e <_malloc_r+0xc6>
 80039d0:	2a0b      	cmp	r2, #11
 80039d2:	d916      	bls.n	8003a02 <_malloc_r+0xba>
 80039d4:	1961      	adds	r1, r4, r5
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	6025      	str	r5, [r4, #0]
 80039da:	bf18      	it	ne
 80039dc:	6059      	strne	r1, [r3, #4]
 80039de:	6863      	ldr	r3, [r4, #4]
 80039e0:	bf08      	it	eq
 80039e2:	6031      	streq	r1, [r6, #0]
 80039e4:	5162      	str	r2, [r4, r5]
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	4638      	mov	r0, r7
 80039ea:	f104 060b 	add.w	r6, r4, #11
 80039ee:	f000 fe0b 	bl	8004608 <__malloc_unlock>
 80039f2:	f026 0607 	bic.w	r6, r6, #7
 80039f6:	1d23      	adds	r3, r4, #4
 80039f8:	1af2      	subs	r2, r6, r3
 80039fa:	d0b6      	beq.n	800396a <_malloc_r+0x22>
 80039fc:	1b9b      	subs	r3, r3, r6
 80039fe:	50a3      	str	r3, [r4, r2]
 8003a00:	e7b3      	b.n	800396a <_malloc_r+0x22>
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	bf0c      	ite	eq
 8003a08:	6032      	streq	r2, [r6, #0]
 8003a0a:	605a      	strne	r2, [r3, #4]
 8003a0c:	e7ec      	b.n	80039e8 <_malloc_r+0xa0>
 8003a0e:	4623      	mov	r3, r4
 8003a10:	6864      	ldr	r4, [r4, #4]
 8003a12:	e7b2      	b.n	800397a <_malloc_r+0x32>
 8003a14:	4634      	mov	r4, r6
 8003a16:	6876      	ldr	r6, [r6, #4]
 8003a18:	e7b9      	b.n	800398e <_malloc_r+0x46>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4638      	mov	r0, r7
 8003a20:	f000 fdf2 	bl	8004608 <__malloc_unlock>
 8003a24:	e7a1      	b.n	800396a <_malloc_r+0x22>
 8003a26:	6025      	str	r5, [r4, #0]
 8003a28:	e7de      	b.n	80039e8 <_malloc_r+0xa0>
 8003a2a:	bf00      	nop
 8003a2c:	20000814 	.word	0x20000814

08003a30 <__sfputc_r>:
 8003a30:	6893      	ldr	r3, [r2, #8]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	b410      	push	{r4}
 8003a38:	6093      	str	r3, [r2, #8]
 8003a3a:	da08      	bge.n	8003a4e <__sfputc_r+0x1e>
 8003a3c:	6994      	ldr	r4, [r2, #24]
 8003a3e:	42a3      	cmp	r3, r4
 8003a40:	db01      	blt.n	8003a46 <__sfputc_r+0x16>
 8003a42:	290a      	cmp	r1, #10
 8003a44:	d103      	bne.n	8003a4e <__sfputc_r+0x1e>
 8003a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a4a:	f000 baef 	b.w	800402c <__swbuf_r>
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	1c58      	adds	r0, r3, #1
 8003a52:	6010      	str	r0, [r2, #0]
 8003a54:	7019      	strb	r1, [r3, #0]
 8003a56:	4608      	mov	r0, r1
 8003a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <__sfputs_r>:
 8003a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a60:	4606      	mov	r6, r0
 8003a62:	460f      	mov	r7, r1
 8003a64:	4614      	mov	r4, r2
 8003a66:	18d5      	adds	r5, r2, r3
 8003a68:	42ac      	cmp	r4, r5
 8003a6a:	d101      	bne.n	8003a70 <__sfputs_r+0x12>
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	e007      	b.n	8003a80 <__sfputs_r+0x22>
 8003a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a74:	463a      	mov	r2, r7
 8003a76:	4630      	mov	r0, r6
 8003a78:	f7ff ffda 	bl	8003a30 <__sfputc_r>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d1f3      	bne.n	8003a68 <__sfputs_r+0xa>
 8003a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a84 <_vfiprintf_r>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	460d      	mov	r5, r1
 8003a8a:	b09d      	sub	sp, #116	; 0x74
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	4698      	mov	r8, r3
 8003a90:	4606      	mov	r6, r0
 8003a92:	b118      	cbz	r0, 8003a9c <_vfiprintf_r+0x18>
 8003a94:	6983      	ldr	r3, [r0, #24]
 8003a96:	b90b      	cbnz	r3, 8003a9c <_vfiprintf_r+0x18>
 8003a98:	f000 fcaa 	bl	80043f0 <__sinit>
 8003a9c:	4b89      	ldr	r3, [pc, #548]	; (8003cc4 <_vfiprintf_r+0x240>)
 8003a9e:	429d      	cmp	r5, r3
 8003aa0:	d11b      	bne.n	8003ada <_vfiprintf_r+0x56>
 8003aa2:	6875      	ldr	r5, [r6, #4]
 8003aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aa6:	07d9      	lsls	r1, r3, #31
 8003aa8:	d405      	bmi.n	8003ab6 <_vfiprintf_r+0x32>
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	059a      	lsls	r2, r3, #22
 8003aae:	d402      	bmi.n	8003ab6 <_vfiprintf_r+0x32>
 8003ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ab2:	f000 fd3b 	bl	800452c <__retarget_lock_acquire_recursive>
 8003ab6:	89ab      	ldrh	r3, [r5, #12]
 8003ab8:	071b      	lsls	r3, r3, #28
 8003aba:	d501      	bpl.n	8003ac0 <_vfiprintf_r+0x3c>
 8003abc:	692b      	ldr	r3, [r5, #16]
 8003abe:	b9eb      	cbnz	r3, 8003afc <_vfiprintf_r+0x78>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 fb04 	bl	80040d0 <__swsetup_r>
 8003ac8:	b1c0      	cbz	r0, 8003afc <_vfiprintf_r+0x78>
 8003aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003acc:	07dc      	lsls	r4, r3, #31
 8003ace:	d50e      	bpl.n	8003aee <_vfiprintf_r+0x6a>
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	b01d      	add	sp, #116	; 0x74
 8003ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ada:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <_vfiprintf_r+0x244>)
 8003adc:	429d      	cmp	r5, r3
 8003ade:	d101      	bne.n	8003ae4 <_vfiprintf_r+0x60>
 8003ae0:	68b5      	ldr	r5, [r6, #8]
 8003ae2:	e7df      	b.n	8003aa4 <_vfiprintf_r+0x20>
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <_vfiprintf_r+0x248>)
 8003ae6:	429d      	cmp	r5, r3
 8003ae8:	bf08      	it	eq
 8003aea:	68f5      	ldreq	r5, [r6, #12]
 8003aec:	e7da      	b.n	8003aa4 <_vfiprintf_r+0x20>
 8003aee:	89ab      	ldrh	r3, [r5, #12]
 8003af0:	0598      	lsls	r0, r3, #22
 8003af2:	d4ed      	bmi.n	8003ad0 <_vfiprintf_r+0x4c>
 8003af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003af6:	f000 fd1a 	bl	800452e <__retarget_lock_release_recursive>
 8003afa:	e7e9      	b.n	8003ad0 <_vfiprintf_r+0x4c>
 8003afc:	2300      	movs	r3, #0
 8003afe:	9309      	str	r3, [sp, #36]	; 0x24
 8003b00:	2320      	movs	r3, #32
 8003b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b0a:	2330      	movs	r3, #48	; 0x30
 8003b0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003cd0 <_vfiprintf_r+0x24c>
 8003b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b14:	f04f 0901 	mov.w	r9, #1
 8003b18:	4623      	mov	r3, r4
 8003b1a:	469a      	mov	sl, r3
 8003b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b20:	b10a      	cbz	r2, 8003b26 <_vfiprintf_r+0xa2>
 8003b22:	2a25      	cmp	r2, #37	; 0x25
 8003b24:	d1f9      	bne.n	8003b1a <_vfiprintf_r+0x96>
 8003b26:	ebba 0b04 	subs.w	fp, sl, r4
 8003b2a:	d00b      	beq.n	8003b44 <_vfiprintf_r+0xc0>
 8003b2c:	465b      	mov	r3, fp
 8003b2e:	4622      	mov	r2, r4
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f7ff ff93 	bl	8003a5e <__sfputs_r>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	f000 80aa 	beq.w	8003c92 <_vfiprintf_r+0x20e>
 8003b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b40:	445a      	add	r2, fp
 8003b42:	9209      	str	r2, [sp, #36]	; 0x24
 8003b44:	f89a 3000 	ldrb.w	r3, [sl]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a2 	beq.w	8003c92 <_vfiprintf_r+0x20e>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b58:	f10a 0a01 	add.w	sl, sl, #1
 8003b5c:	9304      	str	r3, [sp, #16]
 8003b5e:	9307      	str	r3, [sp, #28]
 8003b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b64:	931a      	str	r3, [sp, #104]	; 0x68
 8003b66:	4654      	mov	r4, sl
 8003b68:	2205      	movs	r2, #5
 8003b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6e:	4858      	ldr	r0, [pc, #352]	; (8003cd0 <_vfiprintf_r+0x24c>)
 8003b70:	f7fc fc3e 	bl	80003f0 <memchr>
 8003b74:	9a04      	ldr	r2, [sp, #16]
 8003b76:	b9d8      	cbnz	r0, 8003bb0 <_vfiprintf_r+0x12c>
 8003b78:	06d1      	lsls	r1, r2, #27
 8003b7a:	bf44      	itt	mi
 8003b7c:	2320      	movmi	r3, #32
 8003b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b82:	0713      	lsls	r3, r2, #28
 8003b84:	bf44      	itt	mi
 8003b86:	232b      	movmi	r3, #43	; 0x2b
 8003b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b90:	2b2a      	cmp	r3, #42	; 0x2a
 8003b92:	d015      	beq.n	8003bc0 <_vfiprintf_r+0x13c>
 8003b94:	9a07      	ldr	r2, [sp, #28]
 8003b96:	4654      	mov	r4, sl
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f04f 0c0a 	mov.w	ip, #10
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba4:	3b30      	subs	r3, #48	; 0x30
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	d94e      	bls.n	8003c48 <_vfiprintf_r+0x1c4>
 8003baa:	b1b0      	cbz	r0, 8003bda <_vfiprintf_r+0x156>
 8003bac:	9207      	str	r2, [sp, #28]
 8003bae:	e014      	b.n	8003bda <_vfiprintf_r+0x156>
 8003bb0:	eba0 0308 	sub.w	r3, r0, r8
 8003bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	9304      	str	r3, [sp, #16]
 8003bbc:	46a2      	mov	sl, r4
 8003bbe:	e7d2      	b.n	8003b66 <_vfiprintf_r+0xe2>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	1d19      	adds	r1, r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	9103      	str	r1, [sp, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bfbb      	ittet	lt
 8003bcc:	425b      	neglt	r3, r3
 8003bce:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd2:	9307      	strge	r3, [sp, #28]
 8003bd4:	9307      	strlt	r3, [sp, #28]
 8003bd6:	bfb8      	it	lt
 8003bd8:	9204      	strlt	r2, [sp, #16]
 8003bda:	7823      	ldrb	r3, [r4, #0]
 8003bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003bde:	d10c      	bne.n	8003bfa <_vfiprintf_r+0x176>
 8003be0:	7863      	ldrb	r3, [r4, #1]
 8003be2:	2b2a      	cmp	r3, #42	; 0x2a
 8003be4:	d135      	bne.n	8003c52 <_vfiprintf_r+0x1ce>
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	1d1a      	adds	r2, r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	9203      	str	r2, [sp, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bfb8      	it	lt
 8003bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bf6:	3402      	adds	r4, #2
 8003bf8:	9305      	str	r3, [sp, #20]
 8003bfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ce0 <_vfiprintf_r+0x25c>
 8003bfe:	7821      	ldrb	r1, [r4, #0]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4650      	mov	r0, sl
 8003c04:	f7fc fbf4 	bl	80003f0 <memchr>
 8003c08:	b140      	cbz	r0, 8003c1c <_vfiprintf_r+0x198>
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	eba0 000a 	sub.w	r0, r0, sl
 8003c10:	fa03 f000 	lsl.w	r0, r3, r0
 8003c14:	9b04      	ldr	r3, [sp, #16]
 8003c16:	4303      	orrs	r3, r0
 8003c18:	3401      	adds	r4, #1
 8003c1a:	9304      	str	r3, [sp, #16]
 8003c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c20:	482c      	ldr	r0, [pc, #176]	; (8003cd4 <_vfiprintf_r+0x250>)
 8003c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c26:	2206      	movs	r2, #6
 8003c28:	f7fc fbe2 	bl	80003f0 <memchr>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d03f      	beq.n	8003cb0 <_vfiprintf_r+0x22c>
 8003c30:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <_vfiprintf_r+0x254>)
 8003c32:	bb1b      	cbnz	r3, 8003c7c <_vfiprintf_r+0x1f8>
 8003c34:	9b03      	ldr	r3, [sp, #12]
 8003c36:	3307      	adds	r3, #7
 8003c38:	f023 0307 	bic.w	r3, r3, #7
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	9303      	str	r3, [sp, #12]
 8003c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c42:	443b      	add	r3, r7
 8003c44:	9309      	str	r3, [sp, #36]	; 0x24
 8003c46:	e767      	b.n	8003b18 <_vfiprintf_r+0x94>
 8003c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	2001      	movs	r0, #1
 8003c50:	e7a5      	b.n	8003b9e <_vfiprintf_r+0x11a>
 8003c52:	2300      	movs	r3, #0
 8003c54:	3401      	adds	r4, #1
 8003c56:	9305      	str	r3, [sp, #20]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f04f 0c0a 	mov.w	ip, #10
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c64:	3a30      	subs	r2, #48	; 0x30
 8003c66:	2a09      	cmp	r2, #9
 8003c68:	d903      	bls.n	8003c72 <_vfiprintf_r+0x1ee>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0c5      	beq.n	8003bfa <_vfiprintf_r+0x176>
 8003c6e:	9105      	str	r1, [sp, #20]
 8003c70:	e7c3      	b.n	8003bfa <_vfiprintf_r+0x176>
 8003c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c76:	4604      	mov	r4, r0
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e7f0      	b.n	8003c5e <_vfiprintf_r+0x1da>
 8003c7c:	ab03      	add	r3, sp, #12
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	462a      	mov	r2, r5
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <_vfiprintf_r+0x258>)
 8003c84:	a904      	add	r1, sp, #16
 8003c86:	4630      	mov	r0, r6
 8003c88:	f3af 8000 	nop.w
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	1c78      	adds	r0, r7, #1
 8003c90:	d1d6      	bne.n	8003c40 <_vfiprintf_r+0x1bc>
 8003c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c94:	07d9      	lsls	r1, r3, #31
 8003c96:	d405      	bmi.n	8003ca4 <_vfiprintf_r+0x220>
 8003c98:	89ab      	ldrh	r3, [r5, #12]
 8003c9a:	059a      	lsls	r2, r3, #22
 8003c9c:	d402      	bmi.n	8003ca4 <_vfiprintf_r+0x220>
 8003c9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ca0:	f000 fc45 	bl	800452e <__retarget_lock_release_recursive>
 8003ca4:	89ab      	ldrh	r3, [r5, #12]
 8003ca6:	065b      	lsls	r3, r3, #25
 8003ca8:	f53f af12 	bmi.w	8003ad0 <_vfiprintf_r+0x4c>
 8003cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cae:	e711      	b.n	8003ad4 <_vfiprintf_r+0x50>
 8003cb0:	ab03      	add	r3, sp, #12
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	462a      	mov	r2, r5
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <_vfiprintf_r+0x258>)
 8003cb8:	a904      	add	r1, sp, #16
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 f880 	bl	8003dc0 <_printf_i>
 8003cc0:	e7e4      	b.n	8003c8c <_vfiprintf_r+0x208>
 8003cc2:	bf00      	nop
 8003cc4:	0800492c 	.word	0x0800492c
 8003cc8:	0800494c 	.word	0x0800494c
 8003ccc:	0800490c 	.word	0x0800490c
 8003cd0:	080048d6 	.word	0x080048d6
 8003cd4:	080048e0 	.word	0x080048e0
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	08003a5f 	.word	0x08003a5f
 8003ce0:	080048dc 	.word	0x080048dc

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4616      	mov	r6, r2
 8003cea:	4699      	mov	r9, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bfb8      	it	lt
 8003cf8:	4613      	movlt	r3, r2
 8003cfa:	6033      	str	r3, [r6, #0]
 8003cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d00:	4607      	mov	r7, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	b10a      	cbz	r2, 8003d0a <_printf_common+0x26>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0699      	lsls	r1, r3, #26
 8003d0e:	bf42      	ittt	mi
 8003d10:	6833      	ldrmi	r3, [r6, #0]
 8003d12:	3302      	addmi	r3, #2
 8003d14:	6033      	strmi	r3, [r6, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	f015 0506 	ands.w	r5, r5, #6
 8003d1c:	d106      	bne.n	8003d2c <_printf_common+0x48>
 8003d1e:	f104 0a19 	add.w	sl, r4, #25
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	6832      	ldr	r2, [r6, #0]
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	42ab      	cmp	r3, r5
 8003d2a:	dc26      	bgt.n	8003d7a <_printf_common+0x96>
 8003d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d30:	1e13      	subs	r3, r2, #0
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	bf18      	it	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	0692      	lsls	r2, r2, #26
 8003d3a:	d42b      	bmi.n	8003d94 <_printf_common+0xb0>
 8003d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d40:	4649      	mov	r1, r9
 8003d42:	4638      	mov	r0, r7
 8003d44:	47c0      	blx	r8
 8003d46:	3001      	adds	r0, #1
 8003d48:	d01e      	beq.n	8003d88 <_printf_common+0xa4>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	68e5      	ldr	r5, [r4, #12]
 8003d4e:	6832      	ldr	r2, [r6, #0]
 8003d50:	f003 0306 	and.w	r3, r3, #6
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	bf08      	it	eq
 8003d58:	1aad      	subeq	r5, r5, r2
 8003d5a:	68a3      	ldr	r3, [r4, #8]
 8003d5c:	6922      	ldr	r2, [r4, #16]
 8003d5e:	bf0c      	ite	eq
 8003d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d64:	2500      	movne	r5, #0
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bfc4      	itt	gt
 8003d6a:	1a9b      	subgt	r3, r3, r2
 8003d6c:	18ed      	addgt	r5, r5, r3
 8003d6e:	2600      	movs	r6, #0
 8003d70:	341a      	adds	r4, #26
 8003d72:	42b5      	cmp	r5, r6
 8003d74:	d11a      	bne.n	8003dac <_printf_common+0xc8>
 8003d76:	2000      	movs	r0, #0
 8003d78:	e008      	b.n	8003d8c <_printf_common+0xa8>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4652      	mov	r2, sl
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4638      	mov	r0, r7
 8003d82:	47c0      	blx	r8
 8003d84:	3001      	adds	r0, #1
 8003d86:	d103      	bne.n	8003d90 <_printf_common+0xac>
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d90:	3501      	adds	r5, #1
 8003d92:	e7c6      	b.n	8003d22 <_printf_common+0x3e>
 8003d94:	18e1      	adds	r1, r4, r3
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	2030      	movs	r0, #48	; 0x30
 8003d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d9e:	4422      	add	r2, r4
 8003da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da8:	3302      	adds	r3, #2
 8003daa:	e7c7      	b.n	8003d3c <_printf_common+0x58>
 8003dac:	2301      	movs	r3, #1
 8003dae:	4622      	mov	r2, r4
 8003db0:	4649      	mov	r1, r9
 8003db2:	4638      	mov	r0, r7
 8003db4:	47c0      	blx	r8
 8003db6:	3001      	adds	r0, #1
 8003db8:	d0e6      	beq.n	8003d88 <_printf_common+0xa4>
 8003dba:	3601      	adds	r6, #1
 8003dbc:	e7d9      	b.n	8003d72 <_printf_common+0x8e>
	...

08003dc0 <_printf_i>:
 8003dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	7e0f      	ldrb	r7, [r1, #24]
 8003dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dc8:	2f78      	cmp	r7, #120	; 0x78
 8003dca:	4691      	mov	r9, r2
 8003dcc:	4680      	mov	r8, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dd6:	d807      	bhi.n	8003de8 <_printf_i+0x28>
 8003dd8:	2f62      	cmp	r7, #98	; 0x62
 8003dda:	d80a      	bhi.n	8003df2 <_printf_i+0x32>
 8003ddc:	2f00      	cmp	r7, #0
 8003dde:	f000 80d8 	beq.w	8003f92 <_printf_i+0x1d2>
 8003de2:	2f58      	cmp	r7, #88	; 0x58
 8003de4:	f000 80a3 	beq.w	8003f2e <_printf_i+0x16e>
 8003de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003df0:	e03a      	b.n	8003e68 <_printf_i+0xa8>
 8003df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003df6:	2b15      	cmp	r3, #21
 8003df8:	d8f6      	bhi.n	8003de8 <_printf_i+0x28>
 8003dfa:	a101      	add	r1, pc, #4	; (adr r1, 8003e00 <_printf_i+0x40>)
 8003dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003e6d 	.word	0x08003e6d
 8003e08:	08003de9 	.word	0x08003de9
 8003e0c:	08003de9 	.word	0x08003de9
 8003e10:	08003de9 	.word	0x08003de9
 8003e14:	08003de9 	.word	0x08003de9
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003de9 	.word	0x08003de9
 8003e20:	08003de9 	.word	0x08003de9
 8003e24:	08003de9 	.word	0x08003de9
 8003e28:	08003de9 	.word	0x08003de9
 8003e2c:	08003f79 	.word	0x08003f79
 8003e30:	08003e9d 	.word	0x08003e9d
 8003e34:	08003f5b 	.word	0x08003f5b
 8003e38:	08003de9 	.word	0x08003de9
 8003e3c:	08003de9 	.word	0x08003de9
 8003e40:	08003f9b 	.word	0x08003f9b
 8003e44:	08003de9 	.word	0x08003de9
 8003e48:	08003e9d 	.word	0x08003e9d
 8003e4c:	08003de9 	.word	0x08003de9
 8003e50:	08003de9 	.word	0x08003de9
 8003e54:	08003f63 	.word	0x08003f63
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	602a      	str	r2, [r5, #0]
 8003e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0a3      	b.n	8003fb4 <_printf_i+0x1f4>
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	6829      	ldr	r1, [r5, #0]
 8003e70:	0606      	lsls	r6, r0, #24
 8003e72:	f101 0304 	add.w	r3, r1, #4
 8003e76:	d50a      	bpl.n	8003e8e <_printf_i+0xce>
 8003e78:	680e      	ldr	r6, [r1, #0]
 8003e7a:	602b      	str	r3, [r5, #0]
 8003e7c:	2e00      	cmp	r6, #0
 8003e7e:	da03      	bge.n	8003e88 <_printf_i+0xc8>
 8003e80:	232d      	movs	r3, #45	; 0x2d
 8003e82:	4276      	negs	r6, r6
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e88:	485e      	ldr	r0, [pc, #376]	; (8004004 <_printf_i+0x244>)
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	e019      	b.n	8003ec2 <_printf_i+0x102>
 8003e8e:	680e      	ldr	r6, [r1, #0]
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e96:	bf18      	it	ne
 8003e98:	b236      	sxthne	r6, r6
 8003e9a:	e7ef      	b.n	8003e7c <_printf_i+0xbc>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	1d19      	adds	r1, r3, #4
 8003ea2:	6029      	str	r1, [r5, #0]
 8003ea4:	0601      	lsls	r1, r0, #24
 8003ea6:	d501      	bpl.n	8003eac <_printf_i+0xec>
 8003ea8:	681e      	ldr	r6, [r3, #0]
 8003eaa:	e002      	b.n	8003eb2 <_printf_i+0xf2>
 8003eac:	0646      	lsls	r6, r0, #25
 8003eae:	d5fb      	bpl.n	8003ea8 <_printf_i+0xe8>
 8003eb0:	881e      	ldrh	r6, [r3, #0]
 8003eb2:	4854      	ldr	r0, [pc, #336]	; (8004004 <_printf_i+0x244>)
 8003eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2308      	moveq	r3, #8
 8003eba:	230a      	movne	r3, #10
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ec2:	6865      	ldr	r5, [r4, #4]
 8003ec4:	60a5      	str	r5, [r4, #8]
 8003ec6:	2d00      	cmp	r5, #0
 8003ec8:	bfa2      	ittt	ge
 8003eca:	6821      	ldrge	r1, [r4, #0]
 8003ecc:	f021 0104 	bicge.w	r1, r1, #4
 8003ed0:	6021      	strge	r1, [r4, #0]
 8003ed2:	b90e      	cbnz	r6, 8003ed8 <_printf_i+0x118>
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	d04d      	beq.n	8003f74 <_printf_i+0x1b4>
 8003ed8:	4615      	mov	r5, r2
 8003eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ede:	fb03 6711 	mls	r7, r3, r1, r6
 8003ee2:	5dc7      	ldrb	r7, [r0, r7]
 8003ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ee8:	4637      	mov	r7, r6
 8003eea:	42bb      	cmp	r3, r7
 8003eec:	460e      	mov	r6, r1
 8003eee:	d9f4      	bls.n	8003eda <_printf_i+0x11a>
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d10b      	bne.n	8003f0c <_printf_i+0x14c>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	07de      	lsls	r6, r3, #31
 8003ef8:	d508      	bpl.n	8003f0c <_printf_i+0x14c>
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	6861      	ldr	r1, [r4, #4]
 8003efe:	4299      	cmp	r1, r3
 8003f00:	bfde      	ittt	le
 8003f02:	2330      	movle	r3, #48	; 0x30
 8003f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f0c:	1b52      	subs	r2, r2, r5
 8003f0e:	6122      	str	r2, [r4, #16]
 8003f10:	f8cd a000 	str.w	sl, [sp]
 8003f14:	464b      	mov	r3, r9
 8003f16:	aa03      	add	r2, sp, #12
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f7ff fee2 	bl	8003ce4 <_printf_common>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d14c      	bne.n	8003fbe <_printf_i+0x1fe>
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	b004      	add	sp, #16
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	4835      	ldr	r0, [pc, #212]	; (8004004 <_printf_i+0x244>)
 8003f30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f34:	6829      	ldr	r1, [r5, #0]
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f3c:	6029      	str	r1, [r5, #0]
 8003f3e:	061d      	lsls	r5, r3, #24
 8003f40:	d514      	bpl.n	8003f6c <_printf_i+0x1ac>
 8003f42:	07df      	lsls	r7, r3, #31
 8003f44:	bf44      	itt	mi
 8003f46:	f043 0320 	orrmi.w	r3, r3, #32
 8003f4a:	6023      	strmi	r3, [r4, #0]
 8003f4c:	b91e      	cbnz	r6, 8003f56 <_printf_i+0x196>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f023 0320 	bic.w	r3, r3, #32
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	2310      	movs	r3, #16
 8003f58:	e7b0      	b.n	8003ebc <_printf_i+0xfc>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	2378      	movs	r3, #120	; 0x78
 8003f64:	4828      	ldr	r0, [pc, #160]	; (8004008 <_printf_i+0x248>)
 8003f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f6a:	e7e3      	b.n	8003f34 <_printf_i+0x174>
 8003f6c:	0659      	lsls	r1, r3, #25
 8003f6e:	bf48      	it	mi
 8003f70:	b2b6      	uxthmi	r6, r6
 8003f72:	e7e6      	b.n	8003f42 <_printf_i+0x182>
 8003f74:	4615      	mov	r5, r2
 8003f76:	e7bb      	b.n	8003ef0 <_printf_i+0x130>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	6826      	ldr	r6, [r4, #0]
 8003f7c:	6961      	ldr	r1, [r4, #20]
 8003f7e:	1d18      	adds	r0, r3, #4
 8003f80:	6028      	str	r0, [r5, #0]
 8003f82:	0635      	lsls	r5, r6, #24
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	d501      	bpl.n	8003f8c <_printf_i+0x1cc>
 8003f88:	6019      	str	r1, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <_printf_i+0x1d2>
 8003f8c:	0670      	lsls	r0, r6, #25
 8003f8e:	d5fb      	bpl.n	8003f88 <_printf_i+0x1c8>
 8003f90:	8019      	strh	r1, [r3, #0]
 8003f92:	2300      	movs	r3, #0
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	4615      	mov	r5, r2
 8003f98:	e7ba      	b.n	8003f10 <_printf_i+0x150>
 8003f9a:	682b      	ldr	r3, [r5, #0]
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	602a      	str	r2, [r5, #0]
 8003fa0:	681d      	ldr	r5, [r3, #0]
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f7fc fa22 	bl	80003f0 <memchr>
 8003fac:	b108      	cbz	r0, 8003fb2 <_printf_i+0x1f2>
 8003fae:	1b40      	subs	r0, r0, r5
 8003fb0:	6060      	str	r0, [r4, #4]
 8003fb2:	6863      	ldr	r3, [r4, #4]
 8003fb4:	6123      	str	r3, [r4, #16]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fbc:	e7a8      	b.n	8003f10 <_printf_i+0x150>
 8003fbe:	6923      	ldr	r3, [r4, #16]
 8003fc0:	462a      	mov	r2, r5
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	47d0      	blx	sl
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d0ab      	beq.n	8003f24 <_printf_i+0x164>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	079b      	lsls	r3, r3, #30
 8003fd0:	d413      	bmi.n	8003ffa <_printf_i+0x23a>
 8003fd2:	68e0      	ldr	r0, [r4, #12]
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	4298      	cmp	r0, r3
 8003fd8:	bfb8      	it	lt
 8003fda:	4618      	movlt	r0, r3
 8003fdc:	e7a4      	b.n	8003f28 <_printf_i+0x168>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	47d0      	blx	sl
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d09b      	beq.n	8003f24 <_printf_i+0x164>
 8003fec:	3501      	adds	r5, #1
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	9903      	ldr	r1, [sp, #12]
 8003ff2:	1a5b      	subs	r3, r3, r1
 8003ff4:	42ab      	cmp	r3, r5
 8003ff6:	dcf2      	bgt.n	8003fde <_printf_i+0x21e>
 8003ff8:	e7eb      	b.n	8003fd2 <_printf_i+0x212>
 8003ffa:	2500      	movs	r5, #0
 8003ffc:	f104 0619 	add.w	r6, r4, #25
 8004000:	e7f5      	b.n	8003fee <_printf_i+0x22e>
 8004002:	bf00      	nop
 8004004:	080048e7 	.word	0x080048e7
 8004008:	080048f8 	.word	0x080048f8

0800400c <_sbrk_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d06      	ldr	r5, [pc, #24]	; (8004028 <_sbrk_r+0x1c>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fd f92c 	bl	8001274 <_sbrk>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_sbrk_r+0x1a>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_sbrk_r+0x1a>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000820 	.word	0x20000820

0800402c <__swbuf_r>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	460e      	mov	r6, r1
 8004030:	4614      	mov	r4, r2
 8004032:	4605      	mov	r5, r0
 8004034:	b118      	cbz	r0, 800403e <__swbuf_r+0x12>
 8004036:	6983      	ldr	r3, [r0, #24]
 8004038:	b90b      	cbnz	r3, 800403e <__swbuf_r+0x12>
 800403a:	f000 f9d9 	bl	80043f0 <__sinit>
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <__swbuf_r+0x98>)
 8004040:	429c      	cmp	r4, r3
 8004042:	d12b      	bne.n	800409c <__swbuf_r+0x70>
 8004044:	686c      	ldr	r4, [r5, #4]
 8004046:	69a3      	ldr	r3, [r4, #24]
 8004048:	60a3      	str	r3, [r4, #8]
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	071a      	lsls	r2, r3, #28
 800404e:	d52f      	bpl.n	80040b0 <__swbuf_r+0x84>
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	b36b      	cbz	r3, 80040b0 <__swbuf_r+0x84>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	1ac0      	subs	r0, r0, r3
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	b2f6      	uxtb	r6, r6
 800405e:	4283      	cmp	r3, r0
 8004060:	4637      	mov	r7, r6
 8004062:	dc04      	bgt.n	800406e <__swbuf_r+0x42>
 8004064:	4621      	mov	r1, r4
 8004066:	4628      	mov	r0, r5
 8004068:	f000 f92e 	bl	80042c8 <_fflush_r>
 800406c:	bb30      	cbnz	r0, 80040bc <__swbuf_r+0x90>
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	3b01      	subs	r3, #1
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	701e      	strb	r6, [r3, #0]
 800407c:	6963      	ldr	r3, [r4, #20]
 800407e:	3001      	adds	r0, #1
 8004080:	4283      	cmp	r3, r0
 8004082:	d004      	beq.n	800408e <__swbuf_r+0x62>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	07db      	lsls	r3, r3, #31
 8004088:	d506      	bpl.n	8004098 <__swbuf_r+0x6c>
 800408a:	2e0a      	cmp	r6, #10
 800408c:	d104      	bne.n	8004098 <__swbuf_r+0x6c>
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f919 	bl	80042c8 <_fflush_r>
 8004096:	b988      	cbnz	r0, 80040bc <__swbuf_r+0x90>
 8004098:	4638      	mov	r0, r7
 800409a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <__swbuf_r+0x9c>)
 800409e:	429c      	cmp	r4, r3
 80040a0:	d101      	bne.n	80040a6 <__swbuf_r+0x7a>
 80040a2:	68ac      	ldr	r4, [r5, #8]
 80040a4:	e7cf      	b.n	8004046 <__swbuf_r+0x1a>
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <__swbuf_r+0xa0>)
 80040a8:	429c      	cmp	r4, r3
 80040aa:	bf08      	it	eq
 80040ac:	68ec      	ldreq	r4, [r5, #12]
 80040ae:	e7ca      	b.n	8004046 <__swbuf_r+0x1a>
 80040b0:	4621      	mov	r1, r4
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 f80c 	bl	80040d0 <__swsetup_r>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d0cb      	beq.n	8004054 <__swbuf_r+0x28>
 80040bc:	f04f 37ff 	mov.w	r7, #4294967295
 80040c0:	e7ea      	b.n	8004098 <__swbuf_r+0x6c>
 80040c2:	bf00      	nop
 80040c4:	0800492c 	.word	0x0800492c
 80040c8:	0800494c 	.word	0x0800494c
 80040cc:	0800490c 	.word	0x0800490c

080040d0 <__swsetup_r>:
 80040d0:	4b32      	ldr	r3, [pc, #200]	; (800419c <__swsetup_r+0xcc>)
 80040d2:	b570      	push	{r4, r5, r6, lr}
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	4606      	mov	r6, r0
 80040d8:	460c      	mov	r4, r1
 80040da:	b125      	cbz	r5, 80040e6 <__swsetup_r+0x16>
 80040dc:	69ab      	ldr	r3, [r5, #24]
 80040de:	b913      	cbnz	r3, 80040e6 <__swsetup_r+0x16>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f985 	bl	80043f0 <__sinit>
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <__swsetup_r+0xd0>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d10f      	bne.n	800410c <__swsetup_r+0x3c>
 80040ec:	686c      	ldr	r4, [r5, #4]
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040f4:	0719      	lsls	r1, r3, #28
 80040f6:	d42c      	bmi.n	8004152 <__swsetup_r+0x82>
 80040f8:	06dd      	lsls	r5, r3, #27
 80040fa:	d411      	bmi.n	8004120 <__swsetup_r+0x50>
 80040fc:	2309      	movs	r3, #9
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	f04f 30ff 	mov.w	r0, #4294967295
 800410a:	e03e      	b.n	800418a <__swsetup_r+0xba>
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <__swsetup_r+0xd4>)
 800410e:	429c      	cmp	r4, r3
 8004110:	d101      	bne.n	8004116 <__swsetup_r+0x46>
 8004112:	68ac      	ldr	r4, [r5, #8]
 8004114:	e7eb      	b.n	80040ee <__swsetup_r+0x1e>
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <__swsetup_r+0xd8>)
 8004118:	429c      	cmp	r4, r3
 800411a:	bf08      	it	eq
 800411c:	68ec      	ldreq	r4, [r5, #12]
 800411e:	e7e6      	b.n	80040ee <__swsetup_r+0x1e>
 8004120:	0758      	lsls	r0, r3, #29
 8004122:	d512      	bpl.n	800414a <__swsetup_r+0x7a>
 8004124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004126:	b141      	cbz	r1, 800413a <__swsetup_r+0x6a>
 8004128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800412c:	4299      	cmp	r1, r3
 800412e:	d002      	beq.n	8004136 <__swsetup_r+0x66>
 8004130:	4630      	mov	r0, r6
 8004132:	f7ff fb9d 	bl	8003870 <_free_r>
 8004136:	2300      	movs	r3, #0
 8004138:	6363      	str	r3, [r4, #52]	; 0x34
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	2300      	movs	r3, #0
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	f043 0308 	orr.w	r3, r3, #8
 8004150:	81a3      	strh	r3, [r4, #12]
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	b94b      	cbnz	r3, 800416a <__swsetup_r+0x9a>
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d003      	beq.n	800416a <__swsetup_r+0x9a>
 8004162:	4621      	mov	r1, r4
 8004164:	4630      	mov	r0, r6
 8004166:	f000 fa09 	bl	800457c <__smakebuf_r>
 800416a:	89a0      	ldrh	r0, [r4, #12]
 800416c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004170:	f010 0301 	ands.w	r3, r0, #1
 8004174:	d00a      	beq.n	800418c <__swsetup_r+0xbc>
 8004176:	2300      	movs	r3, #0
 8004178:	60a3      	str	r3, [r4, #8]
 800417a:	6963      	ldr	r3, [r4, #20]
 800417c:	425b      	negs	r3, r3
 800417e:	61a3      	str	r3, [r4, #24]
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	b943      	cbnz	r3, 8004196 <__swsetup_r+0xc6>
 8004184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004188:	d1ba      	bne.n	8004100 <__swsetup_r+0x30>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	0781      	lsls	r1, r0, #30
 800418e:	bf58      	it	pl
 8004190:	6963      	ldrpl	r3, [r4, #20]
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	e7f4      	b.n	8004180 <__swsetup_r+0xb0>
 8004196:	2000      	movs	r0, #0
 8004198:	e7f7      	b.n	800418a <__swsetup_r+0xba>
 800419a:	bf00      	nop
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	0800492c 	.word	0x0800492c
 80041a4:	0800494c 	.word	0x0800494c
 80041a8:	0800490c 	.word	0x0800490c

080041ac <abort>:
 80041ac:	b508      	push	{r3, lr}
 80041ae:	2006      	movs	r0, #6
 80041b0:	f000 fa58 	bl	8004664 <raise>
 80041b4:	2001      	movs	r0, #1
 80041b6:	f7fc ffe6 	bl	8001186 <_exit>
	...

080041bc <__sflush_r>:
 80041bc:	898a      	ldrh	r2, [r1, #12]
 80041be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	4605      	mov	r5, r0
 80041c4:	0710      	lsls	r0, r2, #28
 80041c6:	460c      	mov	r4, r1
 80041c8:	d458      	bmi.n	800427c <__sflush_r+0xc0>
 80041ca:	684b      	ldr	r3, [r1, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	dc05      	bgt.n	80041dc <__sflush_r+0x20>
 80041d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dc02      	bgt.n	80041dc <__sflush_r+0x20>
 80041d6:	2000      	movs	r0, #0
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041de:	2e00      	cmp	r6, #0
 80041e0:	d0f9      	beq.n	80041d6 <__sflush_r+0x1a>
 80041e2:	2300      	movs	r3, #0
 80041e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041e8:	682f      	ldr	r7, [r5, #0]
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	d032      	beq.n	8004254 <__sflush_r+0x98>
 80041ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	075a      	lsls	r2, r3, #29
 80041f4:	d505      	bpl.n	8004202 <__sflush_r+0x46>
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	1ac0      	subs	r0, r0, r3
 80041fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041fc:	b10b      	cbz	r3, 8004202 <__sflush_r+0x46>
 80041fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004200:	1ac0      	subs	r0, r0, r3
 8004202:	2300      	movs	r3, #0
 8004204:	4602      	mov	r2, r0
 8004206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	4628      	mov	r0, r5
 800420c:	47b0      	blx	r6
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	d106      	bne.n	8004222 <__sflush_r+0x66>
 8004214:	6829      	ldr	r1, [r5, #0]
 8004216:	291d      	cmp	r1, #29
 8004218:	d82c      	bhi.n	8004274 <__sflush_r+0xb8>
 800421a:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <__sflush_r+0x108>)
 800421c:	40ca      	lsrs	r2, r1
 800421e:	07d6      	lsls	r6, r2, #31
 8004220:	d528      	bpl.n	8004274 <__sflush_r+0xb8>
 8004222:	2200      	movs	r2, #0
 8004224:	6062      	str	r2, [r4, #4]
 8004226:	04d9      	lsls	r1, r3, #19
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	d504      	bpl.n	8004238 <__sflush_r+0x7c>
 800422e:	1c42      	adds	r2, r0, #1
 8004230:	d101      	bne.n	8004236 <__sflush_r+0x7a>
 8004232:	682b      	ldr	r3, [r5, #0]
 8004234:	b903      	cbnz	r3, 8004238 <__sflush_r+0x7c>
 8004236:	6560      	str	r0, [r4, #84]	; 0x54
 8004238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800423a:	602f      	str	r7, [r5, #0]
 800423c:	2900      	cmp	r1, #0
 800423e:	d0ca      	beq.n	80041d6 <__sflush_r+0x1a>
 8004240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004244:	4299      	cmp	r1, r3
 8004246:	d002      	beq.n	800424e <__sflush_r+0x92>
 8004248:	4628      	mov	r0, r5
 800424a:	f7ff fb11 	bl	8003870 <_free_r>
 800424e:	2000      	movs	r0, #0
 8004250:	6360      	str	r0, [r4, #52]	; 0x34
 8004252:	e7c1      	b.n	80041d8 <__sflush_r+0x1c>
 8004254:	6a21      	ldr	r1, [r4, #32]
 8004256:	2301      	movs	r3, #1
 8004258:	4628      	mov	r0, r5
 800425a:	47b0      	blx	r6
 800425c:	1c41      	adds	r1, r0, #1
 800425e:	d1c7      	bne.n	80041f0 <__sflush_r+0x34>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0c4      	beq.n	80041f0 <__sflush_r+0x34>
 8004266:	2b1d      	cmp	r3, #29
 8004268:	d001      	beq.n	800426e <__sflush_r+0xb2>
 800426a:	2b16      	cmp	r3, #22
 800426c:	d101      	bne.n	8004272 <__sflush_r+0xb6>
 800426e:	602f      	str	r7, [r5, #0]
 8004270:	e7b1      	b.n	80041d6 <__sflush_r+0x1a>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	e7ad      	b.n	80041d8 <__sflush_r+0x1c>
 800427c:	690f      	ldr	r7, [r1, #16]
 800427e:	2f00      	cmp	r7, #0
 8004280:	d0a9      	beq.n	80041d6 <__sflush_r+0x1a>
 8004282:	0793      	lsls	r3, r2, #30
 8004284:	680e      	ldr	r6, [r1, #0]
 8004286:	bf08      	it	eq
 8004288:	694b      	ldreq	r3, [r1, #20]
 800428a:	600f      	str	r7, [r1, #0]
 800428c:	bf18      	it	ne
 800428e:	2300      	movne	r3, #0
 8004290:	eba6 0807 	sub.w	r8, r6, r7
 8004294:	608b      	str	r3, [r1, #8]
 8004296:	f1b8 0f00 	cmp.w	r8, #0
 800429a:	dd9c      	ble.n	80041d6 <__sflush_r+0x1a>
 800429c:	6a21      	ldr	r1, [r4, #32]
 800429e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042a0:	4643      	mov	r3, r8
 80042a2:	463a      	mov	r2, r7
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b0      	blx	r6
 80042a8:	2800      	cmp	r0, #0
 80042aa:	dc06      	bgt.n	80042ba <__sflush_r+0xfe>
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	e78e      	b.n	80041d8 <__sflush_r+0x1c>
 80042ba:	4407      	add	r7, r0
 80042bc:	eba8 0800 	sub.w	r8, r8, r0
 80042c0:	e7e9      	b.n	8004296 <__sflush_r+0xda>
 80042c2:	bf00      	nop
 80042c4:	20400001 	.word	0x20400001

080042c8 <_fflush_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	690b      	ldr	r3, [r1, #16]
 80042cc:	4605      	mov	r5, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	b913      	cbnz	r3, 80042d8 <_fflush_r+0x10>
 80042d2:	2500      	movs	r5, #0
 80042d4:	4628      	mov	r0, r5
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	b118      	cbz	r0, 80042e2 <_fflush_r+0x1a>
 80042da:	6983      	ldr	r3, [r0, #24]
 80042dc:	b90b      	cbnz	r3, 80042e2 <_fflush_r+0x1a>
 80042de:	f000 f887 	bl	80043f0 <__sinit>
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <_fflush_r+0x6c>)
 80042e4:	429c      	cmp	r4, r3
 80042e6:	d11b      	bne.n	8004320 <_fflush_r+0x58>
 80042e8:	686c      	ldr	r4, [r5, #4]
 80042ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0ef      	beq.n	80042d2 <_fflush_r+0xa>
 80042f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042f4:	07d0      	lsls	r0, r2, #31
 80042f6:	d404      	bmi.n	8004302 <_fflush_r+0x3a>
 80042f8:	0599      	lsls	r1, r3, #22
 80042fa:	d402      	bmi.n	8004302 <_fflush_r+0x3a>
 80042fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042fe:	f000 f915 	bl	800452c <__retarget_lock_acquire_recursive>
 8004302:	4628      	mov	r0, r5
 8004304:	4621      	mov	r1, r4
 8004306:	f7ff ff59 	bl	80041bc <__sflush_r>
 800430a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800430c:	07da      	lsls	r2, r3, #31
 800430e:	4605      	mov	r5, r0
 8004310:	d4e0      	bmi.n	80042d4 <_fflush_r+0xc>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	059b      	lsls	r3, r3, #22
 8004316:	d4dd      	bmi.n	80042d4 <_fflush_r+0xc>
 8004318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800431a:	f000 f908 	bl	800452e <__retarget_lock_release_recursive>
 800431e:	e7d9      	b.n	80042d4 <_fflush_r+0xc>
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <_fflush_r+0x70>)
 8004322:	429c      	cmp	r4, r3
 8004324:	d101      	bne.n	800432a <_fflush_r+0x62>
 8004326:	68ac      	ldr	r4, [r5, #8]
 8004328:	e7df      	b.n	80042ea <_fflush_r+0x22>
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <_fflush_r+0x74>)
 800432c:	429c      	cmp	r4, r3
 800432e:	bf08      	it	eq
 8004330:	68ec      	ldreq	r4, [r5, #12]
 8004332:	e7da      	b.n	80042ea <_fflush_r+0x22>
 8004334:	0800492c 	.word	0x0800492c
 8004338:	0800494c 	.word	0x0800494c
 800433c:	0800490c 	.word	0x0800490c

08004340 <std>:
 8004340:	2300      	movs	r3, #0
 8004342:	b510      	push	{r4, lr}
 8004344:	4604      	mov	r4, r0
 8004346:	e9c0 3300 	strd	r3, r3, [r0]
 800434a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800434e:	6083      	str	r3, [r0, #8]
 8004350:	8181      	strh	r1, [r0, #12]
 8004352:	6643      	str	r3, [r0, #100]	; 0x64
 8004354:	81c2      	strh	r2, [r0, #14]
 8004356:	6183      	str	r3, [r0, #24]
 8004358:	4619      	mov	r1, r3
 800435a:	2208      	movs	r2, #8
 800435c:	305c      	adds	r0, #92	; 0x5c
 800435e:	f7ff fa09 	bl	8003774 <memset>
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <std+0x38>)
 8004364:	6263      	str	r3, [r4, #36]	; 0x24
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <std+0x3c>)
 8004368:	62a3      	str	r3, [r4, #40]	; 0x28
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <std+0x40>)
 800436c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <std+0x44>)
 8004370:	6224      	str	r4, [r4, #32]
 8004372:	6323      	str	r3, [r4, #48]	; 0x30
 8004374:	bd10      	pop	{r4, pc}
 8004376:	bf00      	nop
 8004378:	0800469d 	.word	0x0800469d
 800437c:	080046bf 	.word	0x080046bf
 8004380:	080046f7 	.word	0x080046f7
 8004384:	0800471b 	.word	0x0800471b

08004388 <_cleanup_r>:
 8004388:	4901      	ldr	r1, [pc, #4]	; (8004390 <_cleanup_r+0x8>)
 800438a:	f000 b8af 	b.w	80044ec <_fwalk_reent>
 800438e:	bf00      	nop
 8004390:	080042c9 	.word	0x080042c9

08004394 <__sfmoreglue>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	2268      	movs	r2, #104	; 0x68
 8004398:	1e4d      	subs	r5, r1, #1
 800439a:	4355      	muls	r5, r2
 800439c:	460e      	mov	r6, r1
 800439e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043a2:	f7ff fad1 	bl	8003948 <_malloc_r>
 80043a6:	4604      	mov	r4, r0
 80043a8:	b140      	cbz	r0, 80043bc <__sfmoreglue+0x28>
 80043aa:	2100      	movs	r1, #0
 80043ac:	e9c0 1600 	strd	r1, r6, [r0]
 80043b0:	300c      	adds	r0, #12
 80043b2:	60a0      	str	r0, [r4, #8]
 80043b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043b8:	f7ff f9dc 	bl	8003774 <memset>
 80043bc:	4620      	mov	r0, r4
 80043be:	bd70      	pop	{r4, r5, r6, pc}

080043c0 <__sfp_lock_acquire>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__sfp_lock_acquire+0x8>)
 80043c2:	f000 b8b3 	b.w	800452c <__retarget_lock_acquire_recursive>
 80043c6:	bf00      	nop
 80043c8:	2000081d 	.word	0x2000081d

080043cc <__sfp_lock_release>:
 80043cc:	4801      	ldr	r0, [pc, #4]	; (80043d4 <__sfp_lock_release+0x8>)
 80043ce:	f000 b8ae 	b.w	800452e <__retarget_lock_release_recursive>
 80043d2:	bf00      	nop
 80043d4:	2000081d 	.word	0x2000081d

080043d8 <__sinit_lock_acquire>:
 80043d8:	4801      	ldr	r0, [pc, #4]	; (80043e0 <__sinit_lock_acquire+0x8>)
 80043da:	f000 b8a7 	b.w	800452c <__retarget_lock_acquire_recursive>
 80043de:	bf00      	nop
 80043e0:	2000081e 	.word	0x2000081e

080043e4 <__sinit_lock_release>:
 80043e4:	4801      	ldr	r0, [pc, #4]	; (80043ec <__sinit_lock_release+0x8>)
 80043e6:	f000 b8a2 	b.w	800452e <__retarget_lock_release_recursive>
 80043ea:	bf00      	nop
 80043ec:	2000081e 	.word	0x2000081e

080043f0 <__sinit>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	f7ff fff0 	bl	80043d8 <__sinit_lock_acquire>
 80043f8:	69a3      	ldr	r3, [r4, #24]
 80043fa:	b11b      	cbz	r3, 8004404 <__sinit+0x14>
 80043fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004400:	f7ff bff0 	b.w	80043e4 <__sinit_lock_release>
 8004404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004408:	6523      	str	r3, [r4, #80]	; 0x50
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <__sinit+0x68>)
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <__sinit+0x6c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	62a2      	str	r2, [r4, #40]	; 0x28
 8004412:	42a3      	cmp	r3, r4
 8004414:	bf04      	itt	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	61a3      	streq	r3, [r4, #24]
 800441a:	4620      	mov	r0, r4
 800441c:	f000 f820 	bl	8004460 <__sfp>
 8004420:	6060      	str	r0, [r4, #4]
 8004422:	4620      	mov	r0, r4
 8004424:	f000 f81c 	bl	8004460 <__sfp>
 8004428:	60a0      	str	r0, [r4, #8]
 800442a:	4620      	mov	r0, r4
 800442c:	f000 f818 	bl	8004460 <__sfp>
 8004430:	2200      	movs	r2, #0
 8004432:	60e0      	str	r0, [r4, #12]
 8004434:	2104      	movs	r1, #4
 8004436:	6860      	ldr	r0, [r4, #4]
 8004438:	f7ff ff82 	bl	8004340 <std>
 800443c:	68a0      	ldr	r0, [r4, #8]
 800443e:	2201      	movs	r2, #1
 8004440:	2109      	movs	r1, #9
 8004442:	f7ff ff7d 	bl	8004340 <std>
 8004446:	68e0      	ldr	r0, [r4, #12]
 8004448:	2202      	movs	r2, #2
 800444a:	2112      	movs	r1, #18
 800444c:	f7ff ff78 	bl	8004340 <std>
 8004450:	2301      	movs	r3, #1
 8004452:	61a3      	str	r3, [r4, #24]
 8004454:	e7d2      	b.n	80043fc <__sinit+0xc>
 8004456:	bf00      	nop
 8004458:	08004824 	.word	0x08004824
 800445c:	08004389 	.word	0x08004389

08004460 <__sfp>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	4607      	mov	r7, r0
 8004464:	f7ff ffac 	bl	80043c0 <__sfp_lock_acquire>
 8004468:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <__sfp+0x84>)
 800446a:	681e      	ldr	r6, [r3, #0]
 800446c:	69b3      	ldr	r3, [r6, #24]
 800446e:	b913      	cbnz	r3, 8004476 <__sfp+0x16>
 8004470:	4630      	mov	r0, r6
 8004472:	f7ff ffbd 	bl	80043f0 <__sinit>
 8004476:	3648      	adds	r6, #72	; 0x48
 8004478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800447c:	3b01      	subs	r3, #1
 800447e:	d503      	bpl.n	8004488 <__sfp+0x28>
 8004480:	6833      	ldr	r3, [r6, #0]
 8004482:	b30b      	cbz	r3, 80044c8 <__sfp+0x68>
 8004484:	6836      	ldr	r6, [r6, #0]
 8004486:	e7f7      	b.n	8004478 <__sfp+0x18>
 8004488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800448c:	b9d5      	cbnz	r5, 80044c4 <__sfp+0x64>
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <__sfp+0x88>)
 8004490:	60e3      	str	r3, [r4, #12]
 8004492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004496:	6665      	str	r5, [r4, #100]	; 0x64
 8004498:	f000 f847 	bl	800452a <__retarget_lock_init_recursive>
 800449c:	f7ff ff96 	bl	80043cc <__sfp_lock_release>
 80044a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044a8:	6025      	str	r5, [r4, #0]
 80044aa:	61a5      	str	r5, [r4, #24]
 80044ac:	2208      	movs	r2, #8
 80044ae:	4629      	mov	r1, r5
 80044b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044b4:	f7ff f95e 	bl	8003774 <memset>
 80044b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044c0:	4620      	mov	r0, r4
 80044c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c4:	3468      	adds	r4, #104	; 0x68
 80044c6:	e7d9      	b.n	800447c <__sfp+0x1c>
 80044c8:	2104      	movs	r1, #4
 80044ca:	4638      	mov	r0, r7
 80044cc:	f7ff ff62 	bl	8004394 <__sfmoreglue>
 80044d0:	4604      	mov	r4, r0
 80044d2:	6030      	str	r0, [r6, #0]
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d1d5      	bne.n	8004484 <__sfp+0x24>
 80044d8:	f7ff ff78 	bl	80043cc <__sfp_lock_release>
 80044dc:	230c      	movs	r3, #12
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	e7ee      	b.n	80044c0 <__sfp+0x60>
 80044e2:	bf00      	nop
 80044e4:	08004824 	.word	0x08004824
 80044e8:	ffff0001 	.word	0xffff0001

080044ec <_fwalk_reent>:
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	4606      	mov	r6, r0
 80044f2:	4688      	mov	r8, r1
 80044f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044f8:	2700      	movs	r7, #0
 80044fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044fe:	f1b9 0901 	subs.w	r9, r9, #1
 8004502:	d505      	bpl.n	8004510 <_fwalk_reent+0x24>
 8004504:	6824      	ldr	r4, [r4, #0]
 8004506:	2c00      	cmp	r4, #0
 8004508:	d1f7      	bne.n	80044fa <_fwalk_reent+0xe>
 800450a:	4638      	mov	r0, r7
 800450c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004510:	89ab      	ldrh	r3, [r5, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d907      	bls.n	8004526 <_fwalk_reent+0x3a>
 8004516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800451a:	3301      	adds	r3, #1
 800451c:	d003      	beq.n	8004526 <_fwalk_reent+0x3a>
 800451e:	4629      	mov	r1, r5
 8004520:	4630      	mov	r0, r6
 8004522:	47c0      	blx	r8
 8004524:	4307      	orrs	r7, r0
 8004526:	3568      	adds	r5, #104	; 0x68
 8004528:	e7e9      	b.n	80044fe <_fwalk_reent+0x12>

0800452a <__retarget_lock_init_recursive>:
 800452a:	4770      	bx	lr

0800452c <__retarget_lock_acquire_recursive>:
 800452c:	4770      	bx	lr

0800452e <__retarget_lock_release_recursive>:
 800452e:	4770      	bx	lr

08004530 <__swhatbuf_r>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	460e      	mov	r6, r1
 8004534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004538:	2900      	cmp	r1, #0
 800453a:	b096      	sub	sp, #88	; 0x58
 800453c:	4614      	mov	r4, r2
 800453e:	461d      	mov	r5, r3
 8004540:	da08      	bge.n	8004554 <__swhatbuf_r+0x24>
 8004542:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	602a      	str	r2, [r5, #0]
 800454a:	061a      	lsls	r2, r3, #24
 800454c:	d410      	bmi.n	8004570 <__swhatbuf_r+0x40>
 800454e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004552:	e00e      	b.n	8004572 <__swhatbuf_r+0x42>
 8004554:	466a      	mov	r2, sp
 8004556:	f000 f907 	bl	8004768 <_fstat_r>
 800455a:	2800      	cmp	r0, #0
 800455c:	dbf1      	blt.n	8004542 <__swhatbuf_r+0x12>
 800455e:	9a01      	ldr	r2, [sp, #4]
 8004560:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004564:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004568:	425a      	negs	r2, r3
 800456a:	415a      	adcs	r2, r3
 800456c:	602a      	str	r2, [r5, #0]
 800456e:	e7ee      	b.n	800454e <__swhatbuf_r+0x1e>
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	2000      	movs	r0, #0
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	b016      	add	sp, #88	; 0x58
 8004578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800457c <__smakebuf_r>:
 800457c:	898b      	ldrh	r3, [r1, #12]
 800457e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004580:	079d      	lsls	r5, r3, #30
 8004582:	4606      	mov	r6, r0
 8004584:	460c      	mov	r4, r1
 8004586:	d507      	bpl.n	8004598 <__smakebuf_r+0x1c>
 8004588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	6123      	str	r3, [r4, #16]
 8004590:	2301      	movs	r3, #1
 8004592:	6163      	str	r3, [r4, #20]
 8004594:	b002      	add	sp, #8
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	ab01      	add	r3, sp, #4
 800459a:	466a      	mov	r2, sp
 800459c:	f7ff ffc8 	bl	8004530 <__swhatbuf_r>
 80045a0:	9900      	ldr	r1, [sp, #0]
 80045a2:	4605      	mov	r5, r0
 80045a4:	4630      	mov	r0, r6
 80045a6:	f7ff f9cf 	bl	8003948 <_malloc_r>
 80045aa:	b948      	cbnz	r0, 80045c0 <__smakebuf_r+0x44>
 80045ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b0:	059a      	lsls	r2, r3, #22
 80045b2:	d4ef      	bmi.n	8004594 <__smakebuf_r+0x18>
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	81a3      	strh	r3, [r4, #12]
 80045be:	e7e3      	b.n	8004588 <__smakebuf_r+0xc>
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <__smakebuf_r+0x7c>)
 80045c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	6020      	str	r0, [r4, #0]
 80045c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045cc:	81a3      	strh	r3, [r4, #12]
 80045ce:	9b00      	ldr	r3, [sp, #0]
 80045d0:	6163      	str	r3, [r4, #20]
 80045d2:	9b01      	ldr	r3, [sp, #4]
 80045d4:	6120      	str	r0, [r4, #16]
 80045d6:	b15b      	cbz	r3, 80045f0 <__smakebuf_r+0x74>
 80045d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 f8d5 	bl	800478c <_isatty_r>
 80045e2:	b128      	cbz	r0, 80045f0 <__smakebuf_r+0x74>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	89a0      	ldrh	r0, [r4, #12]
 80045f2:	4305      	orrs	r5, r0
 80045f4:	81a5      	strh	r5, [r4, #12]
 80045f6:	e7cd      	b.n	8004594 <__smakebuf_r+0x18>
 80045f8:	08004389 	.word	0x08004389

080045fc <__malloc_lock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__malloc_lock+0x8>)
 80045fe:	f7ff bf95 	b.w	800452c <__retarget_lock_acquire_recursive>
 8004602:	bf00      	nop
 8004604:	2000081c 	.word	0x2000081c

08004608 <__malloc_unlock>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__malloc_unlock+0x8>)
 800460a:	f7ff bf90 	b.w	800452e <__retarget_lock_release_recursive>
 800460e:	bf00      	nop
 8004610:	2000081c 	.word	0x2000081c

08004614 <_raise_r>:
 8004614:	291f      	cmp	r1, #31
 8004616:	b538      	push	{r3, r4, r5, lr}
 8004618:	4604      	mov	r4, r0
 800461a:	460d      	mov	r5, r1
 800461c:	d904      	bls.n	8004628 <_raise_r+0x14>
 800461e:	2316      	movs	r3, #22
 8004620:	6003      	str	r3, [r0, #0]
 8004622:	f04f 30ff 	mov.w	r0, #4294967295
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800462a:	b112      	cbz	r2, 8004632 <_raise_r+0x1e>
 800462c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004630:	b94b      	cbnz	r3, 8004646 <_raise_r+0x32>
 8004632:	4620      	mov	r0, r4
 8004634:	f000 f830 	bl	8004698 <_getpid_r>
 8004638:	462a      	mov	r2, r5
 800463a:	4601      	mov	r1, r0
 800463c:	4620      	mov	r0, r4
 800463e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004642:	f000 b817 	b.w	8004674 <_kill_r>
 8004646:	2b01      	cmp	r3, #1
 8004648:	d00a      	beq.n	8004660 <_raise_r+0x4c>
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	d103      	bne.n	8004656 <_raise_r+0x42>
 800464e:	2316      	movs	r3, #22
 8004650:	6003      	str	r3, [r0, #0]
 8004652:	2001      	movs	r0, #1
 8004654:	e7e7      	b.n	8004626 <_raise_r+0x12>
 8004656:	2400      	movs	r4, #0
 8004658:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800465c:	4628      	mov	r0, r5
 800465e:	4798      	blx	r3
 8004660:	2000      	movs	r0, #0
 8004662:	e7e0      	b.n	8004626 <_raise_r+0x12>

08004664 <raise>:
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <raise+0xc>)
 8004666:	4601      	mov	r1, r0
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f7ff bfd3 	b.w	8004614 <_raise_r>
 800466e:	bf00      	nop
 8004670:	2000000c 	.word	0x2000000c

08004674 <_kill_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d07      	ldr	r5, [pc, #28]	; (8004694 <_kill_r+0x20>)
 8004678:	2300      	movs	r3, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	f7fc fd70 	bl	8001166 <_kill>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d102      	bne.n	8004690 <_kill_r+0x1c>
 800468a:	682b      	ldr	r3, [r5, #0]
 800468c:	b103      	cbz	r3, 8004690 <_kill_r+0x1c>
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	bd38      	pop	{r3, r4, r5, pc}
 8004692:	bf00      	nop
 8004694:	20000820 	.word	0x20000820

08004698 <_getpid_r>:
 8004698:	f7fc bd5d 	b.w	8001156 <_getpid>

0800469c <__sread>:
 800469c:	b510      	push	{r4, lr}
 800469e:	460c      	mov	r4, r1
 80046a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a4:	f000 f894 	bl	80047d0 <_read_r>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	bfab      	itete	ge
 80046ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ae:	89a3      	ldrhlt	r3, [r4, #12]
 80046b0:	181b      	addge	r3, r3, r0
 80046b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046b6:	bfac      	ite	ge
 80046b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ba:	81a3      	strhlt	r3, [r4, #12]
 80046bc:	bd10      	pop	{r4, pc}

080046be <__swrite>:
 80046be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	461f      	mov	r7, r3
 80046c4:	898b      	ldrh	r3, [r1, #12]
 80046c6:	05db      	lsls	r3, r3, #23
 80046c8:	4605      	mov	r5, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4616      	mov	r6, r2
 80046ce:	d505      	bpl.n	80046dc <__swrite+0x1e>
 80046d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d4:	2302      	movs	r3, #2
 80046d6:	2200      	movs	r2, #0
 80046d8:	f000 f868 	bl	80047ac <_lseek_r>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	4628      	mov	r0, r5
 80046ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f2:	f000 b817 	b.w	8004724 <_write_r>

080046f6 <__sseek>:
 80046f6:	b510      	push	{r4, lr}
 80046f8:	460c      	mov	r4, r1
 80046fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fe:	f000 f855 	bl	80047ac <_lseek_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	bf15      	itete	ne
 8004708:	6560      	strne	r0, [r4, #84]	; 0x54
 800470a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800470e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004712:	81a3      	strheq	r3, [r4, #12]
 8004714:	bf18      	it	ne
 8004716:	81a3      	strhne	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__sclose>:
 800471a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471e:	f000 b813 	b.w	8004748 <_close_r>
	...

08004724 <_write_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d07      	ldr	r5, [pc, #28]	; (8004744 <_write_r+0x20>)
 8004728:	4604      	mov	r4, r0
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	2200      	movs	r2, #0
 8004730:	602a      	str	r2, [r5, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7fc fd4e 	bl	80011d4 <_write>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_write_r+0x1e>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_write_r+0x1e>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	20000820 	.word	0x20000820

08004748 <_close_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4d06      	ldr	r5, [pc, #24]	; (8004764 <_close_r+0x1c>)
 800474c:	2300      	movs	r3, #0
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fc fd5a 	bl	800120c <_close>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_close_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_close_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	20000820 	.word	0x20000820

08004768 <_fstat_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4d07      	ldr	r5, [pc, #28]	; (8004788 <_fstat_r+0x20>)
 800476c:	2300      	movs	r3, #0
 800476e:	4604      	mov	r4, r0
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	602b      	str	r3, [r5, #0]
 8004776:	f7fc fd55 	bl	8001224 <_fstat>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d102      	bne.n	8004784 <_fstat_r+0x1c>
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	b103      	cbz	r3, 8004784 <_fstat_r+0x1c>
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	bf00      	nop
 8004788:	20000820 	.word	0x20000820

0800478c <_isatty_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d06      	ldr	r5, [pc, #24]	; (80047a8 <_isatty_r+0x1c>)
 8004790:	2300      	movs	r3, #0
 8004792:	4604      	mov	r4, r0
 8004794:	4608      	mov	r0, r1
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	f7fc fd54 	bl	8001244 <_isatty>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d102      	bne.n	80047a6 <_isatty_r+0x1a>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	b103      	cbz	r3, 80047a6 <_isatty_r+0x1a>
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	20000820 	.word	0x20000820

080047ac <_lseek_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4d07      	ldr	r5, [pc, #28]	; (80047cc <_lseek_r+0x20>)
 80047b0:	4604      	mov	r4, r0
 80047b2:	4608      	mov	r0, r1
 80047b4:	4611      	mov	r1, r2
 80047b6:	2200      	movs	r2, #0
 80047b8:	602a      	str	r2, [r5, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f7fc fd4d 	bl	800125a <_lseek>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_lseek_r+0x1e>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_lseek_r+0x1e>
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	20000820 	.word	0x20000820

080047d0 <_read_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d07      	ldr	r5, [pc, #28]	; (80047f0 <_read_r+0x20>)
 80047d4:	4604      	mov	r4, r0
 80047d6:	4608      	mov	r0, r1
 80047d8:	4611      	mov	r1, r2
 80047da:	2200      	movs	r2, #0
 80047dc:	602a      	str	r2, [r5, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fc fcdb 	bl	800119a <_read>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_read_r+0x1e>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_read_r+0x1e>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000820 	.word	0x20000820

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr
