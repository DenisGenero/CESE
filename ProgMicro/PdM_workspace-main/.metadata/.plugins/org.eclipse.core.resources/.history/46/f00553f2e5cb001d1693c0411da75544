
/* Includes ------------------------------------------------------------------*/
#include "API_debounce.h"

/* Private functions ---------------------------------------------------------*/

/* @brief
 * Tell the API if the button is pressed or released
 * @param  None
 * @retval true if the button is press, false if it is released*/
// TODO
bool_t readKey(){
}

/* @brief
 * Toggle LED1 state whenever a press state is detected
 * @param  None
 * @retval None*/

void buttonPressed(){
	BSP_LED_Toggle(LED_GREEN);
}

/* @brief
 * Toggle LED3 state whenever a release state is detected
 * @param  None
 * @retval None*/
void buttonReleased(){
	BSP_LED_Toggle(LED_RED);
}

/* @brief
 * Initialize the Finite State Machine assuming that
 * the button is release (normal button state --> normal open)
 * @param  None
 * @retval None
 * */
void debounceFSM_init(){
	/* Set the initial state --> normal state is open */
	actualState = BUTTON_UP;
	/* Load the de-bouncing time */
	delayInit(&delay, DEBOUNCE_TIME);
}
