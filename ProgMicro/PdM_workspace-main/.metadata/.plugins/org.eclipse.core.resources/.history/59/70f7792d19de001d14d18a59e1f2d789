#include "main.h"
#include "mpu9265_SPI.h"

#define ACCEL_REF 32768

uint8_t shiftBits = 1;
uint8_t accelRes = 2;

float getXAngle(){
	int16_t angle;
	uint16_t xAccel = MPUReadAccelXAxis();
	/* See in which plane is inclined to determine how
	 * to calculate the angle*/
	/* Positive angles */
	if(xAccel > ACCEL_REF){
		angle = 90 - ((xAccel - ACCEL_REF))*90;
	}
	/* Negative angles */
	else{
		angle = -90*xAccel;
	}
	uint8_t shiftBits = 16 - accelRes;
	angle = (float)((angle<<shiftBits)/accelRes);
	return (angle);
}

int main(void){

	APISysInit();

//	uint8_t data = 0;
//	MPUSetAccel2G();
//	data = MPUGetAccelResolution();
//	MPUSetAccel4G();
//	data = MPUGetAccelResolution();
//	MPUSetAccel8G();
//	data = MPUGetAccelResolution();
//	MPUSetAccel16G();
//	data = MPUGetAccelResolution();

	uint32_t x_acum, y_acum;
	uint16_t accel_x, accel_y;

	while (1)
	{
		for (uint16_t i = 0; i<1025; i++){
			x_acum += MPUReadAccelXAxis();
			y_acum += MPUReadAccelYAxis();
		}
		accel_x = (uint16_t)(x_acum<<10);
		accel_y = (uint16_t)(y_acum<<10);
		HAL_Delay(100);
	}
}


