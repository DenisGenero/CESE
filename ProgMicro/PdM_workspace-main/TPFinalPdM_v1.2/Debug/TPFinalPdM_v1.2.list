
TPFinalPdM_v1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067fc  080067fc  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006804  08006804  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800680c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00000548  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000718  20000718  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125b4  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002976  00000000  00000000  000327b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00035130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  000362f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002440c  00000000  00000000  00037388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148da  00000000  00000000  0005b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ebf  00000000  00000000  0007006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149f2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004948  00000000  00000000  00149f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001d0 	.word	0x200001d0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006748 	.word	0x08006748

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001d4 	.word	0x200001d4
 80001e8:	08006748 	.word	0x08006748

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b5b0      	push	{r4, r5, r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
	/* MCU peripherals configurations */
	APISysInit();
 80004f6:	f001 fa7b 	bl	80019f0 <APISysInit>

	/* Initialize serial console */
	ConsoleInit();
 80004fa:	f000 fad3 	bl	8000aa4 <ConsoleInit>
	uint8_t welcomeMsg [] = "Bienvenidos al Nivel Digital \r\n";
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <main+0x34>)
 8000500:	463c      	mov	r4, r7
 8000502:	461d      	mov	r5, r3
 8000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000508:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800050c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Send welcome mesageg and start the digital level FSM */
	ConsolePrintStr(welcomeMsg);
 8000510:	463b      	mov	r3, r7
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fad4 	bl	8000ac0 <ConsolePrintStr>
	digitalLevInit();
 8000518:	f000 fc2a 	bl	8000d70 <digitalLevInit>

	while (1)
	{
		/* Update digital level FSM */
		digitalLevUpdate();
 800051c:	f000 fc56 	bl	8000dcc <digitalLevUpdate>
 8000520:	e7fc      	b.n	800051c <main+0x2c>
 8000522:	bf00      	nop
 8000524:	08006760 	.word	0x08006760

08000528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <HAL_MspInit+0x4c>)
 8000534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <HAL_MspInit+0x4c>)
 8000538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053c:	6453      	str	r3, [r2, #68]	; 0x44
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <HAL_MspInit+0x4c>)
 8000540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_MspInit+0x4c>)
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <HAL_MspInit+0x4c>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	6413      	str	r3, [r2, #64]	; 0x40
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_MspInit+0x4c>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <HAL_SPI_MspInit+0xc0>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d149      	bne.n	800062e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	4a26      	ldr	r2, [pc, #152]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a8:	6453      	str	r3, [r2, #68]	; 0x44
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a1f      	ldr	r2, [pc, #124]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <HAL_SPI_MspInit+0xc4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80005ee:	2360      	movs	r3, #96	; 0x60
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fa:	2303      	movs	r3, #3
 80005fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005fe:	2305      	movs	r3, #5
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <HAL_SPI_MspInit+0xc8>)
 800060a:	f002 fa4d 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800060e:	2320      	movs	r3, #32
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800061e:	2305      	movs	r3, #5
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HAL_SPI_MspInit+0xcc>)
 800062a:	f002 fa3d 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40013000 	.word	0x40013000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400

08000648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <HAL_TIM_Base_MspInit+0x98>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d13d      	bne.n	80006d6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <HAL_TIM_Base_MspInit+0x9c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <HAL_TIM_Base_MspInit+0x9c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <HAL_TIM_Base_MspInit+0x9c>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 8000678:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <HAL_TIM_Base_MspInit+0xa4>)
 800067a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 800067e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000682:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 8000686:	2240      	movs	r2, #64	; 0x40
 8000688:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 8000692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000696:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 800069a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800069e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 80006a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 80006bc:	f001 fdf2 	bl	80022a4 <HAL_DMA_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80006c6:	f001 fc4d 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <HAL_TIM_Base_MspInit+0xa0>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40010000 	.word	0x40010000
 80006e4:	40023800 	.word	0x40023800
 80006e8:	20000668 	.word	0x20000668
 80006ec:	40026428 	.word	0x40026428

080006f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <HAL_TIM_MspPostInit+0x68>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d11e      	bne.n	8000750 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_TIM_MspPostInit+0x6c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <HAL_TIM_MspPostInit+0x6c>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_TIM_MspPostInit+0x6c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800072e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000732:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <HAL_TIM_MspPostInit+0x70>)
 800074c:	f002 f9ac 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010000 	.word	0x40010000
 800075c:	40023800 	.word	0x40023800
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1d      	ldr	r2, [pc, #116]	; (80007f8 <HAL_UART_MspInit+0x94>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d134      	bne.n	80007f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_UART_MspInit+0x98>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <HAL_UART_MspInit+0x98>)
 8000790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <HAL_UART_MspInit+0x98>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_UART_MspInit+0x98>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <HAL_UART_MspInit+0x98>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_UART_MspInit+0x98>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007d0:	2307      	movs	r3, #7
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <HAL_UART_MspInit+0x9c>)
 80007dc:	f002 f964 	bl	8002aa8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2027      	movs	r0, #39	; 0x27
 80007e6:	f001 fd26 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007ea:	2027      	movs	r0, #39	; 0x27
 80007ec:	f001 fd3f 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40004800 	.word	0x40004800
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020c00 	.word	0x40020c00

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f001 fbf6 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USART3_IRQHandler+0x10>)
 800085e:	f004 ffdf 	bl	8005820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200006c8 	.word	0x200006c8

0800086c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <DMA2_Stream1_IRQHandler+0x10>)
 8000872:	f001 feaf 	bl	80025d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000668 	.word	0x20000668

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ce:	f7ff ffd7 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f005 ff0d 	bl	80066f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe0b 	bl	80004f0 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80008e8:	0800680c 	.word	0x0800680c
  ldr r2, =_sbss
 80008ec:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80008f0:	20000718 	.word	0x20000718

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <readKey>:

/* @brief
 * Tell the API if the button is pressed or released
 * @param  None
 * @retval true if the button is press, false if it is released*/
bool_t readKey(){
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
	bool_t flag = false;
 80008fe:	2300      	movs	r3, #0
 8000900:	71fb      	strb	r3, [r7, #7]
	if (isPressed) {
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <readKey+0x2c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <readKey+0x1c>
		flag = true;
 800090a:	2301      	movs	r3, #1
 800090c:	71fb      	strb	r3, [r7, #7]
		isPressed = false;
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <readKey+0x2c>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8000914:	79fb      	ldrb	r3, [r7, #7]
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200001f9 	.word	0x200001f9

08000928 <debounceFSM_init>:
/* @brief
 * Initialize the Finite State Machine assuming that
 * the button is release (normal button state --> normal open)
 * @param  None
 * @retval None */
void debounceFSM_init(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	/* Set the initial state --> normal state is open */
	actualState = BUTTON_UP;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <debounceFSM_init+0x18>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	/* Load the de-bouncing time */
	delayInit(&delay, DEBOUNCE_TIME);
 8000932:	2128      	movs	r1, #40	; 0x28
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <debounceFSM_init+0x1c>)
 8000936:	f000 f875 	bl	8000a24 <delayInit>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001f8 	.word	0x200001f8
 8000944:	200001ec 	.word	0x200001ec

08000948 <debounceFSM_update>:
 * Ask for the actual state and determine if the button was hold down or up
 *  applying a de-bouncing method, that consist in check twice with a 40 milliseconds wait,
 *  if it was a real state change or a spurious mechanic noise.
 * @param  None
 * @retval None */
void debounceFSM_update(){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	switch(actualState){
 800094c:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <debounceFSM_update+0xd0>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d853      	bhi.n	80009fc <debounceFSM_update+0xb4>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <debounceFSM_update+0x14>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	0800096d 	.word	0x0800096d
 8000960:	08000987 	.word	0x08000987
 8000964:	080009b5 	.word	0x080009b5
 8000968:	080009cf 	.word	0x080009cf
		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER)){
 800096c:	2000      	movs	r0, #0
 800096e:	f001 faff 	bl	8001f70 <BSP_PB_GetState>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d045      	beq.n	8000a04 <debounceFSM_update+0xbc>
				/* Update to next state */
				actualState = BUTTON_FALLING;
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <debounceFSM_update+0xd0>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
				/* Start the delay count */
				delayRead(&delay);
 800097e:	4827      	ldr	r0, [pc, #156]	; (8000a1c <debounceFSM_update+0xd4>)
 8000980:	f000 f861 	bl	8000a46 <delayRead>
			}
		break;
 8000984:	e03e      	b.n	8000a04 <debounceFSM_update+0xbc>

		case BUTTON_FALLING:
			/* Check for the de-bouncing time */
			if(delayRead(&delay)){
 8000986:	4825      	ldr	r0, [pc, #148]	; (8000a1c <debounceFSM_update+0xd4>)
 8000988:	f000 f85d 	bl	8000a46 <delayRead>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d03a      	beq.n	8000a08 <debounceFSM_update+0xc0>
				/* If after de-bouncing time the button is still pressed, it is assumed
				 * that the user has pressed the button */
				if(BSP_PB_GetState(BUTTON_USER)) {
 8000992:	2000      	movs	r0, #0
 8000994:	f001 faec 	bl	8001f70 <BSP_PB_GetState>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <debounceFSM_update+0x64>
					/* Update to next state */
					actualState = BUTTON_DOWN;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <debounceFSM_update+0xd0>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	701a      	strb	r2, [r3, #0]
					/* Set the flag to indicate that the button is pressed */
					isPressed = true;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <debounceFSM_update+0xd8>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
				else{
					/* If spurious noise detected, return to previous state */
					actualState = BUTTON_UP;
				}
			}
		  break;
 80009aa:	e02d      	b.n	8000a08 <debounceFSM_update+0xc0>
					actualState = BUTTON_UP;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <debounceFSM_update+0xd0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
		  break;
 80009b2:	e029      	b.n	8000a08 <debounceFSM_update+0xc0>

		case BUTTON_DOWN:
		  if(!BSP_PB_GetState(BUTTON_USER)){
 80009b4:	2000      	movs	r0, #0
 80009b6:	f001 fadb 	bl	8001f70 <BSP_PB_GetState>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d125      	bne.n	8000a0c <debounceFSM_update+0xc4>
			  /* Update to next state */
			  actualState = BUTTON_RISING;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <debounceFSM_update+0xd0>)
 80009c2:	2203      	movs	r2, #3
 80009c4:	701a      	strb	r2, [r3, #0]
			  /* Start the delay count */
			  delayRead(&delay);
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <debounceFSM_update+0xd4>)
 80009c8:	f000 f83d 	bl	8000a46 <delayRead>
		  }
		  break;
 80009cc:	e01e      	b.n	8000a0c <debounceFSM_update+0xc4>

		case BUTTON_RISING:
			/* If after de-bouncing time the button is still released, it is assumed
			 * that the user has released the button */
			if(delayRead(&delay)){
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <debounceFSM_update+0xd4>)
 80009d0:	f000 f839 	bl	8000a46 <delayRead>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d01a      	beq.n	8000a10 <debounceFSM_update+0xc8>
				if(!BSP_PB_GetState(BUTTON_USER)){
 80009da:	2000      	movs	r0, #0
 80009dc:	f001 fac8 	bl	8001f70 <BSP_PB_GetState>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d106      	bne.n	80009f4 <debounceFSM_update+0xac>
					/* Update to next state */
					actualState = BUTTON_UP;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <debounceFSM_update+0xd0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
					/* Indicate that the button is no more pressed */
					isPressed = false;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <debounceFSM_update+0xd8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
				else{
					/* If spurious noise detected, return to previous state */
					actualState = BUTTON_DOWN;
				}
			}
		  break;
 80009f2:	e00d      	b.n	8000a10 <debounceFSM_update+0xc8>
					actualState = BUTTON_DOWN;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <debounceFSM_update+0xd0>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	701a      	strb	r2, [r3, #0]
		  break;
 80009fa:	e009      	b.n	8000a10 <debounceFSM_update+0xc8>
	  default:
		  /* Defensive guard: if another state is loaded in actualState variable,
		   * return to the first state */
		  actualState = BUTTON_UP;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <debounceFSM_update+0xd0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
		  break;
 8000a02:	e006      	b.n	8000a12 <debounceFSM_update+0xca>
		break;
 8000a04:	bf00      	nop
 8000a06:	e004      	b.n	8000a12 <debounceFSM_update+0xca>
		  break;
 8000a08:	bf00      	nop
 8000a0a:	e002      	b.n	8000a12 <debounceFSM_update+0xca>
		  break;
 8000a0c:	bf00      	nop
 8000a0e:	e000      	b.n	8000a12 <debounceFSM_update+0xca>
		  break;
 8000a10:	bf00      	nop
	}
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001f8 	.word	0x200001f8
 8000a1c:	200001ec 	.word	0x200001ec
 8000a20:	200001f9 	.word	0x200001f9

08000a24 <delayInit>:
 * @params:
 * 			- delay: variable to store the count
 * 			- duration: amount milliseconds delay
 * @retval: None
 * */
void delayInit(delay_t *delay, tick_t duration ){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	721a      	strb	r2, [r3, #8]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <delayRead>:

/* @brief: Tells if the count is running.
 * @param: variable where the count is stored
 * @retval: true if the count is running
 * */
bool_t delayRead(delay_t *delay ){
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	bool_t finish = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7a1b      	ldrb	r3, [r3, #8]
 8000a56:	f083 0301 	eor.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <delayRead+0x2c>
		delay->running = true;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 8000a66:	f001 faff 	bl	8002068 <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e013      	b.n	8000a9a <delayRead+0x54>
	}
	else{
		uint32_t actual_count = HAL_GetTick() - delay->startTime;
 8000a72:	f001 faf9 	bl	8002068 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	60bb      	str	r3, [r7, #8]
		if(actual_count >= delay->duration){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d305      	bcc.n	8000a96 <delayRead+0x50>
			finish = true;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
			delay->running = false;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	721a      	strb	r2, [r3, #8]
 8000a94:	e001      	b.n	8000a9a <delayRead+0x54>
		}
		else{finish = false;}
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
	}
	return(finish);
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <ConsoleInit>:

/* @brief: Initialize the serial console through uart port
 * @param: None
 * @retval: None
 * */
void ConsoleInit(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	uartInit();
 8000aa8:	f000 feda 	bl	8001860 <uartInit>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <ConsoleNewData>:

/* @brief: Indicates if there is new data in console
 * @param: None
 * @retval: true if data is available
 * */
bool ConsoleNewData(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	return(uartNewData());
 8000ab4:	f000 ff1e 	bl	80018f4 <uartNewData>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <ConsolePrintStr>:

/* @brief: print a uint8_t chain to the console through the uart
 * @param: chain to be printed
 * @retval: None
 * */
void ConsolePrintStr(uint8_t *pstring){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	uartSendString(pstring);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 feed 	bl	80018a8 <uartSendString>
	printedLines ++;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <ConsolePrintStr+0x24>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <ConsolePrintStr+0x24>)
 8000ad8:	801a      	strh	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001fa 	.word	0x200001fa

08000ae8 <ConsolePrintDeg>:

/* @brief: Print an integer number up to 3 digits
 * @param: data to be printed
 * @retval: None
 *  */
void ConsolePrintDeg(int16_t degree){
 8000ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000aec:	b08d      	sub	sp, #52	; 0x34
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	80fb      	strh	r3, [r7, #6]
 8000af4:	466b      	mov	r3, sp
 8000af6:	461e      	mov	r6, r3
	/* Amount of digit to print (included sign) */
	uint8_t digitNumber = 4;
 8000af8:	2304      	movs	r3, #4
 8000afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t buffer[digitNumber];
 8000afe:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000b02:	460b      	mov	r3, r1
 8000b04:	3b01      	subs	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
 8000b08:	b2cb      	uxtb	r3, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	4691      	mov	r9, r2
 8000b10:	f04f 0200 	mov.w	r2, #0
 8000b14:	f04f 0300 	mov.w	r3, #0
 8000b18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b24:	b2cb      	uxtb	r3, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	461c      	mov	r4, r3
 8000b2a:	4615      	mov	r5, r2
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	00eb      	lsls	r3, r5, #3
 8000b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b3a:	00e2      	lsls	r2, r4, #3
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	3307      	adds	r3, #7
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	ebad 0d03 	sub.w	sp, sp, r3
 8000b48:	466b      	mov	r3, sp
 8000b4a:	3300      	adds	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
	uint8_t degMark[] = " grad.\r\n";
 8000b4e:	4a39      	ldr	r2, [pc, #228]	; (8000c34 <ConsolePrintDeg+0x14c>)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b56:	c303      	stmia	r3!, {r0, r1}
 8000b58:	701a      	strb	r2, [r3, #0]
	uint16_t num;
	uint8_t plusMark[] = "+";
 8000b5a:	232b      	movs	r3, #43	; 0x2b
 8000b5c:	823b      	strh	r3, [r7, #16]
	uint8_t minusMark[] = "-";
 8000b5e:	232d      	movs	r3, #45	; 0x2d
 8000b60:	81bb      	strh	r3, [r7, #12]
	uint8_t spaceMark[] = "\0";
 8000b62:	2300      	movs	r3, #0
 8000b64:	813b      	strh	r3, [r7, #8]
	/* Offset to map char and integer types */
	uint8_t uintZero = 48;
 8000b66:	2330      	movs	r3, #48	; 0x30
 8000b68:	77fb      	strb	r3, [r7, #31]
	/* If number is negative, add a minus sign */
	if(degree < 0){
 8000b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da06      	bge.n	8000b80 <ConsolePrintDeg+0x98>
		buffer[0] = minusMark[0];
 8000b72:	7b3a      	ldrb	r2, [r7, #12]
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	701a      	strb	r2, [r3, #0]
		num = -degree;
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000b7e:	e004      	b.n	8000b8a <ConsolePrintDeg+0xa2>
	}
	else {
		buffer[0] = plusMark[0];
 8000b80:	7c3a      	ldrb	r2, [r7, #16]
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	701a      	strb	r2, [r3, #0]
		num = degree;
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}
	for(uint8_t i = 1; i <= digitNumber - 1; i ++){
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b90:	e020      	b.n	8000bd4 <ConsolePrintDeg+0xec>
			buffer[digitNumber - i] = num%10 + uintZero;
 8000b92:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <ConsolePrintDeg+0x150>)
 8000b96:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9a:	08d9      	lsrs	r1, r3, #3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	7ffa      	ldrb	r2, [r7, #31]
 8000bb6:	440a      	add	r2, r1
 8000bb8:	b2d1      	uxtb	r1, r2
 8000bba:	6a3a      	ldr	r2, [r7, #32]
 8000bbc:	54d1      	strb	r1, [r2, r3]
			num = num/10;
 8000bbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <ConsolePrintDeg+0x150>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 1; i <= digitNumber - 1; i ++){
 8000bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bce:	3301      	adds	r3, #1
 8000bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bd4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8d8      	bhi.n	8000b92 <ConsolePrintDeg+0xaa>
		}
	if(buffer[1] == uintZero){
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	7ffa      	ldrb	r2, [r7, #31]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d116      	bne.n	8000c18 <ConsolePrintDeg+0x130>
		buffer[1] = buffer[2];
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	789a      	ldrb	r2, [r3, #2]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	705a      	strb	r2, [r3, #1]
		buffer[2] = buffer[3];
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	78da      	ldrb	r2, [r3, #3]
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	709a      	strb	r2, [r3, #2]
		buffer[3] = spaceMark[0];
 8000bfa:	7a3a      	ldrb	r2, [r7, #8]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	70da      	strb	r2, [r3, #3]
		if(buffer[1] == uintZero){
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	7ffa      	ldrb	r2, [r7, #31]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d106      	bne.n	8000c18 <ConsolePrintDeg+0x130>
			buffer[1] = buffer[2];
 8000c0a:	6a3b      	ldr	r3, [r7, #32]
 8000c0c:	789a      	ldrb	r2, [r3, #2]
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	705a      	strb	r2, [r3, #1]
			buffer[2] = spaceMark[0];
 8000c12:	7a3a      	ldrb	r2, [r7, #8]
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	709a      	strb	r2, [r3, #2]
		}
	}
	ConsolePrintStr(buffer);
 8000c18:	6a38      	ldr	r0, [r7, #32]
 8000c1a:	f7ff ff51 	bl	8000ac0 <ConsolePrintStr>
	ConsolePrintStr(degMark);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff4c 	bl	8000ac0 <ConsolePrintStr>
 8000c28:	46b5      	mov	sp, r6
}
 8000c2a:	bf00      	nop
 8000c2c:	3734      	adds	r7, #52	; 0x34
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c34:	08006780 	.word	0x08006780
 8000c38:	cccccccd 	.word	0xcccccccd

08000c3c <ConsoleDataReceive>:

/* @brief: Receive incoming data in non blocking mode
 * @param: None
 * @retval: pointer to data received
 * */
uint8_t ConsoleDataReceive(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	return(uartReceiveString());
 8000c40:	f000 fe4c 	bl	80018dc <uartReceiveString>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <setLowSensibility>:

/* @brief:Set low comparison sensibility
 * @param: None
 * @retval: None
 * */
static void setLowSensibility(){
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	xOffset = LO_SENS;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <setLowSensibility+0x1c>)
 8000c52:	220f      	movs	r2, #15
 8000c54:	801a      	strh	r2, [r3, #0]
	yOffset = LO_SENS;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <setLowSensibility+0x20>)
 8000c58:	220f      	movs	r2, #15
 8000c5a:	801a      	strh	r2, [r3, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200001b4 	.word	0x200001b4
 8000c6c:	200001b6 	.word	0x200001b6

08000c70 <setMedSensibility>:

/* @brief:Set medium comparison sensibility
 * @param: None
 * @retval: None
 * */
static void setMedSensibility(){
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	xOffset = MED_SENS;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <setMedSensibility+0x1c>)
 8000c76:	220a      	movs	r2, #10
 8000c78:	801a      	strh	r2, [r3, #0]
	yOffset = MED_SENS;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <setMedSensibility+0x20>)
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	801a      	strh	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200001b4 	.word	0x200001b4
 8000c90:	200001b6 	.word	0x200001b6

08000c94 <setHighSensibility>:

/* @brief:Set medium comparison sensibility
 * @param: None
 * @retval: None
 * */
static void setHighSensibility(){
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	xOffset = HI_SENS;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <setHighSensibility+0x1c>)
 8000c9a:	2205      	movs	r2, #5
 8000c9c:	801a      	strh	r2, [r3, #0]
	yOffset = HI_SENS;
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <setHighSensibility+0x20>)
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	801a      	strh	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200001b4 	.word	0x200001b4
 8000cb4:	200001b6 	.word	0x200001b6

08000cb8 <getXAngle>:
/* @brief: Inform the actual angle of the X axis
 * @param: None
 * @retval: The actual angle read from mpu9265 accelerometer.
 * This could be a value from -90° to 90°
 * */
static int16_t getXAngle(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
	int16_t retAngle;
	uint16_t xAccel = MPUReadAccelXAxis();
 8000cbe:	f000 fd94 	bl	80017ea <MPUReadAccelXAxis>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80bb      	strh	r3, [r7, #4]
	/* See in which plane is inclined to determine how
	 * to calculate the angle*/
	/* Positive angles */
	if(xAccel > ACCEL_REF){
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ccc:	d90d      	bls.n	8000cea <getXAngle+0x32>
		retAngle = 90 - (int16_t)((xAccel-CALIB_POS)/posAngleSteps);
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000cd4:	3b50      	subs	r3, #80	; 0x50
 8000cd6:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <getXAngle+0x54>)
 8000cd8:	8812      	ldrh	r2, [r2, #0]
 8000cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	80fb      	strh	r3, [r7, #6]
 8000ce8:	e009      	b.n	8000cfe <getXAngle+0x46>
	}
	/* Negative angles */
	else{
		retAngle = (int16_t)-xAccel/negAngleSteps;
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	425b      	negs	r3, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <getXAngle+0x58>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfc:	80fb      	strh	r3, [r7, #6]
	}
	return (retAngle);
 8000cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001b8 	.word	0x200001b8
 8000d10:	200001ba 	.word	0x200001ba

08000d14 <getYAngle>:
/* @brief: Inform the actual angle of the Y axis
 * @param: None
 * @retval: The actual angle read from mpu9265 accelerometer.
 * This could be a value from -90° to 90°
 * */
static int16_t getYAngle(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
	int16_t retAngle;
	uint16_t yAccel = MPUReadAccelYAxis();
 8000d1a:	f000 fd83 	bl	8001824 <MPUReadAccelYAxis>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80bb      	strh	r3, [r7, #4]
	/* See in which plane is inclined to determine how
	 * to calculate the angle*/
	/* Positive angles */
	if(yAccel > ACCEL_REF){
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d28:	d90d      	bls.n	8000d46 <getYAngle+0x32>
		retAngle = 90 - (int16_t)((yAccel-CALIB_POS)/posAngleSteps);
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000d30:	3b50      	subs	r3, #80	; 0x50
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <getYAngle+0x54>)
 8000d34:	8812      	ldrh	r2, [r2, #0]
 8000d36:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	80fb      	strh	r3, [r7, #6]
 8000d44:	e009      	b.n	8000d5a <getYAngle+0x46>
	}
	/* Negative angles */
	else{
		retAngle = (int16_t)-yAccel/negAngleSteps;
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	425b      	negs	r3, r3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <getYAngle+0x58>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d58:	80fb      	strh	r3, [r7, #6]
	}
	return (retAngle);
 8000d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001b8 	.word	0x200001b8
 8000d6c:	200001ba 	.word	0x200001ba

08000d70 <digitalLevInit>:

/* @brief: Start digital level FSM in idle state
 * @param: None
 * @retval: None
 * */
void digitalLevInit(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	/* Initialize all the drivers */
	neopixelInit();
 8000d74:	f000 fa0e 	bl	8001194 <neopixelInit>
	debounceFSM_init();
 8000d78:	f7ff fdd6 	bl	8000928 <debounceFSM_init>
	/* Initialize non blocking delays */
	delayInit(&configDelay, maxDelay);
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <digitalLevInit+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	480c      	ldr	r0, [pc, #48]	; (8000db4 <digitalLevInit+0x44>)
 8000d84:	f7ff fe4e 	bl	8000a24 <delayInit>
	delayInit(&sensDelay, maxDelay);
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <digitalLevInit+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <digitalLevInit+0x48>)
 8000d90:	f7ff fe48 	bl	8000a24 <delayInit>
	delayInit(&measureDelay, measureUpdate);
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <digitalLevInit+0x4c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <digitalLevInit+0x50>)
 8000d9c:	f7ff fe42 	bl	8000a24 <delayInit>
	/* Start the device in IDLE mode*/
	actualState = IDLE;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <digitalLevInit+0x54>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	/* Indicate idle mode */
	ConsolePrintStr(idleMsg);
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <digitalLevInit+0x58>)
 8000da8:	f7ff fe8a 	bl	8000ac0 <ConsolePrintStr>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200001bc 	.word	0x200001bc
 8000db4:	20000204 	.word	0x20000204
 8000db8:	20000210 	.word	0x20000210
 8000dbc:	200001c0 	.word	0x200001c0
 8000dc0:	2000021c 	.word	0x2000021c
 8000dc4:	200001fc 	.word	0x200001fc
 8000dc8:	20000004 	.word	0x20000004

08000dcc <digitalLevUpdate>:

/* @brief: Check and pass through the digital level states.
 * @param: None
 * @retval: None
 * */
void digitalLevUpdate(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	/* Update button FSM */
	debounceFSM_update();
 8000dd2:	f7ff fdb9 	bl	8000948 <debounceFSM_update>
	/* Check the digital level FSM */
	switch(actualState){
 8000dd6:	4bbc      	ldr	r3, [pc, #752]	; (80010c8 <digitalLevUpdate+0x2fc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	f200 81bd 	bhi.w	800115a <digitalLevUpdate+0x38e>
 8000de0:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <digitalLevUpdate+0x1c>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000dfd 	.word	0x08000dfd
 8000dec:	08000e25 	.word	0x08000e25
 8000df0:	08001021 	.word	0x08001021
 8000df4:	08001083 	.word	0x08001083
 8000df8:	08001135 	.word	0x08001135
	/***************** IDLE Mode *****************/
	case IDLE:
		/* Reset neopixel matrix*/
		turnAllOff();
 8000dfc:	f000 fc15 	bl	800162a <turnAllOff>
		/* Indicate idle mode */
		turnCenterOn(1, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2001      	movs	r0, #1
 8000e06:	f000 fb71 	bl	80014ec <turnCenterOn>
		if (readKey()){
 8000e0a:	f7ff fd75 	bl	80008f8 <readKey>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 81a9 	beq.w	8001168 <digitalLevUpdate+0x39c>
			actualState = MEASURE;
 8000e16:	4bac      	ldr	r3, [pc, #688]	; (80010c8 <digitalLevUpdate+0x2fc>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
			/* Indicate measure mode */
			ConsolePrintStr(measureMsg);
 8000e1c:	48ab      	ldr	r0, [pc, #684]	; (80010cc <digitalLevUpdate+0x300>)
 8000e1e:	f7ff fe4f 	bl	8000ac0 <ConsolePrintStr>
		}
		break;
 8000e22:	e1a1      	b.n	8001168 <digitalLevUpdate+0x39c>
	/**************** MEASURE Mode ****************/
	case MEASURE:
		/* If key pressed go to idle mode*/
		if (readKey()){
 8000e24:	f7ff fd68 	bl	80008f8 <readKey>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <digitalLevUpdate+0x6e>
			actualState = IDLE;
 8000e2e:	4ba6      	ldr	r3, [pc, #664]	; (80010c8 <digitalLevUpdate+0x2fc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
			/* Indicate idle mode */
			ConsolePrintStr(idleMsg);
 8000e34:	48a6      	ldr	r0, [pc, #664]	; (80010d0 <digitalLevUpdate+0x304>)
 8000e36:	f7ff fe43 	bl	8000ac0 <ConsolePrintStr>
		}
		/* If get data by console, go to configuration mode*/
		if(ConsoleNewData()){
 8000e3a:	f7ff fe39 	bl	8000ab0 <ConsoleNewData>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <digitalLevUpdate+0x84>
			actualState = CONFIG;
 8000e44:	4ba0      	ldr	r3, [pc, #640]	; (80010c8 <digitalLevUpdate+0x2fc>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	701a      	strb	r2, [r3, #0]
			ConsolePrintStr(configMsg);
 8000e4a:	48a2      	ldr	r0, [pc, #648]	; (80010d4 <digitalLevUpdate+0x308>)
 8000e4c:	f7ff fe38 	bl	8000ac0 <ConsolePrintStr>
		}
		/* Take some time to update screen values*/
		if(delayRead(&measureDelay)){
 8000e50:	48a1      	ldr	r0, [pc, #644]	; (80010d8 <digitalLevUpdate+0x30c>)
 8000e52:	f7ff fdf8 	bl	8000a46 <delayRead>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8187 	beq.w	800116c <digitalLevUpdate+0x3a0>
			xAngle = getXAngle() - xZero;
 8000e5e:	f7ff ff2b 	bl	8000cb8 <getXAngle>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b9d      	ldr	r3, [pc, #628]	; (80010dc <digitalLevUpdate+0x310>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	4b9b      	ldr	r3, [pc, #620]	; (80010e0 <digitalLevUpdate+0x314>)
 8000e72:	801a      	strh	r2, [r3, #0]
			yAngle = getYAngle() - yZero;
 8000e74:	f7ff ff4e 	bl	8000d14 <getYAngle>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b99      	ldr	r3, [pc, #612]	; (80010e4 <digitalLevUpdate+0x318>)
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	4b97      	ldr	r3, [pc, #604]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000e8c:	801a      	strh	r2, [r3, #0]
			/* Show in console actual degrees read */
			ConsolePrintStr(xDataMsg);
 8000e8e:	4897      	ldr	r0, [pc, #604]	; (80010ec <digitalLevUpdate+0x320>)
 8000e90:	f7ff fe16 	bl	8000ac0 <ConsolePrintStr>
			ConsolePrintDeg(xAngle);
 8000e94:	4b92      	ldr	r3, [pc, #584]	; (80010e0 <digitalLevUpdate+0x314>)
 8000e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe24 	bl	8000ae8 <ConsolePrintDeg>
			ConsolePrintStr(yDataMsg);
 8000ea0:	4893      	ldr	r0, [pc, #588]	; (80010f0 <digitalLevUpdate+0x324>)
 8000ea2:	f7ff fe0d 	bl	8000ac0 <ConsolePrintStr>
			ConsolePrintDeg(yAngle);
 8000ea6:	4b90      	ldr	r3, [pc, #576]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe1b 	bl	8000ae8 <ConsolePrintDeg>
			/* Show if there is inclination */
			bool moved = false;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
			/* Movement's direction determination */
			if(xAngle > xOffset){
 8000eb6:	4b8a      	ldr	r3, [pc, #552]	; (80010e0 <digitalLevUpdate+0x314>)
 8000eb8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ebc:	4b8d      	ldr	r3, [pc, #564]	; (80010f4 <digitalLevUpdate+0x328>)
 8000ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dd30      	ble.n	8000f28 <digitalLevUpdate+0x15c>
				moved = true;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	71fb      	strb	r3, [r7, #7]
				turnAllOff();
 8000eca:	f000 fbae 	bl	800162a <turnAllOff>
				/* Compound movement: */
				if(yAngle > yOffset){
 8000ece:	4b86      	ldr	r3, [pc, #536]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000ed0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ed4:	4b88      	ldr	r3, [pc, #544]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dd01      	ble.n	8000ee2 <digitalLevUpdate+0x116>
					turnCornerOn00();
 8000ede:	f000 fb2c 	bl	800153a <turnCornerOn00>
				}
				if (yAngle < -yOffset){
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b83      	ldr	r3, [pc, #524]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	da01      	bge.n	8000efa <digitalLevUpdate+0x12e>
					turnCornerOn03();
 8000ef6:	f000 fb3e 	bl	8001576 <turnCornerOn03>
				}
				/* X axis only movements */
				if (-yOffset < yAngle && yAngle < yOffset){
 8000efa:	4b7f      	ldr	r3, [pc, #508]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	425b      	negs	r3, r3
 8000f02:	4a79      	ldr	r2, [pc, #484]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000f04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	da0d      	bge.n	8000f28 <digitalLevUpdate+0x15c>
 8000f0c:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000f0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f12:	4b79      	ldr	r3, [pc, #484]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	da05      	bge.n	8000f28 <digitalLevUpdate+0x15c>
					turnColumnOn(0, 1, 0, 0);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2101      	movs	r1, #1
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 fa8e 	bl	8001444 <turnColumnOn>
				}
			}
			if(xAngle < -xOffset){
 8000f28:	4b6d      	ldr	r3, [pc, #436]	; (80010e0 <digitalLevUpdate+0x314>)
 8000f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <digitalLevUpdate+0x328>)
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	425b      	negs	r3, r3
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	da30      	bge.n	8000f9e <digitalLevUpdate+0x1d2>
				moved = true;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	71fb      	strb	r3, [r7, #7]
				turnAllOff();
 8000f40:	f000 fb73 	bl	800162a <turnAllOff>
				/* Compound movement: */
				if(yAngle > yOffset){
 8000f44:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000f46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f4a:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dd01      	ble.n	8000f58 <digitalLevUpdate+0x18c>
					turnCornerOn30();
 8000f54:	f000 fb2d 	bl	80015b2 <turnCornerOn30>
				}
				if (yAngle < -yOffset){
 8000f58:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b65      	ldr	r3, [pc, #404]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	425b      	negs	r3, r3
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	da01      	bge.n	8000f70 <digitalLevUpdate+0x1a4>
					turnCornerOn33();
 8000f6c:	f000 fb3f 	bl	80015ee <turnCornerOn33>
				}
				/* X axis only movements */
				if (-yOffset < yAngle && yAngle < yOffset){
 8000f70:	4b61      	ldr	r3, [pc, #388]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	425b      	negs	r3, r3
 8000f78:	4a5b      	ldr	r2, [pc, #364]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000f7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	da0d      	bge.n	8000f9e <digitalLevUpdate+0x1d2>
 8000f82:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000f84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f88:	4b5b      	ldr	r3, [pc, #364]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	da05      	bge.n	8000f9e <digitalLevUpdate+0x1d2>
					turnColumnOn(3, 1, 0, 0);
 8000f92:	2300      	movs	r3, #0
 8000f94:	2200      	movs	r2, #0
 8000f96:	2101      	movs	r1, #1
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 fa53 	bl	8001444 <turnColumnOn>
				}
			}
			/* Y axis only movements */
			if((!moved) && (yAngle > yOffset)){
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d011      	beq.n	8000fce <digitalLevUpdate+0x202>
 8000faa:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000fac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fb0:	4b51      	ldr	r3, [pc, #324]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dd09      	ble.n	8000fce <digitalLevUpdate+0x202>
				turnAllOff();
 8000fba:	f000 fb36 	bl	800162a <turnAllOff>
				turnRowOn(0, 1, 0, 0);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 fa67 	bl	8001498 <turnRowOn>
				moved = true;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
			}
			if ((!moved) && (yAngle < -yOffset)){
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d013      	beq.n	8001002 <digitalLevUpdate+0x236>
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <digitalLevUpdate+0x31c>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <digitalLevUpdate+0x32c>)
 8000fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe8:	425b      	negs	r3, r3
 8000fea:	429a      	cmp	r2, r3
 8000fec:	da09      	bge.n	8001002 <digitalLevUpdate+0x236>
				turnAllOff();
 8000fee:	f000 fb1c 	bl	800162a <turnAllOff>
				turnRowOn(3, 1, 0, 0);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 fa4d 	bl	8001498 <turnRowOn>
				moved = true;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
			}
			/* Indicate correct leveling */
			if (!moved){
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80ae 	beq.w	800116c <digitalLevUpdate+0x3a0>
				turnAllOff();
 8001010:	f000 fb0b 	bl	800162a <turnAllOff>
				turnCenterOn(0, 1, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2101      	movs	r1, #1
 8001018:	2000      	movs	r0, #0
 800101a:	f000 fa67 	bl	80014ec <turnCenterOn>
			}
		}
		break;
 800101e:	e0a5      	b.n	800116c <digitalLevUpdate+0x3a0>
	/**************** CONFIG Mode ****************/
	case CONFIG:
		turnAllOff();
 8001020:	f000 fb03 	bl	800162a <turnAllOff>
		/* Indicate configuration mode */
		turnCenterOn(0, 0, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2100      	movs	r1, #0
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fa5f 	bl	80014ec <turnCenterOn>
		/* Start delay count. If 10 seconds pass, the get out of the configuration mode */
		if(delayRead(&configDelay)){
 800102e:	4833      	ldr	r0, [pc, #204]	; (80010fc <digitalLevUpdate+0x330>)
 8001030:	f7ff fd09 	bl	8000a46 <delayRead>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <digitalLevUpdate+0x27a>
			actualState = IDLE;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <digitalLevUpdate+0x2fc>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
			/* Indicate idle mode */
			ConsolePrintStr(idleMsg);
 8001040:	4823      	ldr	r0, [pc, #140]	; (80010d0 <digitalLevUpdate+0x304>)
 8001042:	f7ff fd3d 	bl	8000ac0 <ConsolePrintStr>
		}
		/* See if user enters an option */
		if(ConsoleNewData()){
 8001046:	f7ff fd33 	bl	8000ab0 <ConsoleNewData>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 808f 	beq.w	8001170 <digitalLevUpdate+0x3a4>
			userOption = ConsoleDataReceive();
 8001052:	f7ff fdf3 	bl	8000c3c <ConsoleDataReceive>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <digitalLevUpdate+0x334>)
 800105c:	701a      	strb	r2, [r3, #0]
			if (userOption == SENS_OP){
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <digitalLevUpdate+0x334>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b31      	cmp	r3, #49	; 0x31
 8001064:	d106      	bne.n	8001074 <digitalLevUpdate+0x2a8>
				actualState = SENSIBILITY;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <digitalLevUpdate+0x2fc>)
 8001068:	2203      	movs	r2, #3
 800106a:	701a      	strb	r2, [r3, #0]
				ConsolePrintStr(sensMsg);
 800106c:	4825      	ldr	r0, [pc, #148]	; (8001104 <digitalLevUpdate+0x338>)
 800106e:	f7ff fd27 	bl	8000ac0 <ConsolePrintStr>
			else{
				actualState = REFERENCE;
				ConsolePrintStr(refMsg);
			}
		}
		break;
 8001072:	e07d      	b.n	8001170 <digitalLevUpdate+0x3a4>
				actualState = REFERENCE;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <digitalLevUpdate+0x2fc>)
 8001076:	2204      	movs	r2, #4
 8001078:	701a      	strb	r2, [r3, #0]
				ConsolePrintStr(refMsg);
 800107a:	4823      	ldr	r0, [pc, #140]	; (8001108 <digitalLevUpdate+0x33c>)
 800107c:	f7ff fd20 	bl	8000ac0 <ConsolePrintStr>
		break;
 8001080:	e076      	b.n	8001170 <digitalLevUpdate+0x3a4>
	/**************** SENSIBILITY Mode ****************/
	case SENSIBILITY:
		/* Start delay count. If 10 seconds pass, the get out of the configuration mode */
		if(delayRead(&sensDelay)){
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <digitalLevUpdate+0x340>)
 8001084:	f7ff fcdf 	bl	8000a46 <delayRead>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <digitalLevUpdate+0x2ce>
			actualState = IDLE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <digitalLevUpdate+0x2fc>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
			/* Indicate idle mode */
			ConsolePrintStr(idleMsg);
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <digitalLevUpdate+0x304>)
 8001096:	f7ff fd13 	bl	8000ac0 <ConsolePrintStr>
		}
		if(ConsoleNewData()){
 800109a:	f7ff fd09 	bl	8000ab0 <ConsoleNewData>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d067      	beq.n	8001174 <digitalLevUpdate+0x3a8>
			userOption = ConsoleDataReceive();
 80010a4:	f7ff fdca 	bl	8000c3c <ConsoleDataReceive>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <digitalLevUpdate+0x334>)
 80010ae:	701a      	strb	r2, [r3, #0]
			switch(userOption){
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <digitalLevUpdate+0x334>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b33      	cmp	r3, #51	; 0x33
 80010b6:	d031      	beq.n	800111c <digitalLevUpdate+0x350>
 80010b8:	2b33      	cmp	r3, #51	; 0x33
 80010ba:	dc32      	bgt.n	8001122 <digitalLevUpdate+0x356>
 80010bc:	2b31      	cmp	r3, #49	; 0x31
 80010be:	d027      	beq.n	8001110 <digitalLevUpdate+0x344>
 80010c0:	2b32      	cmp	r3, #50	; 0x32
 80010c2:	d028      	beq.n	8001116 <digitalLevUpdate+0x34a>
 80010c4:	e02d      	b.n	8001122 <digitalLevUpdate+0x356>
 80010c6:	bf00      	nop
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	20000044 	.word	0x20000044
 80010d0:	20000004 	.word	0x20000004
 80010d4:	200000b8 	.word	0x200000b8
 80010d8:	2000021c 	.word	0x2000021c
 80010dc:	200001b0 	.word	0x200001b0
 80010e0:	200001fe 	.word	0x200001fe
 80010e4:	200001b2 	.word	0x200001b2
 80010e8:	20000200 	.word	0x20000200
 80010ec:	200000a0 	.word	0x200000a0
 80010f0:	200000ac 	.word	0x200000ac
 80010f4:	200001b4 	.word	0x200001b4
 80010f8:	200001b6 	.word	0x200001b6
 80010fc:	20000204 	.word	0x20000204
 8001100:	200001fd 	.word	0x200001fd
 8001104:	2000010c 	.word	0x2000010c
 8001108:	20000150 	.word	0x20000150
 800110c:	20000210 	.word	0x20000210
			/* High sensibility */
			case HIGH_SENS_OP:
				setHighSensibility();
 8001110:	f7ff fdc0 	bl	8000c94 <setHighSensibility>
				break;
 8001114:	e007      	b.n	8001126 <digitalLevUpdate+0x35a>
			/* Medium sensibility */
			case MED_SENS_OP:
				setMedSensibility();
 8001116:	f7ff fdab 	bl	8000c70 <setMedSensibility>
				break;
 800111a:	e004      	b.n	8001126 <digitalLevUpdate+0x35a>
			/* Low sensibility */
			case LOW_SENS_OP:
				setLowSensibility();
 800111c:	f7ff fd96 	bl	8000c4c <setLowSensibility>
				break;
 8001120:	e001      	b.n	8001126 <digitalLevUpdate+0x35a>
			/* Set defensive guard */
			default:
				setMedSensibility();
 8001122:	f7ff fda5 	bl	8000c70 <setMedSensibility>
			}
			/* Return to MEASURE Mode*/
			actualState = MEASURE;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <digitalLevUpdate+0x3b4>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
			/* Indicate measure mode */
			ConsolePrintStr(measureMsg);
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <digitalLevUpdate+0x3b8>)
 800112e:	f7ff fcc7 	bl	8000ac0 <ConsolePrintStr>
		}
		break;
 8001132:	e01f      	b.n	8001174 <digitalLevUpdate+0x3a8>
	/**************** REFERENCE Mode ****************/
	case REFERENCE:
		/* Set new references, based on actuals reads */
		xZero = getXAngle();
 8001134:	f7ff fdc0 	bl	8000cb8 <getXAngle>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <digitalLevUpdate+0x3bc>)
 800113e:	801a      	strh	r2, [r3, #0]
		yZero = getYAngle();
 8001140:	f7ff fde8 	bl	8000d14 <getYAngle>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <digitalLevUpdate+0x3c0>)
 800114a:	801a      	strh	r2, [r3, #0]
		/* Return to MEASURE Mode*/
		actualState = MEASURE;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <digitalLevUpdate+0x3b4>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
		/* Indicate measure mode */
		ConsolePrintStr(measureMsg);
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <digitalLevUpdate+0x3b8>)
 8001154:	f7ff fcb4 	bl	8000ac0 <ConsolePrintStr>
		break;
 8001158:	e00d      	b.n	8001176 <digitalLevUpdate+0x3aa>
	/* Defensive guard if unexpected state detected: go to IDLE mode */
	default:
		actualState = IDLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <digitalLevUpdate+0x3b4>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
		/* Indicate idle mode */
		ConsolePrintStr(idleMsg);
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <digitalLevUpdate+0x3c4>)
 8001162:	f7ff fcad 	bl	8000ac0 <ConsolePrintStr>
		break;
 8001166:	e006      	b.n	8001176 <digitalLevUpdate+0x3aa>
		break;
 8001168:	bf00      	nop
 800116a:	e004      	b.n	8001176 <digitalLevUpdate+0x3aa>
		break;
 800116c:	bf00      	nop
 800116e:	e002      	b.n	8001176 <digitalLevUpdate+0x3aa>
		break;
 8001170:	bf00      	nop
 8001172:	e000      	b.n	8001176 <digitalLevUpdate+0x3aa>
		break;
 8001174:	bf00      	nop
	}

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001fc 	.word	0x200001fc
 8001184:	20000044 	.word	0x20000044
 8001188:	200001b0 	.word	0x200001b0
 800118c:	200001b2 	.word	0x200001b2
 8001190:	20000004 	.word	0x20000004

08001194 <neopixelInit>:

/* @brief: initialize all the matrix led turned off
 * @param: none
 * @retval: none
 * */
void neopixelInit(){
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
	// Variable to assign led number
	uint8_t position = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
	// Load each led with 0
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 800119e:	2300      	movs	r3, #0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	e076      	b.n	8001292 <neopixelInit+0xfe>
		for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	717b      	strb	r3, [r7, #5]
 80011a8:	e06d      	b.n	8001286 <neopixelInit+0xf2>
			matrix[i][j].red = 0;
 80011aa:	79b9      	ldrb	r1, [r7, #6]
 80011ac:	797b      	ldrb	r3, [r7, #5]
 80011ae:	4846      	ldr	r0, [pc, #280]	; (80012c8 <neopixelInit+0x134>)
 80011b0:	461a      	mov	r2, r3
 80011b2:	00d2      	lsls	r2, r2, #3
 80011b4:	1ad2      	subs	r2, r2, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	1a5b      	subs	r3, r3, r1
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	4403      	add	r3, r0
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
			matrix[i][j].green = 0;
 80011c6:	79b9      	ldrb	r1, [r7, #6]
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	483f      	ldr	r0, [pc, #252]	; (80012c8 <neopixelInit+0x134>)
 80011cc:	461a      	mov	r2, r3
 80011ce:	00d2      	lsls	r2, r2, #3
 80011d0:	1ad2      	subs	r2, r2, r3
 80011d2:	460b      	mov	r3, r1
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	1a5b      	subs	r3, r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	4403      	add	r3, r0
 80011de:	3301      	adds	r3, #1
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
			matrix[i][j].blue = 0;
 80011e4:	79b9      	ldrb	r1, [r7, #6]
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	4837      	ldr	r0, [pc, #220]	; (80012c8 <neopixelInit+0x134>)
 80011ea:	461a      	mov	r2, r3
 80011ec:	00d2      	lsls	r2, r2, #3
 80011ee:	1ad2      	subs	r2, r2, r3
 80011f0:	460b      	mov	r3, r1
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	1a5b      	subs	r3, r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	4403      	add	r3, r0
 80011fc:	3302      	adds	r3, #2
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			matrix[i][j].row = i;
 8001202:	79b9      	ldrb	r1, [r7, #6]
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	4830      	ldr	r0, [pc, #192]	; (80012c8 <neopixelInit+0x134>)
 8001208:	461a      	mov	r2, r3
 800120a:	00d2      	lsls	r2, r2, #3
 800120c:	1ad2      	subs	r2, r2, r3
 800120e:	460b      	mov	r3, r1
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a5b      	subs	r3, r3, r1
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	4403      	add	r3, r0
 800121a:	3303      	adds	r3, #3
 800121c:	79ba      	ldrb	r2, [r7, #6]
 800121e:	701a      	strb	r2, [r3, #0]
			matrix[i][j].column = j;
 8001220:	79b9      	ldrb	r1, [r7, #6]
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	4828      	ldr	r0, [pc, #160]	; (80012c8 <neopixelInit+0x134>)
 8001226:	461a      	mov	r2, r3
 8001228:	00d2      	lsls	r2, r2, #3
 800122a:	1ad2      	subs	r2, r2, r3
 800122c:	460b      	mov	r3, r1
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a5b      	subs	r3, r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	4403      	add	r3, r0
 8001238:	3304      	adds	r3, #4
 800123a:	797a      	ldrb	r2, [r7, #5]
 800123c:	701a      	strb	r2, [r3, #0]
			matrix[i][j].ledNumber = position;
 800123e:	79b9      	ldrb	r1, [r7, #6]
 8001240:	797b      	ldrb	r3, [r7, #5]
 8001242:	4821      	ldr	r0, [pc, #132]	; (80012c8 <neopixelInit+0x134>)
 8001244:	461a      	mov	r2, r3
 8001246:	00d2      	lsls	r2, r2, #3
 8001248:	1ad2      	subs	r2, r2, r3
 800124a:	460b      	mov	r3, r1
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	4403      	add	r3, r0
 8001256:	3305      	adds	r3, #5
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	701a      	strb	r2, [r3, #0]
			matrix[i][j].ledOn = false;
 800125c:	79b9      	ldrb	r1, [r7, #6]
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	4819      	ldr	r0, [pc, #100]	; (80012c8 <neopixelInit+0x134>)
 8001262:	461a      	mov	r2, r3
 8001264:	00d2      	lsls	r2, r2, #3
 8001266:	1ad2      	subs	r2, r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	4403      	add	r3, r0
 8001274:	3306      	adds	r3, #6
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
			position ++;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	3301      	adds	r3, #1
 800127e:	71fb      	strb	r3, [r7, #7]
		for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 8001280:	797b      	ldrb	r3, [r7, #5]
 8001282:	3301      	adds	r3, #1
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	797b      	ldrb	r3, [r7, #5]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d98e      	bls.n	80011aa <neopixelInit+0x16>
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	3301      	adds	r3, #1
 8001290:	71bb      	strb	r3, [r7, #6]
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d985      	bls.n	80011a4 <neopixelInit+0x10>
		}
	}
	// Put in the send buffer's last memory position a zero data:
	for(uint8_t i = 0; i < DATA_LENGTH; i++){
 8001298:	2300      	movs	r3, #0
 800129a:	713b      	strb	r3, [r7, #4]
 800129c:	e009      	b.n	80012b2 <neopixelInit+0x11e>
		sendBuffer[SEND_BUFF_SIZE-1][i] = 0;
 800129e:	793b      	ldrb	r3, [r7, #4]
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <neopixelInit+0x138>)
 80012a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012a6:	2100      	movs	r1, #0
 80012a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < DATA_LENGTH; i++){
 80012ac:	793b      	ldrb	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	713b      	strb	r3, [r7, #4]
 80012b2:	793b      	ldrb	r3, [r7, #4]
 80012b4:	2b17      	cmp	r3, #23
 80012b6:	d9f2      	bls.n	800129e <neopixelInit+0x10a>
	}
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000228 	.word	0x20000228
 80012cc:	20000298 	.word	0x20000298

080012d0 <loadLedColor>:
 * 			- red: red color intensity (zero is off)
 * 			- green: green color intensity (zero is off)
 * 			- blue: blue color intensity (zero is off)
 * @retval: none
 * */
void loadLedColor(uint8_t row, uint8_t col, uint8_t red, uint8_t green, uint8_t blue){
 80012d0:	b490      	push	{r4, r7}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	71fb      	strb	r3, [r7, #7]
 80012e2:	4603      	mov	r3, r0
 80012e4:	71bb      	strb	r3, [r7, #6]
 80012e6:	460b      	mov	r3, r1
 80012e8:	717b      	strb	r3, [r7, #5]
 80012ea:	4613      	mov	r3, r2
 80012ec:	713b      	strb	r3, [r7, #4]
	uint8_t col_aux = col;
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	73fb      	strb	r3, [r7, #15]
	// Check if parameters are in range
	if((row < MATRIX_ROWS) && (col < MATRIX_COLUMNS)){
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d838      	bhi.n	800136a <loadLedColor+0x9a>
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d835      	bhi.n	800136a <loadLedColor+0x9a>
		if(row == 1 || row == 3){
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d002      	beq.n	800130a <loadLedColor+0x3a>
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d103      	bne.n	8001312 <loadLedColor+0x42>
			col_aux = 3 - col;
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	f1c3 0303 	rsb	r3, r3, #3
 8001310:	73fb      	strb	r3, [r7, #15]
		}
		matrix[row][col_aux].red = red;
 8001312:	79f9      	ldrb	r1, [r7, #7]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	4817      	ldr	r0, [pc, #92]	; (8001374 <loadLedColor+0xa4>)
 8001318:	461a      	mov	r2, r3
 800131a:	00d2      	lsls	r2, r2, #3
 800131c:	1ad2      	subs	r2, r2, r3
 800131e:	460b      	mov	r3, r1
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	1a5b      	subs	r3, r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	4403      	add	r3, r0
 800132a:	797a      	ldrb	r2, [r7, #5]
 800132c:	701a      	strb	r2, [r3, #0]
		matrix[row][col_aux].green = green;
 800132e:	79f9      	ldrb	r1, [r7, #7]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <loadLedColor+0xa4>)
 8001334:	461a      	mov	r2, r3
 8001336:	00d2      	lsls	r2, r2, #3
 8001338:	1ad2      	subs	r2, r2, r3
 800133a:	460b      	mov	r3, r1
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a5b      	subs	r3, r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	4403      	add	r3, r0
 8001346:	3301      	adds	r3, #1
 8001348:	793a      	ldrb	r2, [r7, #4]
 800134a:	701a      	strb	r2, [r3, #0]
		matrix[row][col_aux].blue = blue;
 800134c:	79f9      	ldrb	r1, [r7, #7]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <loadLedColor+0xa4>)
 8001352:	461a      	mov	r2, r3
 8001354:	00d2      	lsls	r2, r2, #3
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	460b      	mov	r3, r1
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	1a5b      	subs	r3, r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	4403      	add	r3, r0
 8001364:	3302      	adds	r3, #2
 8001366:	7e3a      	ldrb	r2, [r7, #24]
 8001368:	701a      	strb	r2, [r3, #0]
	}
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bc90      	pop	{r4, r7}
 8001372:	4770      	bx	lr
 8001374:	20000228 	.word	0x20000228

08001378 <loadNumLedColor>:
 * 			- red: red color intensity (zero is off)
 * 			- green: green color intensity (zero is off)
 * 			- blue: blue color intensity (zero is off)
 * @retval: none
 * */
void loadNumLedColor(uint8_t ledNum, uint8_t red, uint8_t green, uint8_t blue){
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b087      	sub	sp, #28
 800137c:	af02      	add	r7, sp, #8
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	4603      	mov	r3, r0
 800138c:	71bb      	strb	r3, [r7, #6]
 800138e:	460b      	mov	r3, r1
 8001390:	717b      	strb	r3, [r7, #5]
 8001392:	4613      	mov	r3, r2
 8001394:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e025      	b.n	80013e8 <loadNumLedColor+0x70>
			for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 800139c:	2300      	movs	r3, #0
 800139e:	73bb      	strb	r3, [r7, #14]
 80013a0:	e01c      	b.n	80013dc <loadNumLedColor+0x64>
				if(ledNum == matrix[i][j].ledNumber){
 80013a2:	7bf9      	ldrb	r1, [r7, #15]
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <loadNumLedColor+0x80>)
 80013a8:	461a      	mov	r2, r3
 80013aa:	00d2      	lsls	r2, r2, #3
 80013ac:	1ad2      	subs	r2, r2, r3
 80013ae:	460b      	mov	r3, r1
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a5b      	subs	r3, r3, r1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	4403      	add	r3, r0
 80013ba:	3305      	adds	r3, #5
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d108      	bne.n	80013d6 <loadNumLedColor+0x5e>
					loadLedColor(i, j, red, green, blue);
 80013c4:	797c      	ldrb	r4, [r7, #5]
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	7bb9      	ldrb	r1, [r7, #14]
 80013ca:	7bf8      	ldrb	r0, [r7, #15]
 80013cc:	793b      	ldrb	r3, [r7, #4]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4623      	mov	r3, r4
 80013d2:	f7ff ff7d 	bl	80012d0 <loadLedColor>
			for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	3301      	adds	r3, #1
 80013da:	73bb      	strb	r3, [r7, #14]
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d9df      	bls.n	80013a2 <loadNumLedColor+0x2a>
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9d6      	bls.n	800139c <loadNumLedColor+0x24>
				}
			}
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	20000228 	.word	0x20000228

080013fc <turnLedOn>:
 * 			- red: red color intensity (zero is off)
 * 			- green: green color intensity (zero is off)
 * 			- blue: blue color intensity (zero is off)
 * @retval: none
 * */
void turnLedOn(uint8_t row, uint8_t col, uint8_t red, uint8_t green, uint8_t blue){
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af02      	add	r7, sp, #8
 8001402:	4604      	mov	r4, r0
 8001404:	4608      	mov	r0, r1
 8001406:	4611      	mov	r1, r2
 8001408:	461a      	mov	r2, r3
 800140a:	4623      	mov	r3, r4
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	4603      	mov	r3, r0
 8001410:	71bb      	strb	r3, [r7, #6]
 8001412:	460b      	mov	r3, r1
 8001414:	717b      	strb	r3, [r7, #5]
 8001416:	4613      	mov	r3, r2
 8001418:	713b      	strb	r3, [r7, #4]
	// Check if parameters are in range
	if((row < MATRIX_ROWS) && (col < MATRIX_COLUMNS)){
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d80d      	bhi.n	800143c <turnLedOn+0x40>
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d80a      	bhi.n	800143c <turnLedOn+0x40>
		loadLedColor(row, col, red, green, blue);
 8001426:	793c      	ldrb	r4, [r7, #4]
 8001428:	797a      	ldrb	r2, [r7, #5]
 800142a:	79b9      	ldrb	r1, [r7, #6]
 800142c:	79f8      	ldrb	r0, [r7, #7]
 800142e:	7e3b      	ldrb	r3, [r7, #24]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4623      	mov	r3, r4
 8001434:	f7ff ff4c 	bl	80012d0 <loadLedColor>
		turnSecuenceOn();
 8001438:	f000 f91a 	bl	8001670 <turnSecuenceOn>
	}
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}

08001444 <turnColumnOn>:
 * 			- red: red color intensity (zero is off)
 * 			- green: green color intensity (zero is off)
 * 			- blue: blue color intensity (zero is off)
 * @retval: none
 */
void turnColumnOn(uint8_t col, uint8_t red, uint8_t green, uint8_t blue){
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af02      	add	r7, sp, #8
 800144a:	4604      	mov	r4, r0
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4623      	mov	r3, r4
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	4603      	mov	r3, r0
 8001458:	71bb      	strb	r3, [r7, #6]
 800145a:	460b      	mov	r3, r1
 800145c:	717b      	strb	r3, [r7, #5]
 800145e:	4613      	mov	r3, r2
 8001460:	713b      	strb	r3, [r7, #4]
	// Check if parameter is in range
	if  (col < MATRIX_COLUMNS){
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d813      	bhi.n	8001490 <turnColumnOn+0x4c>
		for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e00b      	b.n	8001486 <turnColumnOn+0x42>
			loadLedColor(i, col, red, green, blue);
 800146e:	797c      	ldrb	r4, [r7, #5]
 8001470:	79ba      	ldrb	r2, [r7, #6]
 8001472:	79f9      	ldrb	r1, [r7, #7]
 8001474:	7bf8      	ldrb	r0, [r7, #15]
 8001476:	793b      	ldrb	r3, [r7, #4]
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4623      	mov	r3, r4
 800147c:	f7ff ff28 	bl	80012d0 <loadLedColor>
		for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	3301      	adds	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d9f0      	bls.n	800146e <turnColumnOn+0x2a>
		}
		turnSecuenceOn();
 800148c:	f000 f8f0 	bl	8001670 <turnSecuenceOn>
	}
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}

08001498 <turnRowOn>:
 * 			- red: red color intensity (zero is off)
 * 			- green: green color intensity (zero is off)
 * 			- blue: blue color intensity (zero is off)
 * @retval: none
 */
void turnRowOn(uint8_t row, uint8_t red, uint8_t green, uint8_t blue){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af02      	add	r7, sp, #8
 800149e:	4604      	mov	r4, r0
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	71fb      	strb	r3, [r7, #7]
 80014aa:	4603      	mov	r3, r0
 80014ac:	71bb      	strb	r3, [r7, #6]
 80014ae:	460b      	mov	r3, r1
 80014b0:	717b      	strb	r3, [r7, #5]
 80014b2:	4613      	mov	r3, r2
 80014b4:	713b      	strb	r3, [r7, #4]
	// Check if parameter is in range
	if  (row < MATRIX_ROWS){
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d813      	bhi.n	80014e4 <turnRowOn+0x4c>
		for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e00b      	b.n	80014da <turnRowOn+0x42>
			loadLedColor(row, i, red, green, blue);
 80014c2:	797c      	ldrb	r4, [r7, #5]
 80014c4:	79ba      	ldrb	r2, [r7, #6]
 80014c6:	7bf9      	ldrb	r1, [r7, #15]
 80014c8:	79f8      	ldrb	r0, [r7, #7]
 80014ca:	793b      	ldrb	r3, [r7, #4]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4623      	mov	r3, r4
 80014d0:	f7ff fefe 	bl	80012d0 <loadLedColor>
		for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	3301      	adds	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d9f0      	bls.n	80014c2 <turnRowOn+0x2a>
		}
		turnSecuenceOn();
 80014e0:	f000 f8c6 	bl	8001670 <turnSecuenceOn>
	}
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}

080014ec <turnCenterOn>:
 *			- red: red color intensity (zero is off)
 * 			- green: green color intensity (zero is off)
 * 			- blue: blue color intensity (zero is off)
 * @retval: None
 * */
void turnCenterOn(uint8_t red, uint8_t green, uint8_t blue){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	460b      	mov	r3, r1
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	4613      	mov	r3, r2
 80014fc:	717b      	strb	r3, [r7, #5]
	loadNumLedColor(6, red, green, blue);
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	79ba      	ldrb	r2, [r7, #6]
 8001502:	79f9      	ldrb	r1, [r7, #7]
 8001504:	2006      	movs	r0, #6
 8001506:	f7ff ff37 	bl	8001378 <loadNumLedColor>
	loadNumLedColor(7, red, green, blue);
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	79ba      	ldrb	r2, [r7, #6]
 800150e:	79f9      	ldrb	r1, [r7, #7]
 8001510:	2007      	movs	r0, #7
 8001512:	f7ff ff31 	bl	8001378 <loadNumLedColor>
	loadNumLedColor(10, red, green, blue);
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	79ba      	ldrb	r2, [r7, #6]
 800151a:	79f9      	ldrb	r1, [r7, #7]
 800151c:	200a      	movs	r0, #10
 800151e:	f7ff ff2b 	bl	8001378 <loadNumLedColor>
	loadNumLedColor(11, red, green, blue);
 8001522:	797b      	ldrb	r3, [r7, #5]
 8001524:	79ba      	ldrb	r2, [r7, #6]
 8001526:	79f9      	ldrb	r1, [r7, #7]
 8001528:	200b      	movs	r0, #11
 800152a:	f7ff ff25 	bl	8001378 <loadNumLedColor>
	turnSecuenceOn();
 800152e:	f000 f89f 	bl	8001670 <turnSecuenceOn>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <turnCornerOn00>:

/* @brief: Turn on left-up corner according to the above graphic.
 * @param: None
 * @retval: None
 * */
void turnCornerOn00(){
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af02      	add	r7, sp, #8
	turnLedOn(0, 0, 1, 0, 0);
 8001540:	2300      	movs	r3, #0
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	2201      	movs	r2, #1
 8001548:	2100      	movs	r1, #0
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff ff56 	bl	80013fc <turnLedOn>
	turnLedOn(0, 1, 1, 0, 0);
 8001550:	2300      	movs	r3, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2300      	movs	r3, #0
 8001556:	2201      	movs	r2, #1
 8001558:	2101      	movs	r1, #1
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ff4e 	bl	80013fc <turnLedOn>
	turnLedOn(1, 0, 1, 0, 0);
 8001560:	2300      	movs	r3, #0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2201      	movs	r2, #1
 8001568:	2100      	movs	r1, #0
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff ff46 	bl	80013fc <turnLedOn>
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <turnCornerOn03>:

/* @brief: Turn on right-up corner according to the above graphic.
 * @param: None
 * @retval: None
 * */
void turnCornerOn03(){
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af02      	add	r7, sp, #8
	turnLedOn(2, 0, 1, 0, 0);
 800157c:	2300      	movs	r3, #0
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	2201      	movs	r2, #1
 8001584:	2100      	movs	r1, #0
 8001586:	2002      	movs	r0, #2
 8001588:	f7ff ff38 	bl	80013fc <turnLedOn>
	turnLedOn(3, 0, 1, 0, 0);
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2300      	movs	r3, #0
 8001592:	2201      	movs	r2, #1
 8001594:	2100      	movs	r1, #0
 8001596:	2003      	movs	r0, #3
 8001598:	f7ff ff30 	bl	80013fc <turnLedOn>
	turnLedOn(3, 1, 1, 0, 0);
 800159c:	2300      	movs	r3, #0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	2201      	movs	r2, #1
 80015a4:	2101      	movs	r1, #1
 80015a6:	2003      	movs	r0, #3
 80015a8:	f7ff ff28 	bl	80013fc <turnLedOn>
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <turnCornerOn30>:

/* @brief: Turn on left-down corner according to the above graphic.
 * @param: None
 * @retval: None
 * */
void turnCornerOn30(){
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af02      	add	r7, sp, #8
	turnLedOn(0, 2, 1, 0, 0);
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	2201      	movs	r2, #1
 80015c0:	2102      	movs	r1, #2
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff ff1a 	bl	80013fc <turnLedOn>
	turnLedOn(0, 3, 1, 0, 0);
 80015c8:	2300      	movs	r3, #0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2300      	movs	r3, #0
 80015ce:	2201      	movs	r2, #1
 80015d0:	2103      	movs	r1, #3
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ff12 	bl	80013fc <turnLedOn>
	turnLedOn(1, 3, 1, 0, 0);
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	2201      	movs	r2, #1
 80015e0:	2103      	movs	r1, #3
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff ff0a 	bl	80013fc <turnLedOn>
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <turnCornerOn33>:

/* @brief: Turn on right-down corner according to the above graphic.
 * @param: None
 * @retval: None
 * */
void turnCornerOn33(){
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af02      	add	r7, sp, #8
	turnLedOn(2, 3, 1, 0, 0);
 80015f4:	2300      	movs	r3, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2201      	movs	r2, #1
 80015fc:	2103      	movs	r1, #3
 80015fe:	2002      	movs	r0, #2
 8001600:	f7ff fefc 	bl	80013fc <turnLedOn>
	turnLedOn(3, 2, 1, 0, 0);
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	2201      	movs	r2, #1
 800160c:	2102      	movs	r1, #2
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff fef4 	bl	80013fc <turnLedOn>
	turnLedOn(3, 3, 1, 0, 0);
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	2201      	movs	r2, #1
 800161c:	2103      	movs	r1, #3
 800161e:	2003      	movs	r0, #3
 8001620:	f7ff feec 	bl	80013fc <turnLedOn>
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <turnAllOff>:

/* @brief: Turn all led off
 * @param: None
 * @retval: None
 * */
void turnAllOff(){
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 8001630:	2300      	movs	r3, #0
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	e013      	b.n	800165e <turnAllOff+0x34>
		for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 8001636:	2300      	movs	r3, #0
 8001638:	71bb      	strb	r3, [r7, #6]
 800163a:	e00a      	b.n	8001652 <turnAllOff+0x28>
			loadLedColor(i, j, 0, 0, 0);
 800163c:	79b9      	ldrb	r1, [r7, #6]
 800163e:	79f8      	ldrb	r0, [r7, #7]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2200      	movs	r2, #0
 8001648:	f7ff fe42 	bl	80012d0 <loadLedColor>
		for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	3301      	adds	r3, #1
 8001650:	71bb      	strb	r3, [r7, #6]
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d9f1      	bls.n	800163c <turnAllOff+0x12>
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	3301      	adds	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d9e8      	bls.n	8001636 <turnAllOff+0xc>
		}
	}
	turnSecuenceOn();
 8001664:	f000 f804 	bl	8001670 <turnSecuenceOn>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <turnSecuenceOn>:

/* @brief: Send data buffer to the pwm output.
 * @param: none
 * @retval: none
 * */
void turnSecuenceOn(){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	fillSendBuffer();
 8001674:	f000 f80a 	bl	800168c <fillSendBuffer>
	setPWMData((uint32_t *) sendBuffer, SEND_BUFF_SIZE*DATA_LENGTH);
 8001678:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <turnSecuenceOn+0x18>)
 800167e:	f000 f99b 	bl	80019b8 <setPWMData>
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000298 	.word	0x20000298

0800168c <fillSendBuffer>:

/* @brief: Load the send buffer with the matrix information.
 * @param: none
 * @retval: none
 * */
void fillSendBuffer(){
 800168c:	b490      	push	{r4, r7}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	uint32_t color;
	uint8_t bufIndex = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 8001696:	2300      	movs	r3, #0
 8001698:	71bb      	strb	r3, [r7, #6]
 800169a:	e06f      	b.n	800177c <fillSendBuffer+0xf0>
		for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 800169c:	2300      	movs	r3, #0
 800169e:	717b      	strb	r3, [r7, #5]
 80016a0:	e066      	b.n	8001770 <fillSendBuffer+0xe4>
			// Make the 24 bit data for each buffer data
			color = (matrix[i][j].blue<<16) | (matrix[i][j].red<<8) | matrix[i][j].green;
 80016a2:	79b9      	ldrb	r1, [r7, #6]
 80016a4:	797b      	ldrb	r3, [r7, #5]
 80016a6:	483a      	ldr	r0, [pc, #232]	; (8001790 <fillSendBuffer+0x104>)
 80016a8:	461a      	mov	r2, r3
 80016aa:	00d2      	lsls	r2, r2, #3
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	460b      	mov	r3, r1
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	1a5b      	subs	r3, r3, r1
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	4403      	add	r3, r0
 80016ba:	3302      	adds	r3, #2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0418      	lsls	r0, r3, #16
 80016c0:	79b9      	ldrb	r1, [r7, #6]
 80016c2:	797b      	ldrb	r3, [r7, #5]
 80016c4:	4c32      	ldr	r4, [pc, #200]	; (8001790 <fillSendBuffer+0x104>)
 80016c6:	461a      	mov	r2, r3
 80016c8:	00d2      	lsls	r2, r2, #3
 80016ca:	1ad2      	subs	r2, r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	1a5b      	subs	r3, r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	4423      	add	r3, r4
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	4318      	orrs	r0, r3
 80016de:	79b9      	ldrb	r1, [r7, #6]
 80016e0:	797b      	ldrb	r3, [r7, #5]
 80016e2:	4c2b      	ldr	r4, [pc, #172]	; (8001790 <fillSendBuffer+0x104>)
 80016e4:	461a      	mov	r2, r3
 80016e6:	00d2      	lsls	r2, r2, #3
 80016e8:	1ad2      	subs	r2, r2, r3
 80016ea:	460b      	mov	r3, r1
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	1a5b      	subs	r3, r3, r1
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	4423      	add	r3, r4
 80016f6:	3301      	adds	r3, #1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4303      	orrs	r3, r0
 80016fc:	603b      	str	r3, [r7, #0]
			// Transform the 24 bit data into 24 pwm duties cycles:
			for(int8_t k = 23; k>=0; k--){
 80016fe:	2317      	movs	r3, #23
 8001700:	713b      	strb	r3, [r7, #4]
 8001702:	e028      	b.n	8001756 <fillSendBuffer+0xca>
				if(color&(1<<k)) sendBuffer[bufIndex][k] = 68; 	// Load an one (DC = 68%)
 8001704:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	461a      	mov	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00c      	beq.n	8001732 <fillSendBuffer+0xa6>
 8001718:	79fa      	ldrb	r2, [r7, #7]
 800171a:	f997 1004 	ldrsb.w	r1, [r7, #4]
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <fillSendBuffer+0x108>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	2244      	movs	r2, #68	; 0x44
 800172c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8001730:	e00b      	b.n	800174a <fillSendBuffer+0xbe>
				else sendBuffer[bufIndex][k] = 32;				// Load a zero (DC = 32%)
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	f997 1004 	ldrsb.w	r1, [r7, #4]
 8001738:	4816      	ldr	r0, [pc, #88]	; (8001794 <fillSendBuffer+0x108>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	2220      	movs	r2, #32
 8001746:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for(int8_t k = 23; k>=0; k--){
 800174a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	713b      	strb	r3, [r7, #4]
 8001756:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	dad2      	bge.n	8001704 <fillSendBuffer+0x78>
			}
			// Prevent buffer overflow and zero end mark erase
			if(bufIndex < SEND_BUFF_SIZE - 1){
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d802      	bhi.n	800176a <fillSendBuffer+0xde>
				bufIndex ++;
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	3301      	adds	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
		for (uint8_t j = 0; j < MATRIX_COLUMNS; j++){
 800176a:	797b      	ldrb	r3, [r7, #5]
 800176c:	3301      	adds	r3, #1
 800176e:	717b      	strb	r3, [r7, #5]
 8001770:	797b      	ldrb	r3, [r7, #5]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d995      	bls.n	80016a2 <fillSendBuffer+0x16>
	for (uint8_t i = 0; i < MATRIX_ROWS; i++){
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	3301      	adds	r3, #1
 800177a:	71bb      	strb	r3, [r7, #6]
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d98c      	bls.n	800169c <fillSendBuffer+0x10>
			}
		}
	}
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bc90      	pop	{r4, r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000228 	.word	0x20000228
 8001794:	20000298 	.word	0x20000298

08001798 <MPURead>:
 * 			- reg: MPU register
 * 			- data: pointer to the received data
 * 			- bytes: amount of data to transmit
 * @retval: None
 * */
static void MPURead(uint8_t reg, uint8_t *data, uint8_t bytes){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
	SPIRead(reg, data, bytes);
 80017a8:	79ba      	ldrb	r2, [r7, #6]
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f8ca 	bl	8001948 <SPIRead>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <converData>:
 * @params:
 * 			- msbData: MSB portion of the data
 * 			- lsbData: MSB portion of the data
 * @retval: new value in the uint16_t format
 * */
static uint16_t converData(uint8_t msbData, uint8_t lsbData){
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
	uint16_t result = msbData<<8 | lsbData;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	81fb      	strh	r3, [r7, #14]
	return (result);
 80017dc:	89fb      	ldrh	r3, [r7, #14]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <MPUReadAccelXAxis>:

/* @brief: Get the x axis accelerometer data
 * @param: None
 * @retval: x axis acceleration read
 * */
uint16_t MPUReadAccelXAxis(){
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
	uint8_t byteCount = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	707b      	strb	r3, [r7, #1]
	uint8_t *data = &byteCount;
 80017f4:	1c7b      	adds	r3, r7, #1
 80017f6:	607b      	str	r3, [r7, #4]
	MPURead(ACCEL_XAXIS, data, byteCount);
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	461a      	mov	r2, r3
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	203b      	movs	r0, #59	; 0x3b
 8001800:	f7ff ffca 	bl	8001798 <MPURead>
	uint16_t result = converData(data[0], data[1]);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff ffd3 	bl	80017bc <converData>
 8001816:	4603      	mov	r3, r0
 8001818:	807b      	strh	r3, [r7, #2]
	return(result);
 800181a:	887b      	ldrh	r3, [r7, #2]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <MPUReadAccelYAxis>:

/* @brief: Get the y axis accelerometer data
 * @param: None
 * @retval: y axis acceleration read
 * */
uint16_t MPUReadAccelYAxis(){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	uint8_t byteCount = 2;
 800182a:	2302      	movs	r3, #2
 800182c:	707b      	strb	r3, [r7, #1]
	uint8_t *data = &byteCount;
 800182e:	1c7b      	adds	r3, r7, #1
 8001830:	607b      	str	r3, [r7, #4]
	MPURead(ACCEL_YAXIS, data, byteCount);
 8001832:	787b      	ldrb	r3, [r7, #1]
 8001834:	461a      	mov	r2, r3
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	203d      	movs	r0, #61	; 0x3d
 800183a:	f7ff ffad 	bl	8001798 <MPURead>
	uint16_t result = converData(data[0], data[1]);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f7ff ffb6 	bl	80017bc <converData>
 8001850:	4603      	mov	r3, r0
 8001852:	807b      	strh	r3, [r7, #2]
	return(result);
 8001854:	887b      	ldrh	r3, [r7, #2]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <uartInit>:
uint8_t inBuffer[1];

/* ###################### Wrappers functions ###################### */

/* *************** USART functions *************** */
void uartInit(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, inBuffer, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	4903      	ldr	r1, [pc, #12]	; (8001874 <uartInit+0x14>)
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <uartInit+0x18>)
 800186a:	f003 ffa8 	bl	80057be <HAL_UART_Receive_IT>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000710 	.word	0x20000710
 8001878:	200006c8 	.word	0x200006c8

0800187c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	/* Restart interrupt reception mode*/
	HAL_UART_Receive_IT(&huart3, inBuffer, 1);
 8001884:	2201      	movs	r2, #1
 8001886:	4905      	ldr	r1, [pc, #20]	; (800189c <HAL_UART_RxCpltCallback+0x20>)
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_UART_RxCpltCallback+0x24>)
 800188a:	f003 ff98 	bl	80057be <HAL_UART_Receive_IT>
	uartFlag = true;
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_UART_RxCpltCallback+0x28>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000710 	.word	0x20000710
 80018a0:	200006c8 	.word	0x200006c8
 80018a4:	2000070c 	.word	0x2000070c

080018a8 <uartSendString>:

/* @brief: Send a string chain
 * @param: pointer to data
 * @retval: none*/
void uartSendString(uint8_t *pstring){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	while(*pstring){
 80018b0:	e008      	b.n	80018c4 <uartSendString+0x1c>
		HAL_UART_Transmit(&huart3, pstring, 1, DEFAULT_TIMEOUT);
 80018b2:	2301      	movs	r3, #1
 80018b4:	2201      	movs	r2, #1
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <uartSendString+0x30>)
 80018ba:	f003 feee 	bl	800569a <HAL_UART_Transmit>
		pstring += 1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3301      	adds	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
	while(*pstring){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f2      	bne.n	80018b2 <uartSendString+0xa>
	}
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200006c8 	.word	0x200006c8

080018dc <uartReceiveString>:

/* @brief: receive uart data
 * @param: pointer to store incoming data
 * @retval: None
 * */
uint8_t uartReceiveString(){
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	return(inBuffer[0]);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <uartReceiveString+0x14>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000710 	.word	0x20000710

080018f4 <uartNewData>:

/* @brief: update uart new data flag
 * @param: None
 * @retval: true if new uart data is available
 * */
bool uartNewData(){
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
	bool auxFlag = uartFlag;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <uartNewData+0x20>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
	uartFlag = false;
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <uartNewData+0x20>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
	return(auxFlag);
 8001906:	79fb      	ldrb	r3, [r7, #7]
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	2000070c 	.word	0x2000070c

08001918 <CSEnable>:

/* @brief: Enable SPI device Chip Select to start communication. Pin is PB1
 * @param: None
 * @retval: None
 * */
static void CSEnable(){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2102      	movs	r1, #2
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <CSEnable+0x14>)
 8001922:	f001 fa85 	bl	8002e30 <HAL_GPIO_WritePin>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40020400 	.word	0x40020400

08001930 <CSDisable>:

/* @brief: Disable SPI device Chip Select to end communication. Pin is PB1
 * @param: None
 * @retval: None
 * */
static void CSDisable(){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2102      	movs	r1, #2
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <CSDisable+0x14>)
 800193a:	f001 fa79 	bl	8002e30 <HAL_GPIO_WritePin>
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020400 	.word	0x40020400

08001948 <SPIRead>:
 * 			- reg: register to read.
 * 			- data: pointer to store incoming data
 * 			- length: amount of data to read
 * @retval: None
 * */
void SPIRead(uint8_t reg, uint8_t *data, uint8_t length){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	4613      	mov	r3, r2
 8001956:	71bb      	strb	r3, [r7, #6]
	/* Putting a one in the MSB position of the register direction means
	 in the mpu that it is a read operation */
	reg = reg + 128;
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	3b80      	subs	r3, #128	; 0x80
 800195c:	b2db      	uxtb	r3, r3
 800195e:	71fb      	strb	r3, [r7, #7]
	CSEnable();
 8001960:	f7ff ffda 	bl	8001918 <CSEnable>
	HAL_SPI_Transmit(&hspi1, &reg, 1, DEFAULT_TIMEOUT);
 8001964:	1df9      	adds	r1, r7, #7
 8001966:	2301      	movs	r3, #1
 8001968:	2201      	movs	r2, #1
 800196a:	4808      	ldr	r0, [pc, #32]	; (800198c <SPIRead+0x44>)
 800196c:	f001 ff9b 	bl	80038a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, length, DEFAULT_TIMEOUT);
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	b29a      	uxth	r2, r3
 8001974:	2301      	movs	r3, #1
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <SPIRead+0x44>)
 800197a:	f002 f8d0 	bl	8003b1e <HAL_SPI_Receive>
	CSDisable();
 800197e:	f7ff ffd7 	bl	8001930 <CSDisable>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200005c8 	.word	0x200005c8

08001990 <HAL_TIM_PWM_PulseFinishedCallback>:
/* @brief: Function that the DMA calls when PWM has finished.
 * Weak definition overwrite.
 * @param: Pointer to PMW Timer source.
 * @retval: none.
 * */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	// Stop PWM after one pulse
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001998:	2100      	movs	r1, #0
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800199c:	f002 ff12 	bl	80047c4 <HAL_TIM_PWM_Stop_DMA>
	// Set stop flag
	DMAStoped = 1;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000620 	.word	0x20000620
 80019b4:	2000070d 	.word	0x2000070d

080019b8 <setPWMData>:
 * @param:
 * 			- Pointer to data buffer
 * 			- Size of the buffer
 * @retval: none
 * */
void setPWMData(uint32_t *Data, uint16_t size){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, Data, size);
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	2100      	movs	r1, #0
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <setPWMData+0x30>)
 80019cc:	f002 fd32 	bl	8004434 <HAL_TIM_PWM_Start_DMA>
	// Wait until PWM generation stops
	while(!DMAStoped);
 80019d0:	bf00      	nop
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <setPWMData+0x34>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0fb      	beq.n	80019d2 <setPWMData+0x1a>
	// Reset DMA flag
	DMAStoped = 0;
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <setPWMData+0x34>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000620 	.word	0x20000620
 80019ec:	2000070d 	.word	0x2000070d

080019f0 <APISysInit>:
/* @brief: Configure the Clock system at 80 MHz, initialize the HAL
 * and configure peripherals: GPIOs, TIMER1 with DMA, USART3 and SPI1
 * @params: None
 * @retval: None
 * */
void APISysInit(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	HAL_Init();
 80019f4:	f000 fad2 	bl	8001f9c <HAL_Init>
	SystemClock_Config();
 80019f8:	f000 f80c 	bl	8001a14 <SystemClock_Config>
	MX_GPIO_Init();
 80019fc:	f000 f994 	bl	8001d28 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a00:	f000 f972 	bl	8001ce8 <MX_DMA_Init>
	MX_TIM1_Init();
 8001a04:	f000 f8a6 	bl	8001b54 <MX_TIM1_Init>
	MX_SPI1_Init();
 8001a08:	f000 f86e 	bl	8001ae8 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8001a0c:	f000 f942 	bl	8001c94 <MX_USART3_UART_Init>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b094      	sub	sp, #80	; 0x50
 8001a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1a:	f107 0320 	add.w	r3, r7, #32
 8001a1e:	2230      	movs	r2, #48	; 0x30
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fe88 	bl	8006738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <SystemClock_Config+0xcc>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <SystemClock_Config+0xcc>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6413      	str	r3, [r2, #64]	; 0x40
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <SystemClock_Config+0xcc>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <SystemClock_Config+0xd0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <SystemClock_Config+0xd0>)
 8001a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <SystemClock_Config+0xd0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001a8c:	2350      	movs	r3, #80	; 0x50
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a94:	2304      	movs	r3, #4
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 f9e1 	bl	8002e64 <HAL_RCC_OscConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001aa8:	f000 fa5c 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aac:	230f      	movs	r3, #15
 8001aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fc43 	bl	8003354 <HAL_RCC_ClockConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ad4:	f000 fa46 	bl	8001f64 <Error_Handler>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3750      	adds	r7, #80	; 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40007000 	.word	0x40007000

08001ae8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <MX_SPI1_Init+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b34:	220a      	movs	r2, #10
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b3a:	f001 fe2b 	bl	8003794 <HAL_SPI_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b44:	f000 fa0e 	bl	8001f64 <Error_Handler>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200005c8 	.word	0x200005c8
 8001b50:	40013000 	.word	0x40013000

08001b54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b096      	sub	sp, #88	; 0x58
 8001b58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2220      	movs	r2, #32
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 fdd3 	bl	8006738 <memset>

  htim1.Instance = TIM1;
 8001b92:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001b94:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <MX_TIM1_Init+0x13c>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b98:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001ba6:	2263      	movs	r2, #99	; 0x63
 8001ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bbc:	4833      	ldr	r0, [pc, #204]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001bbe:	f002 fb91 	bl	80042e4 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001bc8:	f000 f9cc 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	482c      	ldr	r0, [pc, #176]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001bda:	f002 ff87 	bl	8004aec <HAL_TIM_ConfigClockSource>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001be4:	f000 f9be 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001be8:	4828      	ldr	r0, [pc, #160]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001bea:	f002 fbca 	bl	8004382 <HAL_TIM_PWM_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001bf4:	f000 f9b6 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c04:	4619      	mov	r1, r3
 8001c06:	4821      	ldr	r0, [pc, #132]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001c08:	f003 fc2c 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001c12:	f000 f9a7 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	; 0x60
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001c3c:	f002 fe94 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c46:	f000 f98d 	bl	8001f64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001c6e:	f003 fc75 	bl	800555c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c78:	f000 f974 	bl	8001f64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <MX_TIM1_Init+0x138>)
 8001c7e:	f7fe fd37 	bl	80006f0 <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3758      	adds	r7, #88	; 0x58
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000620 	.word	0x20000620
 8001c90:	40010000 	.word	0x40010000

08001c94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_USART3_UART_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART3_UART_Init+0x4c>)
 8001ccc:	f003 fc98 	bl	8005600 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f000 f945 	bl	8001f64 <Error_Handler>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200006c8 	.word	0x200006c8
 8001ce4:	40004800 	.word	0x40004800

08001ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_DMA_Init+0x3c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <MX_DMA_Init+0x3c>)
 8001cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_DMA_Init+0x3c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2039      	movs	r0, #57	; 0x39
 8001d10:	f000 fa91 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d14:	2039      	movs	r0, #57	; 0x39
 8001d16:	f000 faaa 	bl	800226e <HAL_NVIC_EnableIRQ>

}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a82      	ldr	r2, [pc, #520]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a7b      	ldr	r2, [pc, #492]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b79      	ldr	r3, [pc, #484]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a74      	ldr	r2, [pc, #464]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a6d      	ldr	r2, [pc, #436]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a66      	ldr	r2, [pc, #408]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a5f      	ldr	r2, [pc, #380]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <MX_GPIO_Init+0x228>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI1_CS_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f244 0183 	movw	r1, #16515	; 0x4083
 8001e08:	4852      	ldr	r0, [pc, #328]	; (8001f54 <MX_GPIO_Init+0x22c>)
 8001e0a:	f001 f811 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2140      	movs	r1, #64	; 0x40
 8001e12:	4851      	ldr	r0, [pc, #324]	; (8001f58 <MX_GPIO_Init+0x230>)
 8001e14:	f001 f80c 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	484b      	ldr	r0, [pc, #300]	; (8001f5c <MX_GPIO_Init+0x234>)
 8001e30:	f000 fe3a 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e34:	2332      	movs	r3, #50	; 0x32
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e44:	230b      	movs	r3, #11
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4843      	ldr	r0, [pc, #268]	; (8001f5c <MX_GPIO_Init+0x234>)
 8001e50:	f000 fe2a 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e54:	2386      	movs	r3, #134	; 0x86
 8001e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e64:	230b      	movs	r3, #11
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	483c      	ldr	r0, [pc, #240]	; (8001f60 <MX_GPIO_Init+0x238>)
 8001e70:	f000 fe1a 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPI1_CS_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI1_CS_Pin|LD3_Pin|LD2_Pin;
 8001e74:	f244 0383 	movw	r3, #16515	; 0x4083
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4831      	ldr	r0, [pc, #196]	; (8001f54 <MX_GPIO_Init+0x22c>)
 8001e8e:	f000 fe0b 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ea4:	230b      	movs	r3, #11
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	4829      	ldr	r0, [pc, #164]	; (8001f54 <MX_GPIO_Init+0x22c>)
 8001eb0:	f000 fdfa 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001eb4:	2340      	movs	r3, #64	; 0x40
 8001eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4823      	ldr	r0, [pc, #140]	; (8001f58 <MX_GPIO_Init+0x230>)
 8001ecc:	f000 fdec 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481d      	ldr	r0, [pc, #116]	; (8001f58 <MX_GPIO_Init+0x230>)
 8001ee4:	f000 fde0 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ee8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001efa:	230a      	movs	r3, #10
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4816      	ldr	r0, [pc, #88]	; (8001f60 <MX_GPIO_Init+0x238>)
 8001f06:	f000 fdcf 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4810      	ldr	r0, [pc, #64]	; (8001f60 <MX_GPIO_Init+0x238>)
 8001f20:	f000 fdc2 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f36:	230b      	movs	r3, #11
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_GPIO_Init+0x230>)
 8001f42:	f000 fdb1 	bl	8002aa8 <HAL_GPIO_Init>

}
 8001f46:	bf00      	nop
 8001f48:	3730      	adds	r7, #48	; 0x30
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020000 	.word	0x40020000

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  __disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x8>
	...

08001f70 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <BSP_PB_GetState+0x28>)
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 ff39 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200001c4 	.word	0x200001c4

08001f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <HAL_Init+0x40>)
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_Init+0x40>)
 8001fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_Init+0x40>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f92b 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7fe faaa 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f943 	bl	800228a <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f90b 	bl	8002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	200001cc 	.word	0x200001cc
 800203c:	200001c8 	.word	0x200001c8

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200001cc 	.word	0x200001cc
 8002064:	20000714 	.word	0x20000714

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000714 	.word	0x20000714

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff3e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff31 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff feda 	bl	8002068 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e099      	b.n	80023f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e0:	e00f      	b.n	8002302 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e2:	f7ff fec1 	bl	8002068 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d908      	bls.n	8002302 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e078      	b.n	80023f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e8      	bne.n	80022e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_DMA_Init+0x158>)
 800231c:	4013      	ands	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	2b04      	cmp	r3, #4
 800235a:	d107      	bne.n	800236c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4313      	orrs	r3, r2
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0307 	bic.w	r3, r3, #7
 8002382:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2b04      	cmp	r3, #4
 8002394:	d117      	bne.n	80023c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00e      	beq.n	80023c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fb01 	bl	80029b0 <DMA_CheckFifoParam>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023c2:	2301      	movs	r3, #1
 80023c4:	e016      	b.n	80023f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fab8 	bl	8002944 <DMA_CalcBaseAndBitshift>
 80023d4:	4603      	mov	r3, r0
 80023d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	223f      	movs	r2, #63	; 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	f010803f 	.word	0xf010803f

08002400 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_DMA_Start_IT+0x26>
 8002422:	2302      	movs	r3, #2
 8002424:	e040      	b.n	80024a8 <HAL_DMA_Start_IT+0xa8>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d12f      	bne.n	800249a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa4a 	bl	80028e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	223f      	movs	r2, #63	; 0x3f
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0216 	orr.w	r2, r2, #22
 800246e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0208 	orr.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e005      	b.n	80024a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7ff fdd3 	bl	8002068 <HAL_GetTick>
 80024c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e052      	b.n	8002588 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002500:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_Abort+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002532:	e013      	b.n	800255c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002534:	f7ff fd98 	bl	8002068 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b05      	cmp	r3, #5
 8002540:	d90c      	bls.n	800255c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e015      	b.n	8002588 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e4      	bne.n	8002534 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	223f      	movs	r2, #63	; 0x3f
 8002570:	409a      	lsls	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d004      	beq.n	80025ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00c      	b.n	80025c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e0:	4b8e      	ldr	r3, [pc, #568]	; (800281c <HAL_DMA_IRQHandler+0x248>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a8e      	ldr	r2, [pc, #568]	; (8002820 <HAL_DMA_IRQHandler+0x24c>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	2208      	movs	r2, #8
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01a      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2208      	movs	r2, #8
 800262e:	409a      	lsls	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2201      	movs	r2, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2201      	movs	r2, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0202 	orr.w	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2204      	movs	r2, #4
 800267c:	409a      	lsls	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2204      	movs	r2, #4
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0204 	orr.w	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2210      	movs	r2, #16
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d043      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03c      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2210      	movs	r2, #16
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d018      	beq.n	8002716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e01f      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e016      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0208 	bic.w	r2, r2, #8
 8002732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2220      	movs	r2, #32
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 808f 	beq.w	8002874 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8087 	beq.w	8002874 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2220      	movs	r2, #32
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d136      	bne.n	80027ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0216 	bic.w	r2, r2, #22
 800278c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_DMA_IRQHandler+0x1da>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	223f      	movs	r2, #63	; 0x3f
 80027c4:	409a      	lsls	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d07e      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
        }
        return;
 80027ea:	e079      	b.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	2b00      	cmp	r3, #0
 800280e:	d031      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e02c      	b.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
 800281a:	bf00      	nop
 800281c:	20000000 	.word	0x20000000
 8002820:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d023      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e01e      	b.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10f      	bne.n	8002864 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0210 	bic.w	r2, r2, #16
 8002852:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	d032      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2205      	movs	r2, #5
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d307      	bcc.n	80028bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f2      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x2cc>
 80028ba:	e000      	b.n	80028be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
 80028de:	e000      	b.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e0:	bf00      	nop
    }
  }
}
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002904:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d108      	bne.n	8002928 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002926:	e007      	b.n	8002938 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3b10      	subs	r3, #16
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800295e:	4a13      	ldr	r2, [pc, #76]	; (80029ac <DMA_CalcBaseAndBitshift+0x68>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d909      	bls.n	8002986 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	1d1a      	adds	r2, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	659a      	str	r2, [r3, #88]	; 0x58
 8002984:	e007      	b.n	8002996 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	aaaaaaab 	.word	0xaaaaaaab
 80029ac:	080067f4 	.word	0x080067f4

080029b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11f      	bne.n	8002a0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d856      	bhi.n	8002a7e <DMA_CheckFifoParam+0xce>
 80029d0:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <DMA_CheckFifoParam+0x28>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	080029fb 	.word	0x080029fb
 80029e0:	080029e9 	.word	0x080029e9
 80029e4:	08002a7f 	.word	0x08002a7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d046      	beq.n	8002a82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e043      	b.n	8002a82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a02:	d140      	bne.n	8002a86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a08:	e03d      	b.n	8002a86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a12:	d121      	bne.n	8002a58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d837      	bhi.n	8002a8a <DMA_CheckFifoParam+0xda>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <DMA_CheckFifoParam+0x70>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a37 	.word	0x08002a37
 8002a28:	08002a31 	.word	0x08002a31
 8002a2c:	08002a49 	.word	0x08002a49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      break;
 8002a34:	e030      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d025      	beq.n	8002a8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a46:	e022      	b.n	8002a8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a50:	d11f      	bne.n	8002a92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a56:	e01c      	b.n	8002a92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d903      	bls.n	8002a66 <DMA_CheckFifoParam+0xb6>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d003      	beq.n	8002a6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a64:	e018      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6a:	e015      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e00b      	b.n	8002a96 <DMA_CheckFifoParam+0xe6>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e00a      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a82:	bf00      	nop
 8002a84:	e008      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e006      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e004      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a96:	bf00      	nop
    }
  } 
  
  return status; 
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	e177      	b.n	8002db4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f040 8166 	bne.w	8002dae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d005      	beq.n	8002afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d130      	bne.n	8002b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 0201 	and.w	r2, r3, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d017      	beq.n	8002b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d123      	bne.n	8002bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	69b9      	ldr	r1, [r7, #24]
 8002be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0203 	and.w	r2, r3, #3
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80c0 	beq.w	8002dae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4a:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_GPIO_Init+0x328>)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_GPIO_Init+0x32c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d037      	beq.n	8002ce6 <HAL_GPIO_Init+0x23e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_GPIO_Init+0x330>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d031      	beq.n	8002ce2 <HAL_GPIO_Init+0x23a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_GPIO_Init+0x334>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02b      	beq.n	8002cde <HAL_GPIO_Init+0x236>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_GPIO_Init+0x338>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_Init+0x232>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_GPIO_Init+0x33c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_Init+0x22e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <HAL_GPIO_Init+0x340>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x22a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x344>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x226>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a51      	ldr	r2, [pc, #324]	; (8002df0 <HAL_GPIO_Init+0x348>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x222>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_GPIO_Init+0x34c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x21e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_GPIO_Init+0x350>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x21a>
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	e012      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	e010      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	e00e      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cce:	2306      	movs	r3, #6
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf8:	4935      	ldr	r1, [pc, #212]	; (8002dd0 <HAL_GPIO_Init+0x328>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5a:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f ae84 	bls.w	8002ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021800 	.word	0x40021800
 8002df0:	40021c00 	.word	0x40021c00
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40022400 	.word	0x40022400
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e267      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d075      	beq.n	8002f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8e:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d112      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	4b7e      	ldr	r3, [pc, #504]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05b      	beq.n	8002f6c <HAL_RCC_OscConfig+0x108>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d157      	bne.n	8002f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e242      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d106      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x74>
 8002eca:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a75      	ldr	r2, [pc, #468]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e01d      	b.n	8002f14 <HAL_RCC_OscConfig+0xb0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x98>
 8002ee2:	4b70      	ldr	r3, [pc, #448]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6f      	ldr	r2, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6c      	ldr	r2, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0xb0>
 8002efc:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a68      	ldr	r2, [pc, #416]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a65      	ldr	r2, [pc, #404]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff f8a4 	bl	8002068 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7ff f8a0 	bl	8002068 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e207      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0xc0>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff f890 	bl	8002068 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7ff f88c 	bl	8002068 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1f3      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5e:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0xe8>
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d11c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x152>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1c7      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4937      	ldr	r1, [pc, #220]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	e03a      	b.n	8003042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd4:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_OscConfig+0x244>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7ff f845 	bl	8002068 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7ff f841 	bl	8002068 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e1a8      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff4:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4925      	ldr	r1, [pc, #148]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
 8003014:	e015      	b.n	8003042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_OscConfig+0x244>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7ff f824 	bl	8002068 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003024:	f7ff f820 	bl	8002068 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e187      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d036      	beq.n	80030bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_RCC_OscConfig+0x248>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7ff f804 	bl	8002068 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003064:	f7ff f800 	bl	8002068 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e167      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x200>
 8003082:	e01b      	b.n	80030bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_OscConfig+0x248>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7fe ffed 	bl	8002068 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	e00e      	b.n	80030b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003092:	f7fe ffe9 	bl	8002068 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d907      	bls.n	80030b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e150      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	42470000 	.word	0x42470000
 80030ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ea      	bne.n	8003092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8097 	beq.w	80031f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b7d      	ldr	r3, [pc, #500]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a7c      	ldr	r2, [pc, #496]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b7a      	ldr	r3, [pc, #488]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b77      	ldr	r3, [pc, #476]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d118      	bne.n	8003138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003106:	4b74      	ldr	r3, [pc, #464]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a73      	ldr	r2, [pc, #460]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003112:	f7fe ffa9 	bl	8002068 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fe ffa5 	bl	8002068 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e10c      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x2ea>
 8003140:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x324>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x30c>
 8003156:	4b5f      	ldr	r3, [pc, #380]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	4b5c      	ldr	r3, [pc, #368]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0x324>
 8003170:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	4b55      	ldr	r3, [pc, #340]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a54      	ldr	r2, [pc, #336]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fe ff6a 	bl	8002068 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fe ff66 	bl	8002068 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0cb      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	4b49      	ldr	r3, [pc, #292]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0ee      	beq.n	8003198 <HAL_RCC_OscConfig+0x334>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031bc:	f7fe ff54 	bl	8002068 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fe ff50 	bl	8002068 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e0b5      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ee      	bne.n	80031c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ec:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a1 	beq.w	8003344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003202:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	d05c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d141      	bne.n	800329a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_OscConfig+0x478>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe ff24 	bl	8002068 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe ff20 	bl	8002068 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e087      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	3b01      	subs	r3, #1
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	491b      	ldr	r1, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326c:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x478>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fef9 	bl	8002068 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe fef5 	bl	8002068 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e05c      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x416>
 8003298:	e054      	b.n	8003344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_RCC_OscConfig+0x478>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fee2 	bl	8002068 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe fede 	bl	8002068 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e045      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x444>
 80032c6:	e03d      	b.n	8003344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e038      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000
 80032dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x4ec>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d028      	beq.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d121      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d11a      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003318:	4293      	cmp	r3, r2
 800331a:	d111      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0cc      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d90c      	bls.n	8003390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b65      	ldr	r3, [pc, #404]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b63      	ldr	r3, [pc, #396]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0b8      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a8:	4b59      	ldr	r3, [pc, #356]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a58      	ldr	r2, [pc, #352]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c0:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a52      	ldr	r2, [pc, #328]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	494d      	ldr	r1, [pc, #308]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d044      	beq.n	8003474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d119      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e07f      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d003      	beq.n	8003412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	2b03      	cmp	r3, #3
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e06f      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e067      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4934      	ldr	r1, [pc, #208]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003444:	f7fe fe10 	bl	8002068 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fe fe0c 	bl	8002068 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e04f      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d20c      	bcs.n	800349c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e032      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4916      	ldr	r1, [pc, #88]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	490e      	ldr	r1, [pc, #56]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034da:	f000 f821 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	490a      	ldr	r1, [pc, #40]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	5ccb      	ldrb	r3, [r1, r3]
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fd70 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023c00 	.word	0x40023c00
 8003510:	40023800 	.word	0x40023800
 8003514:	080067dc 	.word	0x080067dc
 8003518:	20000000 	.word	0x20000000
 800351c:	200001c8 	.word	0x200001c8

08003520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b094      	sub	sp, #80	; 0x50
 8003526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	647b      	str	r3, [r7, #68]	; 0x44
 800352c:	2300      	movs	r3, #0
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003530:	2300      	movs	r3, #0
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003538:	4b79      	ldr	r3, [pc, #484]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b08      	cmp	r3, #8
 8003542:	d00d      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x40>
 8003544:	2b08      	cmp	r3, #8
 8003546:	f200 80e1 	bhi.w	800370c <HAL_RCC_GetSysClockFreq+0x1ec>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x34>
 800354e:	2b04      	cmp	r3, #4
 8003550:	d003      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x3a>
 8003552:	e0db      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_GetSysClockFreq+0x204>)
 8003556:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003558:	e0db      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800355a:	4b73      	ldr	r3, [pc, #460]	; (8003728 <HAL_RCC_GetSysClockFreq+0x208>)
 800355c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800355e:	e0d8      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800356a:	4b6d      	ldr	r3, [pc, #436]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003576:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	099b      	lsrs	r3, r3, #6
 800357c:	2200      	movs	r2, #0
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003588:	633b      	str	r3, [r7, #48]	; 0x30
 800358a:	2300      	movs	r3, #0
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
 800358e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003592:	4622      	mov	r2, r4
 8003594:	462b      	mov	r3, r5
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	0159      	lsls	r1, r3, #5
 80035a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a4:	0150      	lsls	r0, r2, #5
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4621      	mov	r1, r4
 80035ac:	1a51      	subs	r1, r2, r1
 80035ae:	6139      	str	r1, [r7, #16]
 80035b0:	4629      	mov	r1, r5
 80035b2:	eb63 0301 	sbc.w	r3, r3, r1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c4:	4659      	mov	r1, fp
 80035c6:	018b      	lsls	r3, r1, #6
 80035c8:	4651      	mov	r1, sl
 80035ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ce:	4651      	mov	r1, sl
 80035d0:	018a      	lsls	r2, r1, #6
 80035d2:	4651      	mov	r1, sl
 80035d4:	ebb2 0801 	subs.w	r8, r2, r1
 80035d8:	4659      	mov	r1, fp
 80035da:	eb63 0901 	sbc.w	r9, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb18 0303 	adds.w	r3, r8, r3
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	462b      	mov	r3, r5
 8003600:	eb49 0303 	adc.w	r3, r9, r3
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003612:	4629      	mov	r1, r5
 8003614:	024b      	lsls	r3, r1, #9
 8003616:	4621      	mov	r1, r4
 8003618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800361c:	4621      	mov	r1, r4
 800361e:	024a      	lsls	r2, r1, #9
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	2200      	movs	r2, #0
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
 800362a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800362c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003630:	f7fc fddc 	bl	80001ec <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363c:	e058      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	4618      	mov	r0, r3
 8003648:	4611      	mov	r1, r2
 800364a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	2300      	movs	r3, #0
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	f04f 0000 	mov.w	r0, #0
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	0159      	lsls	r1, r3, #5
 8003666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366a:	0150      	lsls	r0, r2, #5
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4641      	mov	r1, r8
 8003672:	ebb2 0a01 	subs.w	sl, r2, r1
 8003676:	4649      	mov	r1, r9
 8003678:	eb63 0b01 	sbc.w	fp, r3, r1
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800368c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003690:	ebb2 040a 	subs.w	r4, r2, sl
 8003694:	eb63 050b 	sbc.w	r5, r3, fp
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	00eb      	lsls	r3, r5, #3
 80036a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a6:	00e2      	lsls	r2, r4, #3
 80036a8:	4614      	mov	r4, r2
 80036aa:	461d      	mov	r5, r3
 80036ac:	4643      	mov	r3, r8
 80036ae:	18e3      	adds	r3, r4, r3
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	464b      	mov	r3, r9
 80036b4:	eb45 0303 	adc.w	r3, r5, r3
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036c6:	4629      	mov	r1, r5
 80036c8:	028b      	lsls	r3, r1, #10
 80036ca:	4621      	mov	r1, r4
 80036cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036d0:	4621      	mov	r1, r4
 80036d2:	028a      	lsls	r2, r1, #10
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	61fa      	str	r2, [r7, #28]
 80036e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e4:	f7fc fd82 	bl	80001ec <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	3301      	adds	r3, #1
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800370a:	e002      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetSysClockFreq+0x204>)
 800370e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003714:	4618      	mov	r0, r3
 8003716:	3750      	adds	r7, #80	; 0x50
 8003718:	46bd      	mov	sp, r7
 800371a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	00f42400 	.word	0x00f42400
 8003728:	007a1200 	.word	0x007a1200

0800372c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <HAL_RCC_GetHCLKFreq+0x14>)
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000000 	.word	0x20000000

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003748:	f7ff fff0 	bl	800372c <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0a9b      	lsrs	r3, r3, #10
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	080067ec 	.word	0x080067ec

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003770:	f7ff ffdc 	bl	800372c <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0b5b      	lsrs	r3, r3, #13
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	080067ec 	.word	0x080067ec

08003794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07b      	b.n	800389e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b6:	d009      	beq.n	80037cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	61da      	str	r2, [r3, #28]
 80037be:	e005      	b.n	80037cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fc fec6 	bl	8000578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	ea42 0103 	orr.w	r1, r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0104 	and.w	r1, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f003 0210 	and.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_SPI_Transmit+0x22>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e126      	b.n	8003b16 <HAL_SPI_Transmit+0x270>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d0:	f7fe fbca 	bl	8002068 <HAL_GetTick>
 80038d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
 80038e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ea:	e10b      	b.n	8003b04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_SPI_Transmit+0x52>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038fc:	e102      	b.n	8003b04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2203      	movs	r2, #3
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003944:	d10f      	bne.n	8003966 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d007      	beq.n	8003984 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398c:	d14b      	bne.n	8003a26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_SPI_Transmit+0xf6>
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d13e      	bne.n	8003a1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	881a      	ldrh	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039c0:	e02b      	b.n	8003a1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d112      	bne.n	80039f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	881a      	ldrh	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80039f4:	e011      	b.n	8003a1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f6:	f7fe fb37 	bl	8002068 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d803      	bhi.n	8003a0e <HAL_SPI_Transmit+0x168>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d102      	bne.n	8003a14 <HAL_SPI_Transmit+0x16e>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a18:	e074      	b.n	8003b04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1ce      	bne.n	80039c2 <HAL_SPI_Transmit+0x11c>
 8003a24:	e04c      	b.n	8003ac0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_SPI_Transmit+0x18e>
 8003a2e:	8afb      	ldrh	r3, [r7, #22]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d140      	bne.n	8003ab6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	7812      	ldrb	r2, [r2, #0]
 8003a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a5a:	e02c      	b.n	8003ab6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d113      	bne.n	8003a92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a90:	e011      	b.n	8003ab6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a92:	f7fe fae9 	bl	8002068 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d803      	bhi.n	8003aaa <HAL_SPI_Transmit+0x204>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Transmit+0x20a>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ab4:	e026      	b.n	8003b04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1cd      	bne.n	8003a5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fbcb 	bl	8004260 <SPI_EndRxTxTransaction>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e000      	b.n	8003b04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b088      	sub	sp, #32
 8003b22:	af02      	add	r7, sp, #8
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d112      	bne.n	8003b62 <HAL_SPI_Receive+0x44>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10e      	bne.n	8003b62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2204      	movs	r2, #4
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f8f1 	bl	8003d40 <HAL_SPI_TransmitReceive>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	e0ea      	b.n	8003d38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_SPI_Receive+0x52>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0e3      	b.n	8003d38 <HAL_SPI_Receive+0x21a>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b78:	f7fe fa76 	bl	8002068 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d002      	beq.n	8003b90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b8e:	e0ca      	b.n	8003d26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_SPI_Receive+0x7e>
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ba0:	e0c1      	b.n	8003d26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be8:	d10f      	bne.n	8003c0a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d007      	beq.n	8003c28 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d162      	bne.n	8003cf6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c30:	e02e      	b.n	8003c90 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d115      	bne.n	8003c6c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f103 020c 	add.w	r2, r3, #12
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c6a:	e011      	b.n	8003c90 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c6c:	f7fe f9fc 	bl	8002068 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d803      	bhi.n	8003c84 <HAL_SPI_Receive+0x166>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d102      	bne.n	8003c8a <HAL_SPI_Receive+0x16c>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c8e:	e04a      	b.n	8003d26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1cb      	bne.n	8003c32 <HAL_SPI_Receive+0x114>
 8003c9a:	e031      	b.n	8003d00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d113      	bne.n	8003cd2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	b292      	uxth	r2, r2
 8003cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd0:	e011      	b.n	8003cf6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd2:	f7fe f9c9 	bl	8002068 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d803      	bhi.n	8003cea <HAL_SPI_Receive+0x1cc>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d102      	bne.n	8003cf0 <HAL_SPI_Receive+0x1d2>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cf4:	e017      	b.n	8003d26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1cd      	bne.n	8003c9c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fa45 	bl	8004194 <SPI_EndRxTransaction>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
 8003d22:	e000      	b.n	8003d26 <HAL_SPI_Receive+0x208>
  }

error :
 8003d24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	; 0x30
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x26>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e18a      	b.n	800407c <HAL_SPI_TransmitReceive+0x33c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d6e:	f7fe f97b 	bl	8002068 <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d84:	887b      	ldrh	r3, [r7, #2]
 8003d86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d00f      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x70>
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d96:	d107      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x68>
 8003da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d003      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dae:	e15b      	b.n	8004068 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x82>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x82>
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dc8:	e14e      	b.n	8004068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d003      	beq.n	8003dde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2205      	movs	r2, #5
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	887a      	ldrh	r2, [r7, #2]
 8003dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	887a      	ldrh	r2, [r7, #2]
 8003e00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	887a      	ldrh	r2, [r7, #2]
 8003e06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d007      	beq.n	8003e32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3a:	d178      	bne.n	8003f2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_SPI_TransmitReceive+0x10a>
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d166      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	881a      	ldrh	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	1c9a      	adds	r2, r3, #2
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6e:	e053      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d11b      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x176>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d016      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0x176>
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d113      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	1c9a      	adds	r2, r3, #2
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d119      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x1b8>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d014      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	b292      	uxth	r2, r2
 8003eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	1c9a      	adds	r2, r3, #2
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ef8:	f7fe f8b6 	bl	8002068 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d807      	bhi.n	8003f18 <HAL_SPI_TransmitReceive+0x1d8>
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d003      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f16:	e0a7      	b.n	8004068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1a6      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x130>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1a1      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x130>
 8003f2c:	e07c      	b.n	8004028 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x1fc>
 8003f36:	8b7b      	ldrh	r3, [r7, #26]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d16b      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f62:	e057      	b.n	8004014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d11c      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x26c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d017      	beq.n	8003fac <HAL_SPI_TransmitReceive+0x26c>
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d114      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d119      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x2ae>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d014      	beq.n	8003fee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fea:	2301      	movs	r3, #1
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fee:	f7fe f83b 	bl	8002068 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d803      	bhi.n	8004006 <HAL_SPI_TransmitReceive+0x2c6>
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d102      	bne.n	800400c <HAL_SPI_TransmitReceive+0x2cc>
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004012:	e029      	b.n	8004068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1a2      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x224>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d19d      	bne.n	8003f64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f917 	bl	8004260 <SPI_EndRxTxTransaction>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d006      	beq.n	8004046 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004044:	e010      	b.n	8004068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	e000      	b.n	8004068 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004078:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800407c:	4618      	mov	r0, r3
 800407e:	3730      	adds	r7, #48	; 0x30
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004094:	f7fd ffe8 	bl	8002068 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	4413      	add	r3, r2
 80040a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040a4:	f7fd ffe0 	bl	8002068 <HAL_GetTick>
 80040a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	015b      	lsls	r3, r3, #5
 80040b0:	0d1b      	lsrs	r3, r3, #20
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	fb02 f303 	mul.w	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ba:	e054      	b.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d050      	beq.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c4:	f7fd ffd0 	bl	8002068 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d902      	bls.n	80040da <SPI_WaitFlagStateUntilTimeout+0x56>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d13d      	bne.n	8004156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f2:	d111      	bne.n	8004118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d004      	beq.n	8004108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d107      	bne.n	8004118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	d10f      	bne.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e017      	b.n	8004186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3b01      	subs	r3, #1
 8004164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	429a      	cmp	r2, r3
 8004182:	d19b      	bne.n	80040bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000000 	.word	0x20000000

08004194 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a8:	d111      	bne.n	80041ce <SPI_EndRxTransaction+0x3a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b2:	d004      	beq.n	80041be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d107      	bne.n	80041ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d12a      	bne.n	800422e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e0:	d012      	beq.n	8004208 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff ff49 	bl	8004084 <SPI_WaitFlagStateUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02d      	beq.n	8004254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e026      	b.n	8004256 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	2101      	movs	r1, #1
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff ff36 	bl	8004084 <SPI_WaitFlagStateUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01a      	beq.n	8004254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e013      	b.n	8004256 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	2101      	movs	r1, #1
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff ff23 	bl	8004084 <SPI_WaitFlagStateUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e000      	b.n	8004256 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <SPI_EndRxTxTransaction+0x7c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <SPI_EndRxTxTransaction+0x80>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0d5b      	lsrs	r3, r3, #21
 8004278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428a:	d112      	bne.n	80042b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff fef4 	bl	8004084 <SPI_WaitFlagStateUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d0f2      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x52>
 80042cc:	e000      	b.n	80042d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80042ce:	bf00      	nop
  }

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000000 	.word	0x20000000
 80042e0:	165e9f81 	.word	0x165e9f81

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc f99c 	bl	8000648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fd8e 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e041      	b.n	8004418 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f839 	bl	8004420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fd3f 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_TIM_PWM_Start_DMA+0x2c>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e022      	b.n	80044a6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d109      	bne.n	800447a <HAL_TIM_PWM_Start_DMA+0x46>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e015      	b.n	80044a6 <HAL_TIM_PWM_Start_DMA+0x72>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d109      	bne.n	8004494 <HAL_TIM_PWM_Start_DMA+0x60>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e008      	b.n	80044a6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
 80044ac:	e171      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_TIM_PWM_Start_DMA+0x94>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e022      	b.n	800450e <HAL_TIM_PWM_Start_DMA+0xda>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d109      	bne.n	80044e2 <HAL_TIM_PWM_Start_DMA+0xae>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e015      	b.n	800450e <HAL_TIM_PWM_Start_DMA+0xda>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d109      	bne.n	80044fc <HAL_TIM_PWM_Start_DMA+0xc8>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e008      	b.n	800450e <HAL_TIM_PWM_Start_DMA+0xda>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d024      	beq.n	800455c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Start_DMA+0xee>
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e137      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004530:	e016      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004540:	e00e      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d104      	bne.n	8004552 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	e006      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800455a:	e001      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e118      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	f200 80ae 	bhi.w	80046c4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080046c5 	.word	0x080046c5
 8004578:	080046c5 	.word	0x080046c5
 800457c:	080046c5 	.word	0x080046c5
 8004580:	080045ed 	.word	0x080045ed
 8004584:	080046c5 	.word	0x080046c5
 8004588:	080046c5 	.word	0x080046c5
 800458c:	080046c5 	.word	0x080046c5
 8004590:	08004635 	.word	0x08004635
 8004594:	080046c5 	.word	0x080046c5
 8004598:	080046c5 	.word	0x080046c5
 800459c:	080046c5 	.word	0x080046c5
 80045a0:	0800467d 	.word	0x0800467d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	4a7c      	ldr	r2, [pc, #496]	; (800479c <HAL_TIM_PWM_Start_DMA+0x368>)
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	4a7b      	ldr	r2, [pc, #492]	; (80047a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	4a7a      	ldr	r2, [pc, #488]	; (80047a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80045ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3334      	adds	r3, #52	; 0x34
 80045c8:	461a      	mov	r2, r3
 80045ca:	887b      	ldrh	r3, [r7, #2]
 80045cc:	f7fd ff18 	bl	8002400 <HAL_DMA_Start_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0db      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e8:	60da      	str	r2, [r3, #12]
      break;
 80045ea:	e06e      	b.n	80046ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_TIM_PWM_Start_DMA+0x368>)
 80045f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	4a69      	ldr	r2, [pc, #420]	; (80047a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	4a68      	ldr	r2, [pc, #416]	; (80047a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004602:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3338      	adds	r3, #56	; 0x38
 8004610:	461a      	mov	r2, r3
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	f7fd fef4 	bl	8002400 <HAL_DMA_Start_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0b7      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004630:	60da      	str	r2, [r3, #12]
      break;
 8004632:	e04a      	b.n	80046ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_TIM_PWM_Start_DMA+0x368>)
 800463a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a57      	ldr	r2, [pc, #348]	; (80047a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a56      	ldr	r2, [pc, #344]	; (80047a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800464a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	333c      	adds	r3, #60	; 0x3c
 8004658:	461a      	mov	r2, r3
 800465a:	887b      	ldrh	r3, [r7, #2]
 800465c:	f7fd fed0 	bl	8002400 <HAL_DMA_Start_IT>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e093      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004678:	60da      	str	r2, [r3, #12]
      break;
 800467a:	e026      	b.n	80046ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_TIM_PWM_Start_DMA+0x368>)
 8004682:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4a45      	ldr	r2, [pc, #276]	; (80047a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800468a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004692:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3340      	adds	r3, #64	; 0x40
 80046a0:	461a      	mov	r2, r3
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	f7fd feac 	bl	8002400 <HAL_DMA_Start_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e06f      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046c0:	60da      	str	r2, [r3, #12]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
      break;
 80046c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d15f      	bne.n	8004790 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fe9d 	bl	8005418 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a31      	ldr	r2, [pc, #196]	; (80047a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <HAL_TIM_PWM_Start_DMA+0x378>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <HAL_TIM_PWM_Start_DMA+0x328>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d01d      	beq.n	800475c <HAL_TIM_PWM_Start_DMA+0x328>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_TIM_PWM_Start_DMA+0x328>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_TIM_PWM_Start_DMA+0x328>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_TIM_PWM_Start_DMA+0x328>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <HAL_TIM_PWM_Start_DMA+0x378>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_TIM_PWM_Start_DMA+0x328>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <HAL_TIM_PWM_Start_DMA+0x388>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIM_PWM_Start_DMA+0x328>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d111      	bne.n	8004780 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b06      	cmp	r3, #6
 800476c:	d010      	beq.n	8004790 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477e:	e007      	b.n	8004790 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	08004d35 	.word	0x08004d35
 80047a0:	08004ddd 	.word	0x08004ddd
 80047a4:	08004ca3 	.word	0x08004ca3
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40001800 	.word	0x40001800

080047c4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	d855      	bhi.n	8004884 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004885 	.word	0x08004885
 80047e8:	08004885 	.word	0x08004885
 80047ec:	08004885 	.word	0x08004885
 80047f0:	08004831 	.word	0x08004831
 80047f4:	08004885 	.word	0x08004885
 80047f8:	08004885 	.word	0x08004885
 80047fc:	08004885 	.word	0x08004885
 8004800:	0800484d 	.word	0x0800484d
 8004804:	08004885 	.word	0x08004885
 8004808:	08004885 	.word	0x08004885
 800480c:	08004885 	.word	0x08004885
 8004810:	08004869 	.word	0x08004869
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004822:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	4618      	mov	r0, r3
 800482a:	f7fd feb1 	bl	8002590 <HAL_DMA_Abort_IT>
      break;
 800482e:	e02c      	b.n	800488a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd fea3 	bl	8002590 <HAL_DMA_Abort_IT>
      break;
 800484a:	e01e      	b.n	800488a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4618      	mov	r0, r3
 8004862:	f7fd fe95 	bl	8002590 <HAL_DMA_Abort_IT>
      break;
 8004866:	e010      	b.n	800488a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004876:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fe87 	bl	8002590 <HAL_DMA_Abort_IT>
      break;
 8004882:	e002      	b.n	800488a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      break;
 8004888:	bf00      	nop
  }

  if (status == HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d161      	bne.n	8004954 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2200      	movs	r2, #0
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fdbd 	bl	8005418 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_TIM_PWM_Stop_DMA+0xee>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d017      	beq.n	80048ec <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10f      	bne.n	80048ec <HAL_TIM_PWM_Stop_DMA+0x128>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	f240 4344 	movw	r3, #1092	; 0x444
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <HAL_TIM_PWM_Stop_DMA+0x128>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <HAL_TIM_PWM_Stop_DMA+0x158>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a1a      	ldr	r2, [r3, #32]
 8004902:	f240 4344 	movw	r3, #1092	; 0x444
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_TIM_PWM_Stop_DMA+0x158>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <HAL_TIM_PWM_Stop_DMA+0x168>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492a:	e013      	b.n	8004954 <HAL_TIM_PWM_Stop_DMA+0x190>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d104      	bne.n	800493c <HAL_TIM_PWM_Stop_DMA+0x178>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493a:	e00b      	b.n	8004954 <HAL_TIM_PWM_Stop_DMA+0x190>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b08      	cmp	r3, #8
 8004940:	d104      	bne.n	800494c <HAL_TIM_PWM_Stop_DMA+0x188>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800494a:	e003      	b.n	8004954 <HAL_TIM_PWM_Stop_DMA+0x190>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40010400 	.word	0x40010400

08004968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e0ae      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	f200 809f 	bhi.w	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049d1 	.word	0x080049d1
 80049a0:	08004ad5 	.word	0x08004ad5
 80049a4:	08004ad5 	.word	0x08004ad5
 80049a8:	08004ad5 	.word	0x08004ad5
 80049ac:	08004a11 	.word	0x08004a11
 80049b0:	08004ad5 	.word	0x08004ad5
 80049b4:	08004ad5 	.word	0x08004ad5
 80049b8:	08004ad5 	.word	0x08004ad5
 80049bc:	08004a53 	.word	0x08004a53
 80049c0:	08004ad5 	.word	0x08004ad5
 80049c4:	08004ad5 	.word	0x08004ad5
 80049c8:	08004ad5 	.word	0x08004ad5
 80049cc:	08004a93 	.word	0x08004a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fad4 	bl	8004f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0208 	orr.w	r2, r2, #8
 80049ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6999      	ldr	r1, [r3, #24]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	619a      	str	r2, [r3, #24]
      break;
 8004a0e:	e064      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fb24 	bl	8005064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	619a      	str	r2, [r3, #24]
      break;
 8004a50:	e043      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fb79 	bl	8005150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0208 	orr.w	r2, r2, #8
 8004a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0204 	bic.w	r2, r2, #4
 8004a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69d9      	ldr	r1, [r3, #28]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
      break;
 8004a90:	e023      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fbcd 	bl	8005238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	021a      	lsls	r2, r3, #8
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	61da      	str	r2, [r3, #28]
      break;
 8004ad2:	e002      	b.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_TIM_ConfigClockSource+0x1c>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e0b4      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x186>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b40:	d03e      	beq.n	8004bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b46:	f200 8087 	bhi.w	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4e:	f000 8086 	beq.w	8004c5e <HAL_TIM_ConfigClockSource+0x172>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d87f      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b70      	cmp	r3, #112	; 0x70
 8004b5a:	d01a      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0xa6>
 8004b5c:	2b70      	cmp	r3, #112	; 0x70
 8004b5e:	d87b      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d050      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x11a>
 8004b64:	2b60      	cmp	r3, #96	; 0x60
 8004b66:	d877      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d03c      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b6c:	2b50      	cmp	r3, #80	; 0x50
 8004b6e:	d873      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d058      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x13a>
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d86f      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d064      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	2b30      	cmp	r3, #48	; 0x30
 8004b7e:	d86b      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d060      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x15a>
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d867      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d05c      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x15a>
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d05a      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x15a>
 8004b90:	e062      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f000 fc19 	bl	80053d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	609a      	str	r2, [r3, #8]
      break;
 8004bbe:	e04f      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f000 fc02 	bl	80053d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be2:	609a      	str	r2, [r3, #8]
      break;
 8004be4:	e03c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 fb76 	bl	80052e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2150      	movs	r1, #80	; 0x50
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fbcf 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004c04:	e02c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 fb95 	bl	8005342 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2160      	movs	r1, #96	; 0x60
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fbbf 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004c24:	e01c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fb56 	bl	80052e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2140      	movs	r1, #64	; 0x40
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fbaf 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e00c      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f000 fba6 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004c56:	e003      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5c:	e000      	b.n	8004c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d107      	bne.n	8004cca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc8:	e02a      	b.n	8004d20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d107      	bne.n	8004ce4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce2:	e01d      	b.n	8004d20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d107      	bne.n	8004cfe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	e010      	b.n	8004d20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d16:	e003      	b.n	8004d20 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff ffb4 	bl	8004c8e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d10b      	bne.n	8004d64 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d136      	bne.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d62:	e031      	b.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10b      	bne.n	8004d86 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2202      	movs	r2, #2
 8004d72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d125      	bne.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d84:	e020      	b.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d10b      	bne.n	8004da8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2204      	movs	r2, #4
 8004d94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d114      	bne.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da6:	e00f      	b.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d10a      	bne.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2208      	movs	r2, #8
 8004db6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d103      	bne.n	8004dc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7fc fde1 	bl	8001990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d103      	bne.n	8004dfc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	771a      	strb	r2, [r3, #28]
 8004dfa:	e019      	b.n	8004e30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d103      	bne.n	8004e0e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	771a      	strb	r2, [r3, #28]
 8004e0c:	e010      	b.n	8004e30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d103      	bne.n	8004e20 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	771a      	strb	r2, [r3, #28]
 8004e1e:	e007      	b.n	8004e30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d102      	bne.n	8004e30 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ff22 	bl	8004c7a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a40      	ldr	r2, [pc, #256]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3d      	ldr	r2, [pc, #244]	; (8004f5c <TIM_Base_SetConfig+0x118>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3c      	ldr	r2, [pc, #240]	; (8004f60 <TIM_Base_SetConfig+0x11c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3b      	ldr	r2, [pc, #236]	; (8004f64 <TIM_Base_SetConfig+0x120>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3a      	ldr	r2, [pc, #232]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d027      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <TIM_Base_SetConfig+0x118>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d023      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2b      	ldr	r2, [pc, #172]	; (8004f60 <TIM_Base_SetConfig+0x11c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01f      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	; (8004f64 <TIM_Base_SetConfig+0x120>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d017      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <TIM_Base_SetConfig+0x128>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00f      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <TIM_Base_SetConfig+0x130>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <TIM_Base_SetConfig+0x134>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a24      	ldr	r2, [pc, #144]	; (8004f7c <TIM_Base_SetConfig+0x138>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d108      	bne.n	8004f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_Base_SetConfig+0xf8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d103      	bne.n	8004f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	615a      	str	r2, [r3, #20]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40010400 	.word	0x40010400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800
 8004f78:	40001800 	.word	0x40001800
 8004f7c:	40001c00 	.word	0x40001c00
 8004f80:	40002000 	.word	0x40002000

08004f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 0302 	bic.w	r3, r3, #2
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a20      	ldr	r2, [pc, #128]	; (800505c <TIM_OC1_SetConfig+0xd8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_OC1_SetConfig+0x64>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <TIM_OC1_SetConfig+0xdc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d10c      	bne.n	8005002 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0308 	bic.w	r3, r3, #8
 8004fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 0304 	bic.w	r3, r3, #4
 8005000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <TIM_OC1_SetConfig+0xd8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_OC1_SetConfig+0x8e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a14      	ldr	r2, [pc, #80]	; (8005060 <TIM_OC1_SetConfig+0xdc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d111      	bne.n	8005036 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40010000 	.word	0x40010000
 8005060:	40010400 	.word	0x40010400

08005064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0210 	bic.w	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0320 	bic.w	r3, r3, #32
 80050ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a22      	ldr	r2, [pc, #136]	; (8005148 <TIM_OC2_SetConfig+0xe4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_OC2_SetConfig+0x68>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a21      	ldr	r2, [pc, #132]	; (800514c <TIM_OC2_SetConfig+0xe8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10d      	bne.n	80050e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a17      	ldr	r2, [pc, #92]	; (8005148 <TIM_OC2_SetConfig+0xe4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC2_SetConfig+0x94>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a16      	ldr	r2, [pc, #88]	; (800514c <TIM_OC2_SetConfig+0xe8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d113      	bne.n	8005120 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400

08005150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a21      	ldr	r2, [pc, #132]	; (8005230 <TIM_OC3_SetConfig+0xe0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC3_SetConfig+0x66>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a20      	ldr	r2, [pc, #128]	; (8005234 <TIM_OC3_SetConfig+0xe4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10d      	bne.n	80051d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a16      	ldr	r2, [pc, #88]	; (8005230 <TIM_OC3_SetConfig+0xe0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_OC3_SetConfig+0x92>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <TIM_OC3_SetConfig+0xe4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d113      	bne.n	800520a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	621a      	str	r2, [r3, #32]
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	40010000 	.word	0x40010000
 8005234:	40010400 	.word	0x40010400

08005238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	031b      	lsls	r3, r3, #12
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <TIM_OC4_SetConfig+0xa4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC4_SetConfig+0x68>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <TIM_OC4_SetConfig+0xa8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d109      	bne.n	80052b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	019b      	lsls	r3, r3, #6
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 030a 	bic.w	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0210 	bic.w	r2, r3, #16
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800537e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f043 0307 	orr.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2201      	movs	r2, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e05a      	b.n	8005532 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a21      	ldr	r2, [pc, #132]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d01d      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a18      	ldr	r2, [pc, #96]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a17      	ldr	r2, [pc, #92]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10c      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	4313      	orrs	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40010400 	.word	0x40010400
 8005554:	40014000 	.word	0x40014000
 8005558:	40001800 	.word	0x40001800

0800555c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005574:	2302      	movs	r3, #2
 8005576:	e03d      	b.n	80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e03f      	b.n	8005692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fb f89c 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fddf 	bl	8006208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b08a      	sub	sp, #40	; 0x28
 800569e:	af02      	add	r7, sp, #8
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d17c      	bne.n	80057b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_Transmit+0x2c>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e075      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Transmit+0x3e>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e06e      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2221      	movs	r2, #33	; 0x21
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ee:	f7fc fcbb 	bl	8002068 <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d108      	bne.n	800571c <HAL_UART_Transmit+0x82>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	e003      	b.n	8005724 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800572c:	e02a      	b.n	8005784 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fb1f 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e036      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800575c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	3302      	adds	r3, #2
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e007      	b.n	8005776 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	3301      	adds	r3, #1
 8005774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1cf      	bne.n	800572e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2200      	movs	r2, #0
 8005796:	2140      	movs	r1, #64	; 0x40
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 faef 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e006      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	4613      	mov	r3, r2
 80057ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d11d      	bne.n	8005814 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_UART_Receive_IT+0x26>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e016      	b.n	8005816 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Receive_IT+0x38>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e00f      	b.n	8005816 <HAL_UART_Receive_IT+0x58>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	461a      	mov	r2, r3
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fb24 	bl	8005e58 <UART_Start_Receive_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	e000      	b.n	8005816 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005814:	2302      	movs	r3, #2
  }
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b0ba      	sub	sp, #232	; 0xe8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005846:	2300      	movs	r3, #0
 8005848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800585e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_UART_IRQHandler+0x66>
 8005872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fc07 	bl	8006092 <UART_Receive_IT>
      return;
 8005884:	e256      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80de 	beq.w	8005a4c <HAL_UART_IRQHandler+0x22c>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80d1 	beq.w	8005a4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <HAL_UART_IRQHandler+0xae>
 80058b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f043 0201 	orr.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_UART_IRQHandler+0xd2>
 80058da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f043 0202 	orr.w	r2, r3, #2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <HAL_UART_IRQHandler+0xf6>
 80058fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0204 	orr.w	r2, r3, #4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <HAL_UART_IRQHandler+0x126>
 8005922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800592e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0208 	orr.w	r2, r3, #8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 81ed 	beq.w	8005d2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_UART_IRQHandler+0x14e>
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fb92 	bl	8006092 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	bf0c      	ite	eq
 800597c:	2301      	moveq	r3, #1
 800597e:	2300      	movne	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d103      	bne.n	800599a <HAL_UART_IRQHandler+0x17a>
 8005992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d04f      	beq.n	8005a3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa9a 	bl	8005ed4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d141      	bne.n	8005a32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3314      	adds	r3, #20
 80059b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1d9      	bne.n	80059ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d013      	beq.n	8005a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	4a7d      	ldr	r2, [pc, #500]	; (8005bfc <HAL_UART_IRQHandler+0x3dc>)
 8005a08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fc fdbe 	bl	8002590 <HAL_DMA_Abort_IT>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	e00e      	b.n	8005a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f990 	bl	8005d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	e00a      	b.n	8005a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f98c 	bl	8005d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e006      	b.n	8005a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f988 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a46:	e170      	b.n	8005d2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	bf00      	nop
    return;
 8005a4a:	e16e      	b.n	8005d2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	f040 814a 	bne.w	8005cea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8143 	beq.w	8005cea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 813c 	beq.w	8005cea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	f040 80b4 	bne.w	8005c00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8140 	beq.w	8005d2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	f080 8139 	bcs.w	8005d2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ace:	f000 8088 	beq.w	8005be2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005afe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1d9      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e1      	bne.n	8005b1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e3      	bne.n	8005b5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e3      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fc fc67 	bl	80024b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f8b6 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bf8:	e099      	b.n	8005d2e <HAL_UART_IRQHandler+0x50e>
 8005bfa:	bf00      	nop
 8005bfc:	08005f9b 	.word	0x08005f9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 808b 	beq.w	8005d32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8086 	beq.w	8005d32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e3      	bne.n	8005c26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c82:	633a      	str	r2, [r7, #48]	; 0x30
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e3      	bne.n	8005c5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0310 	bic.w	r3, r3, #16
 8005cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cc8:	61fa      	str	r2, [r7, #28]
 8005cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e3      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f83e 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ce8:	e023      	b.n	8005d32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_UART_IRQHandler+0x4ea>
 8005cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f95d 	bl	8005fc2 <UART_Transmit_IT>
    return;
 8005d08:	e014      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00e      	beq.n	8005d34 <HAL_UART_IRQHandler+0x514>
 8005d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f99d 	bl	8006062 <UART_EndTransmit_IT>
    return;
 8005d28:	e004      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
    return;
 8005d2a:	bf00      	nop
 8005d2c:	e002      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
      return;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <HAL_UART_IRQHandler+0x514>
      return;
 8005d32:	bf00      	nop
  }
}
 8005d34:	37e8      	adds	r7, #232	; 0xe8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop

08005d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b090      	sub	sp, #64	; 0x40
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8c:	e050      	b.n	8005e30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d04c      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <UART_WaitOnFlagUntilTimeout+0x30>
 8005d9c:	f7fc f964 	bl	8002068 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d241      	bcs.n	8005e30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dcc:	637a      	str	r2, [r7, #52]	; 0x34
 8005dce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3314      	adds	r3, #20
 8005de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3314      	adds	r3, #20
 8005dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e00:	623a      	str	r2, [r7, #32]
 8005e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e00f      	b.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d09f      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3740      	adds	r7, #64	; 0x40
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2222      	movs	r2, #34	; 0x22
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0201 	orr.w	r2, r2, #1
 8005eb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0220 	orr.w	r2, r2, #32
 8005ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b095      	sub	sp, #84	; 0x54
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005efc:	643a      	str	r2, [r7, #64]	; 0x40
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e5      	bne.n	8005edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3314      	adds	r3, #20
 8005f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d119      	bne.n	8005f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0310 	bic.w	r3, r3, #16
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6c:	61ba      	str	r2, [r7, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f8e:	bf00      	nop
 8005f90:	3754      	adds	r7, #84	; 0x54
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff fecb 	bl	8005d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b21      	cmp	r3, #33	; 0x21
 8005fd4:	d13e      	bne.n	8006054 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	d114      	bne.n	800600a <UART_Transmit_IT+0x48>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d110      	bne.n	800600a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ffc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	1c9a      	adds	r2, r3, #2
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	621a      	str	r2, [r3, #32]
 8006008:	e008      	b.n	800601c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6211      	str	r1, [r2, #32]
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4619      	mov	r1, r3
 800602a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10f      	bne.n	8006050 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800603e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800604e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006078:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fe5a 	bl	8005d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b08c      	sub	sp, #48	; 0x30
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b22      	cmp	r3, #34	; 0x22
 80060a4:	f040 80ab 	bne.w	80061fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d117      	bne.n	80060e2 <UART_Receive_IT+0x50>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d113      	bne.n	80060e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
 80060e0:	e026      	b.n	8006130 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f4:	d007      	beq.n	8006106 <UART_Receive_IT+0x74>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <UART_Receive_IT+0x82>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e008      	b.n	8006126 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006120:	b2da      	uxtb	r2, r3
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4619      	mov	r1, r3
 800613e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006140:	2b00      	cmp	r3, #0
 8006142:	d15a      	bne.n	80061fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0220 	bic.w	r2, r2, #32
 8006152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	2b01      	cmp	r3, #1
 8006182:	d135      	bne.n	80061f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	613b      	str	r3, [r7, #16]
   return(result);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	623a      	str	r2, [r7, #32]
 80061ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	69f9      	ldr	r1, [r7, #28]
 80061b0:	6a3a      	ldr	r2, [r7, #32]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d10a      	bne.n	80061e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fdbb 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
 80061ee:	e002      	b.n	80061f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fb fb43 	bl	800187c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e002      	b.n	8006200 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e000      	b.n	8006200 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061fe:	2302      	movs	r3, #2
  }
}
 8006200:	4618      	mov	r0, r3
 8006202:	3730      	adds	r7, #48	; 0x30
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800620c:	b0c0      	sub	sp, #256	; 0x100
 800620e:	af00      	add	r7, sp, #0
 8006210:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	ea40 0301 	orr.w	r3, r0, r1
 8006230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	431a      	orrs	r2, r3
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	431a      	orrs	r2, r3
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006260:	f021 010c 	bic.w	r1, r1, #12
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800626e:	430b      	orrs	r3, r1
 8006270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006282:	6999      	ldr	r1, [r3, #24]
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	ea40 0301 	orr.w	r3, r0, r1
 800628e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b8f      	ldr	r3, [pc, #572]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006298:	429a      	cmp	r2, r3
 800629a:	d005      	beq.n	80062a8 <UART_SetConfig+0xa0>
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b8d      	ldr	r3, [pc, #564]	; (80064d8 <UART_SetConfig+0x2d0>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d104      	bne.n	80062b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fd fa60 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 80062ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062b0:	e003      	b.n	80062ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062b2:	f7fd fa47 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80062b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c4:	f040 810c 	bne.w	80064e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062da:	4622      	mov	r2, r4
 80062dc:	462b      	mov	r3, r5
 80062de:	1891      	adds	r1, r2, r2
 80062e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e2:	415b      	adcs	r3, r3
 80062e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ea:	4621      	mov	r1, r4
 80062ec:	eb12 0801 	adds.w	r8, r2, r1
 80062f0:	4629      	mov	r1, r5
 80062f2:	eb43 0901 	adc.w	r9, r3, r1
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800630a:	4690      	mov	r8, r2
 800630c:	4699      	mov	r9, r3
 800630e:	4623      	mov	r3, r4
 8006310:	eb18 0303 	adds.w	r3, r8, r3
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006318:	462b      	mov	r3, r5
 800631a:	eb49 0303 	adc.w	r3, r9, r3
 800631e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800632e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006332:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006336:	460b      	mov	r3, r1
 8006338:	18db      	adds	r3, r3, r3
 800633a:	653b      	str	r3, [r7, #80]	; 0x50
 800633c:	4613      	mov	r3, r2
 800633e:	eb42 0303 	adc.w	r3, r2, r3
 8006342:	657b      	str	r3, [r7, #84]	; 0x54
 8006344:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006348:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800634c:	f7f9 ff4e 	bl	80001ec <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4b61      	ldr	r3, [pc, #388]	; (80064dc <UART_SetConfig+0x2d4>)
 8006356:	fba3 2302 	umull	r2, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	011c      	lsls	r4, r3, #4
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006362:	2200      	movs	r2, #0
 8006364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006368:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800636c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	1891      	adds	r1, r2, r2
 8006376:	64b9      	str	r1, [r7, #72]	; 0x48
 8006378:	415b      	adcs	r3, r3
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800637c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006380:	4641      	mov	r1, r8
 8006382:	eb12 0a01 	adds.w	sl, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb43 0b01 	adc.w	fp, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006398:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800639c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a0:	4692      	mov	sl, r2
 80063a2:	469b      	mov	fp, r3
 80063a4:	4643      	mov	r3, r8
 80063a6:	eb1a 0303 	adds.w	r3, sl, r3
 80063aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ae:	464b      	mov	r3, r9
 80063b0:	eb4b 0303 	adc.w	r3, fp, r3
 80063b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063cc:	460b      	mov	r3, r1
 80063ce:	18db      	adds	r3, r3, r3
 80063d0:	643b      	str	r3, [r7, #64]	; 0x40
 80063d2:	4613      	mov	r3, r2
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063e2:	f7f9 ff03 	bl	80001ec <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <UART_SetConfig+0x2d4>)
 80063ee:	fba3 2301 	umull	r2, r3, r3, r1
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2264      	movs	r2, #100	; 0x64
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	1acb      	subs	r3, r1, r3
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006402:	4b36      	ldr	r3, [pc, #216]	; (80064dc <UART_SetConfig+0x2d4>)
 8006404:	fba3 2302 	umull	r2, r3, r3, r2
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006410:	441c      	add	r4, r3
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800641c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006420:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	63b9      	str	r1, [r7, #56]	; 0x38
 800642c:	415b      	adcs	r3, r3
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6339      	str	r1, [r7, #48]	; 0x30
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006468:	464b      	mov	r3, r9
 800646a:	460a      	mov	r2, r1
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006480:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006488:	460b      	mov	r3, r1
 800648a:	18db      	adds	r3, r3, r3
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
 800648e:	4613      	mov	r3, r2
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800649a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800649e:	f7f9 fea5 	bl	80001ec <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <UART_SetConfig+0x2d4>)
 80064a8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	2164      	movs	r1, #100	; 0x64
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	3332      	adds	r3, #50	; 0x32
 80064ba:	4a08      	ldr	r2, [pc, #32]	; (80064dc <UART_SetConfig+0x2d4>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f003 0207 	and.w	r2, r3, #7
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4422      	add	r2, r4
 80064ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d0:	e105      	b.n	80066de <UART_SetConfig+0x4d6>
 80064d2:	bf00      	nop
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40011400 	.word	0x40011400
 80064dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064f2:	4642      	mov	r2, r8
 80064f4:	464b      	mov	r3, r9
 80064f6:	1891      	adds	r1, r2, r2
 80064f8:	6239      	str	r1, [r7, #32]
 80064fa:	415b      	adcs	r3, r3
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006502:	4641      	mov	r1, r8
 8006504:	1854      	adds	r4, r2, r1
 8006506:	4649      	mov	r1, r9
 8006508:	eb43 0501 	adc.w	r5, r3, r1
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	00eb      	lsls	r3, r5, #3
 8006516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800651a:	00e2      	lsls	r2, r4, #3
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	4643      	mov	r3, r8
 8006522:	18e3      	adds	r3, r4, r3
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006528:	464b      	mov	r3, r9
 800652a:	eb45 0303 	adc.w	r3, r5, r3
 800652e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800653e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800654e:	4629      	mov	r1, r5
 8006550:	008b      	lsls	r3, r1, #2
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006558:	4621      	mov	r1, r4
 800655a:	008a      	lsls	r2, r1, #2
 800655c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006560:	f7f9 fe44 	bl	80001ec <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4b60      	ldr	r3, [pc, #384]	; (80066ec <UART_SetConfig+0x4e4>)
 800656a:	fba3 2302 	umull	r2, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	011c      	lsls	r4, r3, #4
 8006572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800657c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006580:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	61b9      	str	r1, [r7, #24]
 800658c:	415b      	adcs	r3, r3
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006594:	4641      	mov	r1, r8
 8006596:	1851      	adds	r1, r2, r1
 8006598:	6139      	str	r1, [r7, #16]
 800659a:	4649      	mov	r1, r9
 800659c:	414b      	adcs	r3, r1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065ac:	4659      	mov	r1, fp
 80065ae:	00cb      	lsls	r3, r1, #3
 80065b0:	4651      	mov	r1, sl
 80065b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b6:	4651      	mov	r1, sl
 80065b8:	00ca      	lsls	r2, r1, #3
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	4642      	mov	r2, r8
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065c8:	464b      	mov	r3, r9
 80065ca:	460a      	mov	r2, r1
 80065cc:	eb42 0303 	adc.w	r3, r2, r3
 80065d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80065de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065ec:	4649      	mov	r1, r9
 80065ee:	008b      	lsls	r3, r1, #2
 80065f0:	4641      	mov	r1, r8
 80065f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f6:	4641      	mov	r1, r8
 80065f8:	008a      	lsls	r2, r1, #2
 80065fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065fe:	f7f9 fdf5 	bl	80001ec <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4b39      	ldr	r3, [pc, #228]	; (80066ec <UART_SetConfig+0x4e4>)
 8006608:	fba3 1302 	umull	r1, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	2164      	movs	r1, #100	; 0x64
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	3332      	adds	r3, #50	; 0x32
 800661a:	4a34      	ldr	r2, [pc, #208]	; (80066ec <UART_SetConfig+0x4e4>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006626:	441c      	add	r4, r3
 8006628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662c:	2200      	movs	r2, #0
 800662e:	673b      	str	r3, [r7, #112]	; 0x70
 8006630:	677a      	str	r2, [r7, #116]	; 0x74
 8006632:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	1891      	adds	r1, r2, r2
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	415b      	adcs	r3, r3
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006646:	4641      	mov	r1, r8
 8006648:	1851      	adds	r1, r2, r1
 800664a:	6039      	str	r1, [r7, #0]
 800664c:	4649      	mov	r1, r9
 800664e:	414b      	adcs	r3, r1
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800665e:	4659      	mov	r1, fp
 8006660:	00cb      	lsls	r3, r1, #3
 8006662:	4651      	mov	r1, sl
 8006664:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006668:	4651      	mov	r1, sl
 800666a:	00ca      	lsls	r2, r1, #3
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	4603      	mov	r3, r0
 8006672:	4642      	mov	r2, r8
 8006674:	189b      	adds	r3, r3, r2
 8006676:	66bb      	str	r3, [r7, #104]	; 0x68
 8006678:	464b      	mov	r3, r9
 800667a:	460a      	mov	r2, r1
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	663b      	str	r3, [r7, #96]	; 0x60
 800668c:	667a      	str	r2, [r7, #100]	; 0x64
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800669a:	4649      	mov	r1, r9
 800669c:	008b      	lsls	r3, r1, #2
 800669e:	4641      	mov	r1, r8
 80066a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a4:	4641      	mov	r1, r8
 80066a6:	008a      	lsls	r2, r1, #2
 80066a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066ac:	f7f9 fd9e 	bl	80001ec <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <UART_SetConfig+0x4e4>)
 80066b6:	fba3 1302 	umull	r1, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2164      	movs	r1, #100	; 0x64
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	3332      	adds	r3, #50	; 0x32
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <UART_SetConfig+0x4e4>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4422      	add	r2, r4
 80066dc:	609a      	str	r2, [r3, #8]
}
 80066de:	bf00      	nop
 80066e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ea:	bf00      	nop
 80066ec:	51eb851f 	.word	0x51eb851f

080066f0 <__libc_init_array>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	4d0d      	ldr	r5, [pc, #52]	; (8006728 <__libc_init_array+0x38>)
 80066f4:	4c0d      	ldr	r4, [pc, #52]	; (800672c <__libc_init_array+0x3c>)
 80066f6:	1b64      	subs	r4, r4, r5
 80066f8:	10a4      	asrs	r4, r4, #2
 80066fa:	2600      	movs	r6, #0
 80066fc:	42a6      	cmp	r6, r4
 80066fe:	d109      	bne.n	8006714 <__libc_init_array+0x24>
 8006700:	4d0b      	ldr	r5, [pc, #44]	; (8006730 <__libc_init_array+0x40>)
 8006702:	4c0c      	ldr	r4, [pc, #48]	; (8006734 <__libc_init_array+0x44>)
 8006704:	f000 f820 	bl	8006748 <_init>
 8006708:	1b64      	subs	r4, r4, r5
 800670a:	10a4      	asrs	r4, r4, #2
 800670c:	2600      	movs	r6, #0
 800670e:	42a6      	cmp	r6, r4
 8006710:	d105      	bne.n	800671e <__libc_init_array+0x2e>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	f855 3b04 	ldr.w	r3, [r5], #4
 8006718:	4798      	blx	r3
 800671a:	3601      	adds	r6, #1
 800671c:	e7ee      	b.n	80066fc <__libc_init_array+0xc>
 800671e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006722:	4798      	blx	r3
 8006724:	3601      	adds	r6, #1
 8006726:	e7f2      	b.n	800670e <__libc_init_array+0x1e>
 8006728:	08006804 	.word	0x08006804
 800672c:	08006804 	.word	0x08006804
 8006730:	08006804 	.word	0x08006804
 8006734:	08006808 	.word	0x08006808

08006738 <memset>:
 8006738:	4402      	add	r2, r0
 800673a:	4603      	mov	r3, r0
 800673c:	4293      	cmp	r3, r2
 800673e:	d100      	bne.n	8006742 <memset+0xa>
 8006740:	4770      	bx	lr
 8006742:	f803 1b01 	strb.w	r1, [r3], #1
 8006746:	e7f9      	b.n	800673c <memset+0x4>

08006748 <_init>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr

08006754 <_fini>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr
