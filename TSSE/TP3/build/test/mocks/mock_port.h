/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_PORT_H
#define _MOCK_PORT_H

#include "unity.h"
#include "port.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_port_Init(void);
void mock_port_Destroy(void);
void mock_port_Verify(void);




#define APISysInit_Ignore() APISysInit_CMockIgnore()
void APISysInit_CMockIgnore(void);
#define APISysInit_StopIgnore() APISysInit_CMockStopIgnore()
void APISysInit_CMockStopIgnore(void);
#define APISysInit_Expect() APISysInit_CMockExpect(__LINE__)
void APISysInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define SystemClock_Config_Ignore() SystemClock_Config_CMockIgnore()
void SystemClock_Config_CMockIgnore(void);
#define SystemClock_Config_StopIgnore() SystemClock_Config_CMockStopIgnore()
void SystemClock_Config_CMockStopIgnore(void);
#define SystemClock_Config_Expect() SystemClock_Config_CMockExpect(__LINE__)
void SystemClock_Config_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define MX_GPIO_Init_Ignore() MX_GPIO_Init_CMockIgnore()
void MX_GPIO_Init_CMockIgnore(void);
#define MX_GPIO_Init_StopIgnore() MX_GPIO_Init_CMockStopIgnore()
void MX_GPIO_Init_CMockStopIgnore(void);
#define MX_GPIO_Init_Expect() MX_GPIO_Init_CMockExpect(__LINE__)
void MX_GPIO_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define MX_DMA_Init_Ignore() MX_DMA_Init_CMockIgnore()
void MX_DMA_Init_CMockIgnore(void);
#define MX_DMA_Init_StopIgnore() MX_DMA_Init_CMockStopIgnore()
void MX_DMA_Init_CMockStopIgnore(void);
#define MX_DMA_Init_Expect() MX_DMA_Init_CMockExpect(__LINE__)
void MX_DMA_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define MX_TIM1_Init_Ignore() MX_TIM1_Init_CMockIgnore()
void MX_TIM1_Init_CMockIgnore(void);
#define MX_TIM1_Init_StopIgnore() MX_TIM1_Init_CMockStopIgnore()
void MX_TIM1_Init_CMockStopIgnore(void);
#define MX_TIM1_Init_Expect() MX_TIM1_Init_CMockExpect(__LINE__)
void MX_TIM1_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define MX_SPI1_Init_Ignore() MX_SPI1_Init_CMockIgnore()
void MX_SPI1_Init_CMockIgnore(void);
#define MX_SPI1_Init_StopIgnore() MX_SPI1_Init_CMockStopIgnore()
void MX_SPI1_Init_CMockStopIgnore(void);
#define MX_SPI1_Init_Expect() MX_SPI1_Init_CMockExpect(__LINE__)
void MX_SPI1_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define MX_USART3_UART_Init_Ignore() MX_USART3_UART_Init_CMockIgnore()
void MX_USART3_UART_Init_CMockIgnore(void);
#define MX_USART3_UART_Init_StopIgnore() MX_USART3_UART_Init_CMockStopIgnore()
void MX_USART3_UART_Init_CMockStopIgnore(void);
#define MX_USART3_UART_Init_Expect() MX_USART3_UART_Init_CMockExpect(__LINE__)
void MX_USART3_UART_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define uartInit_Ignore() uartInit_CMockIgnore()
void uartInit_CMockIgnore(void);
#define uartInit_StopIgnore() uartInit_CMockStopIgnore()
void uartInit_CMockStopIgnore(void);
#define uartInit_Expect() uartInit_CMockExpect(__LINE__)
void uartInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define uartReceiveString_IgnoreAndReturn(cmock_retval) uartReceiveString_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uartReceiveString_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define uartReceiveString_StopIgnore() uartReceiveString_CMockStopIgnore()
void uartReceiveString_CMockStopIgnore(void);
#define uartReceiveString_ExpectAndReturn(cmock_retval) uartReceiveString_CMockExpectAndReturn(__LINE__, cmock_retval)
void uartReceiveString_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define uartSendString_Ignore() uartSendString_CMockIgnore()
void uartSendString_CMockIgnore(void);
#define uartSendString_StopIgnore() uartSendString_CMockStopIgnore()
void uartSendString_CMockStopIgnore(void);
#define uartSendString_Expect(pstring) uartSendString_CMockExpect(__LINE__, pstring)
void uartSendString_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* pstring);
#define uartSendString_ReturnThruPtr_pstring(pstring) uartSendString_CMockReturnMemThruPtr_pstring(__LINE__, pstring, sizeof(uint8_t))
#define uartSendString_ReturnArrayThruPtr_pstring(pstring, cmock_len) uartSendString_CMockReturnMemThruPtr_pstring(__LINE__, pstring, cmock_len * sizeof(*pstring))
#define uartSendString_ReturnMemThruPtr_pstring(pstring, cmock_size) uartSendString_CMockReturnMemThruPtr_pstring(__LINE__, pstring, cmock_size)
void uartSendString_CMockReturnMemThruPtr_pstring(UNITY_LINE_TYPE cmock_line, uint8_t* pstring, size_t cmock_size);
#define uartSendString_IgnoreArg_pstring() uartSendString_CMockIgnoreArg_pstring(__LINE__)
void uartSendString_CMockIgnoreArg_pstring(UNITY_LINE_TYPE cmock_line);
#define uartNewData_IgnoreAndReturn(cmock_retval) uartNewData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uartNewData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define uartNewData_StopIgnore() uartNewData_CMockStopIgnore()
void uartNewData_CMockStopIgnore(void);
#define uartNewData_ExpectAndReturn(cmock_retval) uartNewData_CMockExpectAndReturn(__LINE__, cmock_retval)
void uartNewData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define SPIRead_IgnoreAndReturn(cmock_retval) SPIRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void SPIRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define SPIRead_StopIgnore() SPIRead_CMockStopIgnore()
void SPIRead_CMockStopIgnore(void);
#define SPIRead_ExpectAndReturn(reg, data, length, cmock_retval) SPIRead_CMockExpectAndReturn(__LINE__, reg, data, length, cmock_retval)
void SPIRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t reg, uint8_t* data, uint8_t length, _Bool cmock_to_return);
#define SPIRead_ReturnThruPtr_data(data) SPIRead_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(uint8_t))
#define SPIRead_ReturnArrayThruPtr_data(data, cmock_len) SPIRead_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define SPIRead_ReturnMemThruPtr_data(data, cmock_size) SPIRead_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void SPIRead_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, uint8_t* data, size_t cmock_size);
#define SPIRead_IgnoreArg_reg() SPIRead_CMockIgnoreArg_reg(__LINE__)
void SPIRead_CMockIgnoreArg_reg(UNITY_LINE_TYPE cmock_line);
#define SPIRead_IgnoreArg_data() SPIRead_CMockIgnoreArg_data(__LINE__)
void SPIRead_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define SPIRead_IgnoreArg_length() SPIRead_CMockIgnoreArg_length(__LINE__)
void SPIRead_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define SPIWrite_IgnoreAndReturn(cmock_retval) SPIWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void SPIWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define SPIWrite_StopIgnore() SPIWrite_CMockStopIgnore()
void SPIWrite_CMockStopIgnore(void);
#define SPIWrite_ExpectAndReturn(reg, command, cmock_retval) SPIWrite_CMockExpectAndReturn(__LINE__, reg, command, cmock_retval)
void SPIWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t reg, uint8_t command, _Bool cmock_to_return);
#define SPIWrite_IgnoreArg_reg() SPIWrite_CMockIgnoreArg_reg(__LINE__)
void SPIWrite_CMockIgnoreArg_reg(UNITY_LINE_TYPE cmock_line);
#define SPIWrite_IgnoreArg_command() SPIWrite_CMockIgnoreArg_command(__LINE__)
void SPIWrite_CMockIgnoreArg_command(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
