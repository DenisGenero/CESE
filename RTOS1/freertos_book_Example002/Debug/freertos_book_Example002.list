
freertos_book_Example002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800616c  0800616c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006174  08006174  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800617c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00004554  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200045d0  200045d0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4fe  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357b  00000000  00000000  0003a5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0003db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d8  00000000  00000000  0003f148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004998  00000000  00000000  00040620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001933f  00000000  00000000  00044fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec640  00000000  00000000  0005e2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a937  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065b8  00000000  00000000  0014a988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005fd8 	.word	0x08005fd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08005fd8 	.word	0x08005fd8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	const char *pcTextForMain = "freertos_book_Example002 is running: Using the task parameter\r\n\n";
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <main+0xb8>)
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fd95 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f863 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f971 	bl	800088c <MX_GPIO_Init>
  MX_ETH_Init();
 80005aa:	f000 f8c9 	bl	8000740 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ae:	f000 f915 	bl	80007dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b2:	f000 f93d 	bl	8000830 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
	vPrintString( pcTextForMain );
 80005b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005b8:	f000 fc8e 	bl	8000ed8 <vPrintString>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <main+0xbc>)
 80005be:	1d3c      	adds	r4, r7, #4
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fb29 	bl	8003c26 <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <main+0xc0>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	BaseType_t ret;

	/* Task 1 thread at priority 1 */
	ret = xTaskCreate( vTaskFunction,				/* Pointer to the function thats implement the task. */
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0xc4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2200      	movs	r2, #0
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ea:	491c      	ldr	r1, [pc, #112]	; (800065c <main+0xc8>)
 80005ec:	481c      	ldr	r0, [pc, #112]	; (8000660 <main+0xcc>)
 80005ee:	f003 fc09 	bl	8003e04 <xTaskCreate>
 80005f2:	6238      	str	r0, [r7, #32]
	                   (void*)pcTextForTask1,    	/* Pass the text to be printed in as the task parameter. */
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );                   	/* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d00a      	beq.n	8000610 <main+0x7c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fe:	f383 8811 	msr	BASEPRI, r3
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800060c:	bf00      	nop
 800060e:	e7fe      	b.n	800060e <main+0x7a>

	/* Task 2 thread at priority 1 */
	ret = xTaskCreate( vTaskFunction,				/* Pointer to the function thats implement the task. */
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <main+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	9201      	str	r2, [sp, #4]
 8000618:	2201      	movs	r2, #1
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000620:	4911      	ldr	r1, [pc, #68]	; (8000668 <main+0xd4>)
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <main+0xcc>)
 8000624:	f003 fbee 	bl	8003e04 <xTaskCreate>
 8000628:	6238      	str	r0, [r7, #32]
	                   (void*)pcTextForTask2,    	/* Pass the text to be printed in as the task parameter. */
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );                   	/* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d00a      	beq.n	8000646 <main+0xb2>
	__asm volatile
 8000630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000634:	f383 8811 	msr	BASEPRI, r3
 8000638:	f3bf 8f6f 	isb	sy
 800063c:	f3bf 8f4f 	dsb	sy
 8000640:	61bb      	str	r3, [r7, #24]
}
 8000642:	bf00      	nop
 8000644:	e7fe      	b.n	8000644 <main+0xb0>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f003 fae7 	bl	8003c18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0xb6>
 800064c:	08006024 	.word	0x08006024
 8000650:	08006078 	.word	0x08006078
 8000654:	20000810 	.word	0x20000810
 8000658:	20000000 	.word	0x20000000
 800065c:	08006068 	.word	0x08006068
 8000660:	080009e9 	.word	0x080009e9
 8000664:	20000004 	.word	0x20000004
 8000668:	08006070 	.word	0x08006070

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fe65 	bl	800534a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e0:	23a8      	movs	r3, #168	; 0xa8
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fc3d 	bl	8001f70 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006fc:	f000 f9a4 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fe9e 	bl	8002460 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072a:	f000 f98d 	bl	8000a48 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ETH_Init+0x84>)
 8000746:	4a20      	ldr	r2, [pc, #128]	; (80007c8 <MX_ETH_Init+0x88>)
 8000748:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_ETH_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_ETH_Init+0x8c>)
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ETH_Init+0x8c>)
 8000758:	22e1      	movs	r2, #225	; 0xe1
 800075a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_ETH_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ETH_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_ETH_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_ETH_Init+0x84>)
 8000770:	4a16      	ldr	r2, [pc, #88]	; (80007cc <MX_ETH_Init+0x8c>)
 8000772:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_ETH_Init+0x84>)
 8000776:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800077a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ETH_Init+0x84>)
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <MX_ETH_Init+0x90>)
 8000780:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_ETH_Init+0x84>)
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_ETH_Init+0x94>)
 8000786:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_ETH_Init+0x84>)
 800078a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800078e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_ETH_Init+0x84>)
 8000792:	f000 fde3 	bl	800135c <HAL_ETH_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f954 	bl	8000a48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a0:	2238      	movs	r2, #56	; 0x38
 80007a2:	2100      	movs	r1, #0
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ETH_Init+0x98>)
 80007a6:	f004 fdd0 	bl	800534a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_ETH_Init+0x98>)
 80007ac:	2221      	movs	r2, #33	; 0x21
 80007ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_ETH_Init+0x98>)
 80007b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_ETH_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000210 	.word	0x20000210
 80007c8:	40028000 	.word	0x40028000
 80007cc:	20000814 	.word	0x20000814
 80007d0:	20000170 	.word	0x20000170
 80007d4:	200000d0 	.word	0x200000d0
 80007d8:	20000098 	.word	0x20000098

080007dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART3_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000814:	f002 fb24 	bl	8002e60 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f913 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200002c0 	.word	0x200002c0
 800082c:	40004800 	.word	0x40004800

08000830 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2204      	movs	r2, #4
 8000840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2202      	movs	r2, #2
 8000846:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2201      	movs	r2, #1
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	f001 fa5f 	bl	8001d36 <HAL_PCD_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f8e3 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000304 	.word	0x20000304

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a44      	ldr	r2, [pc, #272]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a3d      	ldr	r2, [pc, #244]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a36      	ldr	r2, [pc, #216]	; (80009d8 <MX_GPIO_Init+0x14c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <MX_GPIO_Init+0x14c>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x14c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <MX_GPIO_Init+0x14c>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_GPIO_Init+0x14c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000950:	4822      	ldr	r0, [pc, #136]	; (80009dc <MX_GPIO_Init+0x150>)
 8000952:	f001 f9d7 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4821      	ldr	r0, [pc, #132]	; (80009e0 <MX_GPIO_Init+0x154>)
 800095c:	f001 f9d2 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481b      	ldr	r0, [pc, #108]	; (80009e4 <MX_GPIO_Init+0x158>)
 8000978:	f001 f818 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_GPIO_Init+0x150>)
 8000996:	f001 f809 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0x154>)
 80009b2:	f000 fffb 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_GPIO_Init+0x154>)
 80009ca:	f000 ffef 	bl	80019ac <HAL_GPIO_Init>

}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	40020800 	.word	0x40020800

080009e8 <vTaskFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTaskFunction */
void vTaskFunction( void *pvParameters )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	char *pcTaskName;
	volatile uint32_t ul;

	/* The string to print out is passed in via the parameter.  Cast this to a
	   character pointer. */
	pcTaskName = ( char * ) pvParameters;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60fb      	str	r3, [r7, #12]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		vPrintString( pcTaskName );
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 fa6f 	bl	8000ed8 <vPrintString>

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	e002      	b.n	8000a06 <vTaskFunction+0x1e>
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d3f7      	bcc.n	8000a00 <vTaskFunction+0x18>
		vPrintString( pcTaskName );
 8000a10:	e7f0      	b.n	80009f4 <vTaskFunction+0xc>

08000a12 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000a1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a1e:	f003 f929 	bl	8003c74 <osDelay>
 8000a22:	e7fa      	b.n	8000a1a <StartDefaultTask+0x8>

08000a24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a36:	f000 fb6b 	bl	8001110 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40001400 	.word	0x40001400

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fc35 	bl	8001308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a55      	ldr	r2, [pc, #340]	; (8000c20 <HAL_ETH_MspInit+0x174>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	f040 80a4 	bne.w	8000c18 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	4b53      	ldr	r3, [pc, #332]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a52      	ldr	r2, [pc, #328]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae0:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	4b4c      	ldr	r3, [pc, #304]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a4b      	ldr	r2, [pc, #300]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
 8000afc:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b42      	ldr	r3, [pc, #264]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a3d      	ldr	r2, [pc, #244]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b3b      	ldr	r3, [pc, #236]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a36      	ldr	r2, [pc, #216]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b94:	2332      	movs	r3, #50	; 0x32
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	481e      	ldr	r0, [pc, #120]	; (8000c28 <HAL_ETH_MspInit+0x17c>)
 8000bb0:	f000 fefc 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bb4:	2386      	movs	r3, #134	; 0x86
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4817      	ldr	r0, [pc, #92]	; (8000c2c <HAL_ETH_MspInit+0x180>)
 8000bd0:	f000 feec 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be6:	230b      	movs	r3, #11
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480f      	ldr	r0, [pc, #60]	; (8000c30 <HAL_ETH_MspInit+0x184>)
 8000bf2:	f000 fedb 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bf6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <HAL_ETH_MspInit+0x188>)
 8000c14:	f000 feca 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3738      	adds	r7, #56	; 0x38
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40028000 	.word	0x40028000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020400 	.word	0x40020400
 8000c34:	40021800 	.word	0x40021800

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <HAL_UART_MspInit+0x84>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12c      	bne.n	8000cb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000cb0:	f000 fe7c 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40004800 	.word	0x40004800
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020c00 	.word	0x40020c00

08000cc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ce8:	d13f      	bne.n	8000d6a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4815      	ldr	r0, [pc, #84]	; (8000d78 <HAL_PCD_MspInit+0xb0>)
 8000d24:	f000 fe42 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <HAL_PCD_MspInit+0xb0>)
 8000d3e:	f000 fe35 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_PCD_MspInit+0xac>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000

08000d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <HAL_InitTick+0xe4>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a32      	ldr	r2, [pc, #200]	; (8000e60 <HAL_InitTick+0xe4>)
 8000d96:	f043 0320 	orr.w	r3, r3, #32
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <HAL_InitTick+0xe4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fd74 	bl	80028a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dc2:	f001 fd45 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 8000dc6:	6378      	str	r0, [r7, #52]	; 0x34
 8000dc8:	e004      	b.n	8000dd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dca:	f001 fd41 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd6:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_InitTick+0xe8>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9b      	lsrs	r3, r3, #18
 8000dde:	3b01      	subs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_InitTick+0xec>)
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <HAL_InitTick+0xf0>)
 8000de6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_InitTick+0xec>)
 8000dea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dee:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_InitTick+0xec>)
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_InitTick+0xec>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_InitTick+0xec>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_InitTick+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <HAL_InitTick+0xec>)
 8000e0a:	f001 fd7b 	bl	8002904 <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d11b      	bne.n	8000e54 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e1c:	4812      	ldr	r0, [pc, #72]	; (8000e68 <HAL_InitTick+0xec>)
 8000e1e:	f001 fdcb 	bl	80029b8 <HAL_TIM_Base_Start_IT>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d111      	bne.n	8000e54 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e30:	2037      	movs	r0, #55	; 0x37
 8000e32:	f000 fa85 	bl	8001340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d808      	bhi.n	8000e4e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	2037      	movs	r0, #55	; 0x37
 8000e42:	f000 fa61 	bl	8001308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_InitTick+0xf4>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e002      	b.n	8000e54 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3738      	adds	r7, #56	; 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	431bde83 	.word	0x431bde83
 8000e68:	2000081c 	.word	0x2000081c
 8000e6c:	40001400 	.word	0x40001400
 8000e70:	2000000c 	.word	0x2000000c

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIM7_IRQHandler+0x10>)
 8000ea6:	f001 fdf7 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000081c 	.word	0x2000081c

08000eb4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000ebc:	1d39      	adds	r1, r7, #4
 8000ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <__io_putchar+0x20>)
 8000ec6:	f002 f818 	bl	8002efa <HAL_UART_Transmit>

	return ch;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200002c0 	.word	0x200002c0

08000ed8 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000ee0:	f003 fd70 	bl	80049c4 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <vPrintString+0x2c>)
 8000ee8:	f004 fb18 	bl	800551c <iprintf>
		fflush( stdout );
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <vPrintString+0x30>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 f8fa 	bl	80050ec <fflush>
	}
	taskEXIT_CRITICAL();
 8000ef8:	f003 fd94 	bl	8004a24 <vPortExitCritical>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	0800608c 	.word	0x0800608c
 8000f08:	20000018 	.word	0x20000018

08000f0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e00a      	b.n	8000f34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f1e:	f3af 8000 	nop.w
 8000f22:	4601      	mov	r1, r0
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	b2ca      	uxtb	r2, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf0      	blt.n	8000f1e <_read+0x12>
	}

return len;
 8000f3c:	687b      	ldr	r3, [r7, #4]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffa7 	bl	8000eb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf1      	blt.n	8000f58 <_write+0x12>
	}
	return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_close>:

int _close(int file)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	return -1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_isatty>:

int _isatty(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f003 ffa0 	bl	8004f5c <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20030000 	.word	0x20030000
 8001048:	00000400 	.word	0x00000400
 800104c:	20000864 	.word	0x20000864
 8001050:	200045d0 	.word	0x200045d0

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f004 f929 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fa73 	bl	8000594 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010bc:	0800617c 	.word	0x0800617c
  ldr r2, =_sbss
 80010c0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010c4:	200045d0 	.word	0x200045d0

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f8fc 	bl	80012f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f7ff fe3e 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fca8 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000010 	.word	0x20000010
 8001134:	20000868 	.word	0x20000868

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000868 	.word	0x20000868

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000010 	.word	0x20000010

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff4c 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131a:	f7ff ff61 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800131e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ffb1 	bl	800128c <NVIC_EncodePriority>
 800132a:	4602      	mov	r2, r0
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff80 	bl	8001238 <__NVIC_SetPriority>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff54 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e06c      	b.n	8001448 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2223      	movs	r2, #35	; 0x23
 800137c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fb93 	bl	8000aac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_ETH_Init+0xf4>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a30      	ldr	r2, [pc, #192]	; (8001450 <HAL_ETH_Init+0xf4>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_ETH_Init+0xf4>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <HAL_ETH_Init+0xf8>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a2b      	ldr	r2, [pc, #172]	; (8001454 <HAL_ETH_Init+0xf8>)
 80013a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_ETH_Init+0xf8>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	4927      	ldr	r1, [pc, #156]	; (8001454 <HAL_ETH_Init+0xf8>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_ETH_Init+0xf8>)
 80013be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d8:	f7ff feae 	bl	8001138 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013de:	e011      	b.n	8001404 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013e0:	f7ff feaa 	bl	8001138 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ee:	d909      	bls.n	8001404 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2204      	movs	r2, #4
 80013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	22e0      	movs	r2, #224	; 0xe0
 80013fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e021      	b.n	8001448 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1e4      	bne.n	80013e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f958 	bl	80016cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f9ff 	bl	8001820 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fa55 	bl	80018d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	461a      	mov	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f9bd 	bl	80017b0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2210      	movs	r2, #16
 8001442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800

08001458 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <ETH_SetMACConfig+0x15c>)
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	7c1b      	ldrb	r3, [r3, #16]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <ETH_SetMACConfig+0x28>
 800147a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800147e:	e000      	b.n	8001482 <ETH_SetMACConfig+0x2a>
 8001480:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7c5b      	ldrb	r3, [r3, #17]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <ETH_SetMACConfig+0x38>
 800148a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148e:	e000      	b.n	8001492 <ETH_SetMACConfig+0x3a>
 8001490:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001492:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001498:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	7fdb      	ldrb	r3, [r3, #31]
 800149e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	7f92      	ldrb	r2, [r2, #30]
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d102      	bne.n	80014b6 <ETH_SetMACConfig+0x5e>
 80014b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b4:	e000      	b.n	80014b8 <ETH_SetMACConfig+0x60>
 80014b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80014b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7f1b      	ldrb	r3, [r3, #28]
 80014be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d102      	bne.n	80014e0 <ETH_SetMACConfig+0x88>
 80014da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014de:	e000      	b.n	80014e2 <ETH_SetMACConfig+0x8a>
 80014e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	7bdb      	ldrb	r3, [r3, #15]
 80014e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014fa:	4313      	orrs	r3, r2
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff fe1c 	bl	8001150 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800152e:	4013      	ands	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800153e:	2a00      	cmp	r2, #0
 8001540:	d101      	bne.n	8001546 <ETH_SetMACConfig+0xee>
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	e000      	b.n	8001548 <ETH_SetMACConfig+0xf0>
 8001546:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001548:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800154e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001556:	2a01      	cmp	r2, #1
 8001558:	d101      	bne.n	800155e <ETH_SetMACConfig+0x106>
 800155a:	2208      	movs	r2, #8
 800155c:	e000      	b.n	8001560 <ETH_SetMACConfig+0x108>
 800155e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001560:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001568:	2a01      	cmp	r2, #1
 800156a:	d101      	bne.n	8001570 <ETH_SetMACConfig+0x118>
 800156c:	2204      	movs	r2, #4
 800156e:	e000      	b.n	8001572 <ETH_SetMACConfig+0x11a>
 8001570:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001572:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800157a:	2a01      	cmp	r2, #1
 800157c:	d101      	bne.n	8001582 <ETH_SetMACConfig+0x12a>
 800157e:	2202      	movs	r2, #2
 8001580:	e000      	b.n	8001584 <ETH_SetMACConfig+0x12c>
 8001582:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001584:	4313      	orrs	r3, r2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fdd7 	bl	8001150 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	ff20810f 	.word	0xff20810f

080015b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <ETH_SetDMAConfig+0x110>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	7b1b      	ldrb	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <ETH_SetDMAConfig+0x2c>
 80015de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015e2:	e000      	b.n	80015e6 <ETH_SetDMAConfig+0x2e>
 80015e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	7b5b      	ldrb	r3, [r3, #13]
 80015ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	7f52      	ldrb	r2, [r2, #29]
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	d102      	bne.n	80015fc <ETH_SetDMAConfig+0x44>
 80015f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015fa:	e000      	b.n	80015fe <ETH_SetDMAConfig+0x46>
 80015fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	7b9b      	ldrb	r3, [r3, #14]
 8001604:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001606:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800160c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	7f1b      	ldrb	r3, [r3, #28]
 8001612:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001614:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	7f9b      	ldrb	r3, [r3, #30]
 800161a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800161c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001622:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800162c:	4313      	orrs	r3, r2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163c:	461a      	mov	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff fd7e 	bl	8001150 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	791b      	ldrb	r3, [r3, #4]
 8001666:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800166c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001672:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001678:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001680:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001682:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800168a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001690:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800169a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800169e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fd4f 	bl	8001150 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	f8de3f23 	.word	0xf8de3f23

080016cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0a6      	sub	sp, #152	; 0x98
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001708:	2300      	movs	r3, #0
 800170a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001712:	2300      	movs	r3, #0
 8001714:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800172e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001738:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001740:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fe86 	bl	8001458 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800174c:	2301      	movs	r3, #1
 800174e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001750:	2301      	movs	r3, #1
 8001752:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001778:	2301      	movs	r3, #1
 800177a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800177c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001780:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001786:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff08 	bl	80015b8 <ETH_SetDMAConfig>
}
 80017a8:	bf00      	nop
 80017aa:	3798      	adds	r7, #152	; 0x98
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3305      	adds	r3, #5
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	3204      	adds	r2, #4
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <ETH_MACAddressConfig+0x68>)
 80017d2:	4413      	add	r3, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3303      	adds	r3, #3
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	061a      	lsls	r2, r3, #24
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3302      	adds	r3, #2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4313      	orrs	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <ETH_MACAddressConfig+0x6c>)
 8001802:	4413      	add	r3, r2
 8001804:	461a      	mov	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40028040 	.word	0x40028040
 800181c:	40028044 	.word	0x40028044

08001820 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e03e      	b.n	80018ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68d9      	ldr	r1, [r3, #12]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	3206      	adds	r2, #6
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d80c      	bhi.n	8001890 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68d9      	ldr	r1, [r3, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e004      	b.n	800189a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	461a      	mov	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d9bd      	bls.n	800182e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e046      	b.n	800196e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6919      	ldr	r1, [r3, #16]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800191c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001924:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	3212      	adds	r2, #18
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d80c      	bhi.n	800195e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6919      	ldr	r1, [r3, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	461a      	mov	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	e004      	b.n	8001968 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d9b5      	bls.n	80018e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199e:	60da      	str	r2, [r3, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e177      	b.n	8001cb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8166 	bne.w	8001cb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d005      	beq.n	80019fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80c0 	beq.w	8001cb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a61      	ldr	r2, [pc, #388]	; (8001cd4 <HAL_GPIO_Init+0x328>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_GPIO_Init+0x32c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d037      	beq.n	8001bea <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a57      	ldr	r2, [pc, #348]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d031      	beq.n	8001be6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a56      	ldr	r2, [pc, #344]	; (8001ce0 <HAL_GPIO_Init+0x334>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a55      	ldr	r2, [pc, #340]	; (8001ce4 <HAL_GPIO_Init+0x338>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HAL_GPIO_Init+0x33c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a53      	ldr	r2, [pc, #332]	; (8001cec <HAL_GPIO_Init+0x340>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_GPIO_Init+0x344>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x226>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <HAL_GPIO_Init+0x348>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x222>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a50      	ldr	r2, [pc, #320]	; (8001cf8 <HAL_GPIO_Init+0x34c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x21e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4f      	ldr	r2, [pc, #316]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001bc2:	2309      	movs	r3, #9
 8001bc4:	e012      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	e010      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bca:	2308      	movs	r3, #8
 8001bcc:	e00e      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfc:	4935      	ldr	r1, [pc, #212]	; (8001cd4 <HAL_GPIO_Init+0x328>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2e:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f ae84 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40021c00 	.word	0x40021c00
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40022400 	.word	0x40022400
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d38:	b08f      	sub	sp, #60	; 0x3c
 8001d3a:	af0a      	add	r7, sp, #40	; 0x28
 8001d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e10f      	b.n	8001f68 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe ffb0 	bl	8000cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fc8d 	bl	80036a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	687e      	ldr	r6, [r7, #4]
 8001d94:	466d      	mov	r5, sp
 8001d96:	f106 0410 	add.w	r4, r6, #16
 8001d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001daa:	1d33      	adds	r3, r6, #4
 8001dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f001 fc18 	bl	80035e4 <USB_CoreInit>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0d0      	b.n	8001f68 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fc7b 	bl	80036c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e04a      	b.n	8001e6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	333d      	adds	r3, #61	; 0x3d
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	333c      	adds	r3, #60	; 0x3c
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	b298      	uxth	r0, r3
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3344      	adds	r3, #68	; 0x44
 8001e14:	4602      	mov	r2, r0
 8001e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3340      	adds	r3, #64	; 0x40
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3348      	adds	r3, #72	; 0x48
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	334c      	adds	r3, #76	; 0x4c
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3354      	adds	r3, #84	; 0x54
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3af      	bcc.n	8001dd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e044      	b.n	8001f08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	3301      	adds	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3b5      	bcc.n	8001e7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	687e      	ldr	r6, [r7, #4]
 8001f1a:	466d      	mov	r5, sp
 8001f1c:	f106 0410 	add.w	r4, r6, #16
 8001f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f30:	1d33      	adds	r3, r6, #4
 8001f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f34:	6838      	ldr	r0, [r7, #0]
 8001f36:	f001 fc13 	bl	8003760 <USB_DevInit>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e00d      	b.n	8001f68 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fdde 	bl	8003b22 <USB_DevDisconnect>

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e267      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d075      	beq.n	800207a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8e:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d00c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b85      	ldr	r3, [pc, #532]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d112      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05b      	beq.n	8002078 <HAL_RCC_OscConfig+0x108>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d157      	bne.n	8002078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e242      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x74>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a75      	ldr	r2, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e01d      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x98>
 8001fee:	4b70      	ldr	r3, [pc, #448]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6f      	ldr	r2, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b6d      	ldr	r3, [pc, #436]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6c      	ldr	r2, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8002008:	4b69      	ldr	r3, [pc, #420]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b66      	ldr	r3, [pc, #408]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a65      	ldr	r2, [pc, #404]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f886 	bl	8001138 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff f882 	bl	8001138 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e207      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0xc0>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff f872 	bl	8001138 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f86e 	bl	8001138 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1f3      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0xe8>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d063      	beq.n	800214e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d11c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1c7      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	e03a      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_OscConfig+0x244>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff f827 	bl	8001138 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f823 	bl	8001138 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1a8      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4925      	ldr	r1, [pc, #148]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_OscConfig+0x244>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f806 	bl	8001138 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff f802 	bl	8001138 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e187      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d036      	beq.n	80021c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x248>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7fe ffe6 	bl	8001138 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002170:	f7fe ffe2 	bl	8001138 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e167      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x200>
 800218e:	e01b      	b.n	80021c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x248>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe ffcf 	bl	8001138 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e00e      	b.n	80021bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219e:	f7fe ffcb 	bl	8001138 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d907      	bls.n	80021bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e150      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
 80021b0:	40023800 	.word	0x40023800
 80021b4:	42470000 	.word	0x42470000
 80021b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ea      	bne.n	800219e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8097 	beq.w	8002304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4b81      	ldr	r3, [pc, #516]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b7d      	ldr	r3, [pc, #500]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a7c      	ldr	r2, [pc, #496]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a73      	ldr	r2, [pc, #460]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7fe ff8b 	bl	8001138 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe ff87 	bl	8001138 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e10c      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x2ea>
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x324>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x30c>
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a5b      	ldr	r2, [pc, #364]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x324>
 800227c:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a54      	ldr	r2, [pc, #336]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7fe ff4c 	bl	8001138 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7fe ff48 	bl	8001138 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0cb      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x334>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe ff36 	bl	8001138 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff32 	bl	8001138 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0b5      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a38      	ldr	r2, [pc, #224]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a1 	beq.w	8002450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	d05c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d141      	bne.n	80023a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe ff06 	bl	8001138 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe ff02 	bl	8001138 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e087      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	019b      	lsls	r3, r3, #6
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	491b      	ldr	r1, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7fe fedb 	bl	8001138 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe fed7 	bl	8001138 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e05c      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x416>
 80023a4:	e054      	b.n	8002450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fec4 	bl	8001138 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fec0 	bl	8001138 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e045      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x444>
 80023d2:	e03d      	b.n	8002450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e038      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40007000 	.word	0x40007000
 80023e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x4ec>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d028      	beq.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d121      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d11a      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002424:	4293      	cmp	r3, r2
 8002426:	d111      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d107      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0cc      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d90c      	bls.n	800249c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0b8      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b50      	ldr	r3, [pc, #320]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	494d      	ldr	r1, [pc, #308]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d044      	beq.n	8002580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d119      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d003      	beq.n	800251e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251a:	2b03      	cmp	r3, #3
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e067      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4934      	ldr	r1, [pc, #208]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7fe fdf2 	bl	8001138 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7fe fdee 	bl	8001138 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d20c      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e032      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4916      	ldr	r1, [pc, #88]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e6:	f000 f821 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490a      	ldr	r1, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fbb8 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00
 800261c:	40023800 	.word	0x40023800
 8002620:	080060bc 	.word	0x080060bc
 8002624:	20000008 	.word	0x20000008
 8002628:	2000000c 	.word	0x2000000c

0800262c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002630:	b094      	sub	sp, #80	; 0x50
 8002632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
 8002638:	2300      	movs	r3, #0
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800263c:	2300      	movs	r3, #0
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d00d      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x40>
 8002650:	2b08      	cmp	r3, #8
 8002652:	f200 80e1 	bhi.w	8002818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x34>
 800265a:	2b04      	cmp	r3, #4
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x3a>
 800265e:	e0db      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b73      	ldr	r3, [pc, #460]	; (8002830 <HAL_RCC_GetSysClockFreq+0x204>)
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002664:	e0db      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002666:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_GetSysClockFreq+0x208>)
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800266a:	e0d8      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800266c:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002674:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002676:	4b6d      	ldr	r3, [pc, #436]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d063      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002682:	4b6a      	ldr	r3, [pc, #424]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	2200      	movs	r2, #0
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
 800268c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
 800269a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800269e:	4622      	mov	r2, r4
 80026a0:	462b      	mov	r3, r5
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	0159      	lsls	r1, r3, #5
 80026ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b0:	0150      	lsls	r0, r2, #5
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4621      	mov	r1, r4
 80026b8:	1a51      	subs	r1, r2, r1
 80026ba:	6139      	str	r1, [r7, #16]
 80026bc:	4629      	mov	r1, r5
 80026be:	eb63 0301 	sbc.w	r3, r3, r1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d0:	4659      	mov	r1, fp
 80026d2:	018b      	lsls	r3, r1, #6
 80026d4:	4651      	mov	r1, sl
 80026d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026da:	4651      	mov	r1, sl
 80026dc:	018a      	lsls	r2, r1, #6
 80026de:	4651      	mov	r1, sl
 80026e0:	ebb2 0801 	subs.w	r8, r2, r1
 80026e4:	4659      	mov	r1, fp
 80026e6:	eb63 0901 	sbc.w	r9, r3, r1
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026fe:	4690      	mov	r8, r2
 8002700:	4699      	mov	r9, r3
 8002702:	4623      	mov	r3, r4
 8002704:	eb18 0303 	adds.w	r3, r8, r3
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	462b      	mov	r3, r5
 800270c:	eb49 0303 	adc.w	r3, r9, r3
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800271e:	4629      	mov	r1, r5
 8002720:	024b      	lsls	r3, r1, #9
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002728:	4621      	mov	r1, r4
 800272a:	024a      	lsls	r2, r1, #9
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002732:	2200      	movs	r2, #0
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
 8002736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800273c:	f7fd fda8 	bl	8000290 <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4613      	mov	r3, r2
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002748:	e058      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	2200      	movs	r2, #0
 8002752:	4618      	mov	r0, r3
 8002754:	4611      	mov	r1, r2
 8002756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	f04f 0000 	mov.w	r0, #0
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	0159      	lsls	r1, r3, #5
 8002772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002776:	0150      	lsls	r0, r2, #5
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4641      	mov	r1, r8
 800277e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002782:	4649      	mov	r1, r9
 8002784:	eb63 0b01 	sbc.w	fp, r3, r1
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800279c:	ebb2 040a 	subs.w	r4, r2, sl
 80027a0:	eb63 050b 	sbc.w	r5, r3, fp
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	00eb      	lsls	r3, r5, #3
 80027ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b2:	00e2      	lsls	r2, r4, #3
 80027b4:	4614      	mov	r4, r2
 80027b6:	461d      	mov	r5, r3
 80027b8:	4643      	mov	r3, r8
 80027ba:	18e3      	adds	r3, r4, r3
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	464b      	mov	r3, r9
 80027c0:	eb45 0303 	adc.w	r3, r5, r3
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d2:	4629      	mov	r1, r5
 80027d4:	028b      	lsls	r3, r1, #10
 80027d6:	4621      	mov	r1, r4
 80027d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027dc:	4621      	mov	r1, r4
 80027de:	028a      	lsls	r2, r1, #10
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e6:	2200      	movs	r2, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	61fa      	str	r2, [r7, #28]
 80027ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f0:	f7fd fd4e 	bl	8000290 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	3301      	adds	r3, #1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800280c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002816:	e002      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetSysClockFreq+0x204>)
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002820:	4618      	mov	r0, r3
 8002822:	3750      	adds	r7, #80	; 0x50
 8002824:	46bd      	mov	sp, r7
 8002826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	00f42400 	.word	0x00f42400
 8002834:	007a1200 	.word	0x007a1200

08002838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCC_GetHCLKFreq+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000008 	.word	0x20000008

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002854:	f7ff fff0 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	0a9b      	lsrs	r3, r3, #10
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4903      	ldr	r1, [pc, #12]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	080060cc 	.word	0x080060cc

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800287c:	f7ff ffdc 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0b5b      	lsrs	r3, r3, #13
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	080060cc 	.word	0x080060cc

080028a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	220f      	movs	r2, #15
 80028ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_GetClockConfig+0x5c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_RCC_GetClockConfig+0x5c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_RCC_GetClockConfig+0x5c>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_GetClockConfig+0x5c>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	08db      	lsrs	r3, r3, #3
 80028da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_RCC_GetClockConfig+0x60>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 020f 	and.w	r2, r3, #15
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40023c00 	.word	0x40023c00

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e041      	b.n	800299a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f839 	bl	80029a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 f9d8 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e04e      	b.n	8002a6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <HAL_TIM_Base_Start_IT+0xc4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d022      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x80>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d01d      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x80>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x80>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x80>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x80>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_TIM_Base_Start_IT+0xd4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x80>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x80>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d111      	bne.n	8002a5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d010      	beq.n	8002a6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	e007      	b.n	8002a6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40010400 	.word	0x40010400
 8002a90:	40014000 	.word	0x40014000
 8002a94:	40001800 	.word	0x40001800

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0202 	mvn.w	r2, #2
 8002ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8ee 	bl	8002cbc <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8e0 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8f1 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0204 	mvn.w	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8c4 	bl	8002cbc <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8b6 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f8c7 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f89a 	bl	8002cbc <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f88c 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f89d 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f870 	bl	8002cbc <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f862 	bl	8002ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f873 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0201 	mvn.w	r2, #1
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fd ff04 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f902 	bl	8002e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f838 	bl	8002ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0220 	mvn.w	r2, #32
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8cc 	bl	8002e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a40      	ldr	r2, [pc, #256]	; (8002e0c <TIM_Base_SetConfig+0x114>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d013      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d00f      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3d      	ldr	r2, [pc, #244]	; (8002e10 <TIM_Base_SetConfig+0x118>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00b      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <TIM_Base_SetConfig+0x11c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <TIM_Base_SetConfig+0x120>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a3a      	ldr	r2, [pc, #232]	; (8002e1c <TIM_Base_SetConfig+0x124>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2f      	ldr	r2, [pc, #188]	; (8002e0c <TIM_Base_SetConfig+0x114>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d027      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <TIM_Base_SetConfig+0x118>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d023      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <TIM_Base_SetConfig+0x11c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01f      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <TIM_Base_SetConfig+0x120>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <TIM_Base_SetConfig+0x124>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d017      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <TIM_Base_SetConfig+0x128>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <TIM_Base_SetConfig+0x12c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00f      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <TIM_Base_SetConfig+0x130>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <TIM_Base_SetConfig+0x134>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d007      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <TIM_Base_SetConfig+0x138>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <TIM_Base_SetConfig+0x13c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d108      	bne.n	8002dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <TIM_Base_SetConfig+0x114>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0xf8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <TIM_Base_SetConfig+0x124>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	615a      	str	r2, [r3, #20]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00
 8002e1c:	40010400 	.word	0x40010400
 8002e20:	40014000 	.word	0x40014000
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	40001800 	.word	0x40001800
 8002e30:	40001c00 	.word	0x40001c00
 8002e34:	40002000 	.word	0x40002000

08002e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e03f      	b.n	8002ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fed6 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f929 	bl	80030fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b08a      	sub	sp, #40	; 0x28
 8002efe:	af02      	add	r7, sp, #8
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d17c      	bne.n	8003014 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_UART_Transmit+0x2c>
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e075      	b.n	8003016 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_UART_Transmit+0x3e>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e06e      	b.n	8003016 <HAL_UART_Transmit+0x11c>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe f8f3 	bl	8001138 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x82>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f8c:	e02a      	b.n	8002fe4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f840 	bl	800301e <UART_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e036      	b.n	8003016 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	e007      	b.n	8002fd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1cf      	bne.n	8002f8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2140      	movs	r1, #64	; 0x40
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f810 	bl	800301e <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e006      	b.n	8003016 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b090      	sub	sp, #64	; 0x40
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302e:	e050      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d04c      	beq.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x30>
 800303e:	f7fe f87b 	bl	8001138 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800304a:	429a      	cmp	r2, r3
 800304c:	d241      	bcs.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800306e:	637a      	str	r2, [r7, #52]	; 0x34
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3314      	adds	r3, #20
 8003088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	613b      	str	r3, [r7, #16]
   return(result);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a2:	623a      	str	r2, [r7, #32]
 80030a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	69f9      	ldr	r1, [r7, #28]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e00f      	b.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d09f      	beq.n	8003030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3740      	adds	r7, #64	; 0x40
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003100:	b0c0      	sub	sp, #256	; 0x100
 8003102:	af00      	add	r7, sp, #0
 8003104:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	68d9      	ldr	r1, [r3, #12]
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	ea40 0301 	orr.w	r3, r0, r1
 8003124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	431a      	orrs	r2, r3
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	431a      	orrs	r2, r3
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003154:	f021 010c 	bic.w	r1, r1, #12
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003162:	430b      	orrs	r3, r1
 8003164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	6999      	ldr	r1, [r3, #24]
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	ea40 0301 	orr.w	r3, r0, r1
 8003182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b8f      	ldr	r3, [pc, #572]	; (80033c8 <UART_SetConfig+0x2cc>)
 800318c:	429a      	cmp	r2, r3
 800318e:	d005      	beq.n	800319c <UART_SetConfig+0xa0>
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b8d      	ldr	r3, [pc, #564]	; (80033cc <UART_SetConfig+0x2d0>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d104      	bne.n	80031a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800319c:	f7ff fb6c 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 80031a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031a4:	e003      	b.n	80031ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031a6:	f7ff fb53 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80031aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b8:	f040 810c 	bne.w	80033d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80031d6:	415b      	adcs	r3, r3
 80031d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031de:	4621      	mov	r1, r4
 80031e0:	eb12 0801 	adds.w	r8, r2, r1
 80031e4:	4629      	mov	r1, r5
 80031e6:	eb43 0901 	adc.w	r9, r3, r1
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031fe:	4690      	mov	r8, r2
 8003200:	4699      	mov	r9, r3
 8003202:	4623      	mov	r3, r4
 8003204:	eb18 0303 	adds.w	r3, r8, r3
 8003208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800320c:	462b      	mov	r3, r5
 800320e:	eb49 0303 	adc.w	r3, r9, r3
 8003212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003222:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800322a:	460b      	mov	r3, r1
 800322c:	18db      	adds	r3, r3, r3
 800322e:	653b      	str	r3, [r7, #80]	; 0x50
 8003230:	4613      	mov	r3, r2
 8003232:	eb42 0303 	adc.w	r3, r2, r3
 8003236:	657b      	str	r3, [r7, #84]	; 0x54
 8003238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800323c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003240:	f7fd f826 	bl	8000290 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b61      	ldr	r3, [pc, #388]	; (80033d0 <UART_SetConfig+0x2d4>)
 800324a:	fba3 2302 	umull	r2, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	011c      	lsls	r4, r3, #4
 8003252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800325c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	1891      	adds	r1, r2, r2
 800326a:	64b9      	str	r1, [r7, #72]	; 0x48
 800326c:	415b      	adcs	r3, r3
 800326e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003274:	4641      	mov	r1, r8
 8003276:	eb12 0a01 	adds.w	sl, r2, r1
 800327a:	4649      	mov	r1, r9
 800327c:	eb43 0b01 	adc.w	fp, r3, r1
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800328c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003294:	4692      	mov	sl, r2
 8003296:	469b      	mov	fp, r3
 8003298:	4643      	mov	r3, r8
 800329a:	eb1a 0303 	adds.w	r3, sl, r3
 800329e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a2:	464b      	mov	r3, r9
 80032a4:	eb4b 0303 	adc.w	r3, fp, r3
 80032a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c0:	460b      	mov	r3, r1
 80032c2:	18db      	adds	r3, r3, r3
 80032c4:	643b      	str	r3, [r7, #64]	; 0x40
 80032c6:	4613      	mov	r3, r2
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
 80032ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032d6:	f7fc ffdb 	bl	8000290 <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <UART_SetConfig+0x2d4>)
 80032e2:	fba3 2301 	umull	r2, r3, r3, r1
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2264      	movs	r2, #100	; 0x64
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	1acb      	subs	r3, r1, r3
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032f6:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <UART_SetConfig+0x2d4>)
 80032f8:	fba3 2302 	umull	r2, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003310:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003320:	415b      	adcs	r3, r3
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003328:	4641      	mov	r1, r8
 800332a:	1851      	adds	r1, r2, r1
 800332c:	6339      	str	r1, [r7, #48]	; 0x30
 800332e:	4649      	mov	r1, r9
 8003330:	414b      	adcs	r3, r1
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003340:	4659      	mov	r1, fp
 8003342:	00cb      	lsls	r3, r1, #3
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334a:	4651      	mov	r1, sl
 800334c:	00ca      	lsls	r2, r1, #3
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	4603      	mov	r3, r0
 8003354:	4642      	mov	r2, r8
 8003356:	189b      	adds	r3, r3, r2
 8003358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800335c:	464b      	mov	r3, r9
 800335e:	460a      	mov	r2, r1
 8003360:	eb42 0303 	adc.w	r3, r2, r3
 8003364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003374:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800337c:	460b      	mov	r3, r1
 800337e:	18db      	adds	r3, r3, r3
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
 8003382:	4613      	mov	r3, r2
 8003384:	eb42 0303 	adc.w	r3, r2, r3
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800338e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003392:	f7fc ff7d 	bl	8000290 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <UART_SetConfig+0x2d4>)
 800339c:	fba3 1302 	umull	r1, r3, r3, r2
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	2164      	movs	r1, #100	; 0x64
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	3332      	adds	r3, #50	; 0x32
 80033ae:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <UART_SetConfig+0x2d4>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	f003 0207 	and.w	r2, r3, #7
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4422      	add	r2, r4
 80033c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033c4:	e105      	b.n	80035d2 <UART_SetConfig+0x4d6>
 80033c6:	bf00      	nop
 80033c8:	40011000 	.word	0x40011000
 80033cc:	40011400 	.word	0x40011400
 80033d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033e6:	4642      	mov	r2, r8
 80033e8:	464b      	mov	r3, r9
 80033ea:	1891      	adds	r1, r2, r2
 80033ec:	6239      	str	r1, [r7, #32]
 80033ee:	415b      	adcs	r3, r3
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033f6:	4641      	mov	r1, r8
 80033f8:	1854      	adds	r4, r2, r1
 80033fa:	4649      	mov	r1, r9
 80033fc:	eb43 0501 	adc.w	r5, r3, r1
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	00eb      	lsls	r3, r5, #3
 800340a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340e:	00e2      	lsls	r2, r4, #3
 8003410:	4614      	mov	r4, r2
 8003412:	461d      	mov	r5, r3
 8003414:	4643      	mov	r3, r8
 8003416:	18e3      	adds	r3, r4, r3
 8003418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800341c:	464b      	mov	r3, r9
 800341e:	eb45 0303 	adc.w	r3, r5, r3
 8003422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003432:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003442:	4629      	mov	r1, r5
 8003444:	008b      	lsls	r3, r1, #2
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800344c:	4621      	mov	r1, r4
 800344e:	008a      	lsls	r2, r1, #2
 8003450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003454:	f7fc ff1c 	bl	8000290 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <UART_SetConfig+0x4e4>)
 800345e:	fba3 2302 	umull	r2, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	011c      	lsls	r4, r3, #4
 8003466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003470:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	1891      	adds	r1, r2, r2
 800347e:	61b9      	str	r1, [r7, #24]
 8003480:	415b      	adcs	r3, r3
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003488:	4641      	mov	r1, r8
 800348a:	1851      	adds	r1, r2, r1
 800348c:	6139      	str	r1, [r7, #16]
 800348e:	4649      	mov	r1, r9
 8003490:	414b      	adcs	r3, r1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a0:	4659      	mov	r1, fp
 80034a2:	00cb      	lsls	r3, r1, #3
 80034a4:	4651      	mov	r1, sl
 80034a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034aa:	4651      	mov	r1, sl
 80034ac:	00ca      	lsls	r2, r1, #3
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	4642      	mov	r2, r8
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034bc:	464b      	mov	r3, r9
 80034be:	460a      	mov	r2, r1
 80034c0:	eb42 0303 	adc.w	r3, r2, r3
 80034c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034e0:	4649      	mov	r1, r9
 80034e2:	008b      	lsls	r3, r1, #2
 80034e4:	4641      	mov	r1, r8
 80034e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ea:	4641      	mov	r1, r8
 80034ec:	008a      	lsls	r2, r1, #2
 80034ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034f2:	f7fc fecd 	bl	8000290 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <UART_SetConfig+0x4e4>)
 80034fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	2164      	movs	r1, #100	; 0x64
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	3332      	adds	r3, #50	; 0x32
 800350e:	4a34      	ldr	r2, [pc, #208]	; (80035e0 <UART_SetConfig+0x4e4>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351a:	441c      	add	r4, r3
 800351c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003520:	2200      	movs	r2, #0
 8003522:	673b      	str	r3, [r7, #112]	; 0x70
 8003524:	677a      	str	r2, [r7, #116]	; 0x74
 8003526:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800352a:	4642      	mov	r2, r8
 800352c:	464b      	mov	r3, r9
 800352e:	1891      	adds	r1, r2, r2
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	415b      	adcs	r3, r3
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800353a:	4641      	mov	r1, r8
 800353c:	1851      	adds	r1, r2, r1
 800353e:	6039      	str	r1, [r7, #0]
 8003540:	4649      	mov	r1, r9
 8003542:	414b      	adcs	r3, r1
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003552:	4659      	mov	r1, fp
 8003554:	00cb      	lsls	r3, r1, #3
 8003556:	4651      	mov	r1, sl
 8003558:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355c:	4651      	mov	r1, sl
 800355e:	00ca      	lsls	r2, r1, #3
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	4603      	mov	r3, r0
 8003566:	4642      	mov	r2, r8
 8003568:	189b      	adds	r3, r3, r2
 800356a:	66bb      	str	r3, [r7, #104]	; 0x68
 800356c:	464b      	mov	r3, r9
 800356e:	460a      	mov	r2, r1
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	663b      	str	r3, [r7, #96]	; 0x60
 8003580:	667a      	str	r2, [r7, #100]	; 0x64
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800358e:	4649      	mov	r1, r9
 8003590:	008b      	lsls	r3, r1, #2
 8003592:	4641      	mov	r1, r8
 8003594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003598:	4641      	mov	r1, r8
 800359a:	008a      	lsls	r2, r1, #2
 800359c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035a0:	f7fc fe76 	bl	8000290 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <UART_SetConfig+0x4e4>)
 80035aa:	fba3 1302 	umull	r1, r3, r3, r2
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2164      	movs	r1, #100	; 0x64
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	3332      	adds	r3, #50	; 0x32
 80035bc:	4a08      	ldr	r2, [pc, #32]	; (80035e0 <UART_SetConfig+0x4e4>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4422      	add	r2, r4
 80035d0:	609a      	str	r2, [r3, #8]
}
 80035d2:	bf00      	nop
 80035d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	51eb851f 	.word	0x51eb851f

080035e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e4:	b084      	sub	sp, #16
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	f107 001c 	add.w	r0, r7, #28
 80035f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d122      	bne.n	8003642 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 faa2 	bl	8003b80 <USB_CoreReset>
 800363c:	4603      	mov	r3, r0
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e01a      	b.n	8003678 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa96 	bl	8003b80 <USB_CoreReset>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
 800366a:	e005      	b.n	8003678 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	2b01      	cmp	r3, #1
 800367c:	d10b      	bne.n	8003696 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f043 0206 	orr.w	r2, r3, #6
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003696:	7bfb      	ldrb	r3, [r7, #15]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a2:	b004      	add	sp, #16
 80036a4:	4770      	bx	lr

080036a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0201 	bic.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d115      	bne.n	8003716 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f7fd fd2a 	bl	8001150 <HAL_Delay>
      ms++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3301      	adds	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa2e 	bl	8003b64 <USB_GetMode>
 8003708:	4603      	mov	r3, r0
 800370a:	2b01      	cmp	r3, #1
 800370c:	d01e      	beq.n	800374c <USB_SetCurrentMode+0x84>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b31      	cmp	r3, #49	; 0x31
 8003712:	d9f0      	bls.n	80036f6 <USB_SetCurrentMode+0x2e>
 8003714:	e01a      	b.n	800374c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d115      	bne.n	8003748 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003728:	2001      	movs	r0, #1
 800372a:	f7fd fd11 	bl	8001150 <HAL_Delay>
      ms++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3301      	adds	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa15 	bl	8003b64 <USB_GetMode>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <USB_SetCurrentMode+0x84>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b31      	cmp	r3, #49	; 0x31
 8003744:	d9f0      	bls.n	8003728 <USB_SetCurrentMode+0x60>
 8003746:	e001      	b.n	800374c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e005      	b.n	8003758 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b32      	cmp	r3, #50	; 0x32
 8003750:	d101      	bne.n	8003756 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003760:	b084      	sub	sp, #16
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800376e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	e009      	b.n	8003794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3340      	adds	r3, #64	; 0x40
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	3301      	adds	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b0e      	cmp	r3, #14
 8003798:	d9f2      	bls.n	8003780 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11c      	bne.n	80037da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
 80037d8:	e00b      	b.n	80037f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037f8:	461a      	mov	r2, r3
 80037fa:	2300      	movs	r3, #0
 80037fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003804:	4619      	mov	r1, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	461a      	mov	r2, r3
 800380e:	680b      	ldr	r3, [r1, #0]
 8003810:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10c      	bne.n	8003832 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800381e:	2100      	movs	r1, #0
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f965 	bl	8003af0 <USB_SetDevSpeed>
 8003826:	e008      	b.n	800383a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003828:	2101      	movs	r1, #1
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f960 	bl	8003af0 <USB_SetDevSpeed>
 8003830:	e003      	b.n	800383a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003832:	2103      	movs	r1, #3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f95b 	bl	8003af0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800383a:	2110      	movs	r1, #16
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8f3 	bl	8003a28 <USB_FlushTxFifo>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f91f 	bl	8003a90 <USB_FlushRxFifo>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	461a      	mov	r2, r3
 8003870:	2300      	movs	r3, #0
 8003872:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	461a      	mov	r2, r3
 800387c:	2300      	movs	r3, #0
 800387e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	e043      	b.n	800390e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800389c:	d118      	bne.n	80038d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b0:	461a      	mov	r2, r3
 80038b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e013      	b.n	80038e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c6:	461a      	mov	r2, r3
 80038c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e008      	b.n	80038e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	461a      	mov	r2, r3
 80038de:	2300      	movs	r3, #0
 80038e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	461a      	mov	r2, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003906:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	3301      	adds	r3, #1
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	429a      	cmp	r2, r3
 8003914:	d3b7      	bcc.n	8003886 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e043      	b.n	80039a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800392e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003932:	d118      	bne.n	8003966 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e013      	b.n	8003978 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	461a      	mov	r2, r3
 800395e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e008      	b.n	8003978 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	461a      	mov	r2, r3
 8003986:	2300      	movs	r3, #0
 8003988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800399c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3301      	adds	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3b7      	bcc.n	800391c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f043 0210 	orr.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <USB_DevInit+0x2c4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f043 0208 	orr.w	r2, r3, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a20:	b004      	add	sp, #16
 8003a22:	4770      	bx	lr
 8003a24:	803c3800 	.word	0x803c3800

08003a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <USB_FlushTxFifo+0x64>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e01b      	b.n	8003a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	daf2      	bge.n	8003a36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	019b      	lsls	r3, r3, #6
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <USB_FlushTxFifo+0x64>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e006      	b.n	8003a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d0f0      	beq.n	8003a60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	00030d40 	.word	0x00030d40

08003a90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a11      	ldr	r2, [pc, #68]	; (8003aec <USB_FlushRxFifo+0x5c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e018      	b.n	8003ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	daf2      	bge.n	8003a9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2210      	movs	r2, #16
 8003abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <USB_FlushRxFifo+0x5c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e006      	b.n	8003ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d0f0      	beq.n	8003ac0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	00030d40 	.word	0x00030d40

08003af0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	68f9      	ldr	r1, [r7, #12]
 8003b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0301 	and.w	r3, r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <USB_CoreReset+0x64>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e01b      	b.n	8003bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	daf2      	bge.n	8003b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f043 0201 	orr.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <USB_CoreReset+0x64>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e006      	b.n	8003bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d0f0      	beq.n	8003bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	00030d40 	.word	0x00030d40

08003be8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bfa:	2b84      	cmp	r3, #132	; 0x84
 8003bfc:	d005      	beq.n	8003c0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003bfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	3303      	adds	r3, #3
 8003c08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c1c:	f000 fa70 	bl	8004100 <vTaskStartScheduler>
  
  return osOK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c28:	b087      	sub	sp, #28
 8003c2a:	af02      	add	r7, sp, #8
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685c      	ldr	r4, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c3c:	b29e      	uxth	r6, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ffcf 	bl	8003be8 <makeFreeRtosPriority>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	9200      	str	r2, [sp, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4632      	mov	r2, r6
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 f8d2 	bl	8003e04 <xTaskCreate>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <osDelay+0x16>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	e000      	b.n	8003c8c <osDelay+0x18>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa03 	bl	8004098 <vTaskDelay>
  
  return osOK;
 8003c92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f103 0208 	add.w	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f103 0208 	add.w	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f103 0208 	add.w	r2, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d103      	bne.n	8003d5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e00c      	b.n	8003d78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3308      	adds	r3, #8
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e002      	b.n	8003d6c <vListInsert+0x2e>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d2f6      	bcs.n	8003d66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6852      	ldr	r2, [r2, #4]
 8003dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d103      	bne.n	8003de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1e5a      	subs	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 feb5 	bl	8004b88 <pvPortMalloc>
 8003e1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00e      	beq.n	8003e44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e26:	20b4      	movs	r0, #180	; 0xb4
 8003e28:	f000 feae 	bl	8004b88 <pvPortMalloc>
 8003e2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3a:	e005      	b.n	8003e48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e3c:	6978      	ldr	r0, [r7, #20]
 8003e3e:	f000 ff6f 	bl	8004d20 <vPortFree>
 8003e42:	e001      	b.n	8003e48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d013      	beq.n	8003e76 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	9302      	str	r3, [sp, #8]
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f80f 	bl	8003e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6a:	69f8      	ldr	r0, [r7, #28]
 8003e6c:	f000 f8aa 	bl	8003fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e70:	2301      	movs	r3, #1
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e002      	b.n	8003e7c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	617b      	str	r3, [r7, #20]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01f      	beq.n	8003f16 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e012      	b.n	8003f02 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	7819      	ldrb	r1, [r3, #0]
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3334      	adds	r3, #52	; 0x34
 8003eec:	460a      	mov	r2, r1
 8003eee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d9e9      	bls.n	8003edc <prvInitialiseNewTask+0x54>
 8003f08:	e000      	b.n	8003f0c <prvInitialiseNewTask+0x84>
			{
				break;
 8003f0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f14:	e003      	b.n	8003f1e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d901      	bls.n	8003f28 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f24:	2306      	movs	r3, #6
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	2200      	movs	r2, #0
 8003f38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fecc 	bl	8003cdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	3318      	adds	r3, #24
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fec7 	bl	8003cdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	f1c3 0207 	rsb	r2, r3, #7
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	334c      	adds	r3, #76	; 0x4c
 8003f78:	2260      	movs	r2, #96	; 0x60
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 f9e4 	bl	800534a <memset>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <prvInitialiseNewTask+0x130>)
 8003f86:	651a      	str	r2, [r3, #80]	; 0x50
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <prvInitialiseNewTask+0x134>)
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <prvInitialiseNewTask+0x138>)
 8003f92:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	69b8      	ldr	r0, [r7, #24]
 8003f9a:	f000 fbe7 	bl	800476c <pxPortInitialiseStack>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	080060f4 	.word	0x080060f4
 8003fbc:	08006114 	.word	0x08006114
 8003fc0:	080060d4 	.word	0x080060d4

08003fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fcc:	f000 fcfa 	bl	80049c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <prvAddNewTaskToReadyList+0xb8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	4a29      	ldr	r2, [pc, #164]	; (800407c <prvAddNewTaskToReadyList+0xb8>)
 8003fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fe2:	4a27      	ldr	r2, [pc, #156]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <prvAddNewTaskToReadyList+0xb8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d110      	bne.n	8004012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ff0:	f000 fab2 	bl	8004558 <prvInitialiseTaskLists>
 8003ff4:	e00d      	b.n	8004012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <prvAddNewTaskToReadyList+0xc0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	429a      	cmp	r2, r3
 800400a:	d802      	bhi.n	8004012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <prvAddNewTaskToReadyList+0xc4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3301      	adds	r3, #1
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <prvAddNewTaskToReadyList+0xc4>)
 800401a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	2201      	movs	r2, #1
 8004022:	409a      	lsls	r2, r3
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <prvAddNewTaskToReadyList+0xc8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <prvAddNewTaskToReadyList+0xc8>)
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <prvAddNewTaskToReadyList+0xcc>)
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7ff fe56 	bl	8003cf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800404a:	f000 fceb 	bl	8004a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <prvAddNewTaskToReadyList+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00e      	beq.n	8004074 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	429a      	cmp	r2, r3
 8004062:	d207      	bcs.n	8004074 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <prvAddNewTaskToReadyList+0xd0>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2000096c 	.word	0x2000096c
 8004080:	2000086c 	.word	0x2000086c
 8004084:	20000978 	.word	0x20000978
 8004088:	20000988 	.word	0x20000988
 800408c:	20000974 	.word	0x20000974
 8004090:	20000870 	.word	0x20000870
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d017      	beq.n	80040da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <vTaskDelay+0x60>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <vTaskDelay+0x30>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040c8:	f000 f86a 	bl	80041a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040cc:	2100      	movs	r1, #0
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fae6 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040d4:	f000 f872 	bl	80041bc <xTaskResumeAll>
 80040d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d107      	bne.n	80040f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <vTaskDelay+0x64>)
 80040e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000994 	.word	0x20000994
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <vTaskStartScheduler+0x80>)
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	2300      	movs	r3, #0
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2300      	movs	r3, #0
 8004110:	2280      	movs	r2, #128	; 0x80
 8004112:	491c      	ldr	r1, [pc, #112]	; (8004184 <vTaskStartScheduler+0x84>)
 8004114:	481c      	ldr	r0, [pc, #112]	; (8004188 <vTaskStartScheduler+0x88>)
 8004116:	f7ff fe75 	bl	8003e04 <xTaskCreate>
 800411a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d11b      	bne.n	800415a <vTaskStartScheduler+0x5a>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60bb      	str	r3, [r7, #8]
}
 8004134:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <vTaskStartScheduler+0x8c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	334c      	adds	r3, #76	; 0x4c
 800413c:	4a14      	ldr	r2, [pc, #80]	; (8004190 <vTaskStartScheduler+0x90>)
 800413e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <vTaskStartScheduler+0x94>)
 8004142:	f04f 32ff 	mov.w	r2, #4294967295
 8004146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <vTaskStartScheduler+0x98>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <vTaskStartScheduler+0x9c>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004154:	f000 fb94 	bl	8004880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004158:	e00e      	b.n	8004178 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d10a      	bne.n	8004178 <vTaskStartScheduler+0x78>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	607b      	str	r3, [r7, #4]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <vTaskStartScheduler+0x76>
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000990 	.word	0x20000990
 8004184:	080060b4 	.word	0x080060b4
 8004188:	08004529 	.word	0x08004529
 800418c:	2000086c 	.word	0x2000086c
 8004190:	20000018 	.word	0x20000018
 8004194:	2000098c 	.word	0x2000098c
 8004198:	20000978 	.word	0x20000978
 800419c:	20000970 	.word	0x20000970

080041a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <vTaskSuspendAll+0x18>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <vTaskSuspendAll+0x18>)
 80041ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	20000994 	.word	0x20000994

080041bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <xTaskResumeAll+0x114>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	603b      	str	r3, [r7, #0]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041e8:	f000 fbec 	bl	80049c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041ec:	4b38      	ldr	r3, [pc, #224]	; (80042d0 <xTaskResumeAll+0x114>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <xTaskResumeAll+0x114>)
 80041f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <xTaskResumeAll+0x114>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d161      	bne.n	80042c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041fe:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <xTaskResumeAll+0x118>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d05d      	beq.n	80042c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004206:	e02e      	b.n	8004266 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004208:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <xTaskResumeAll+0x11c>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3318      	adds	r3, #24
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fdcb 	bl	8003db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3304      	adds	r3, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fdc6 	bl	8003db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2201      	movs	r2, #1
 800422a:	409a      	lsls	r2, r3
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <xTaskResumeAll+0x120>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4313      	orrs	r3, r2
 8004232:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <xTaskResumeAll+0x120>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <xTaskResumeAll+0x124>)
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7ff fd52 	bl	8003cf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <xTaskResumeAll+0x128>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	429a      	cmp	r2, r3
 800425e:	d302      	bcc.n	8004266 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <xTaskResumeAll+0x12c>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004266:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <xTaskResumeAll+0x11c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1cc      	bne.n	8004208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004274:	f000 f9f4 	bl	8004660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004278:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <xTaskResumeAll+0x130>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004284:	f000 f836 	bl	80042f4 <xTaskIncrementTick>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <xTaskResumeAll+0x12c>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f1      	bne.n	8004284 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <xTaskResumeAll+0x130>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <xTaskResumeAll+0x12c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <xTaskResumeAll+0x134>)
 80042b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042c2:	f000 fbaf 	bl	8004a24 <vPortExitCritical>

	return xAlreadyYielded;
 80042c6:	68bb      	ldr	r3, [r7, #8]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000994 	.word	0x20000994
 80042d4:	2000096c 	.word	0x2000096c
 80042d8:	2000092c 	.word	0x2000092c
 80042dc:	20000974 	.word	0x20000974
 80042e0:	20000870 	.word	0x20000870
 80042e4:	2000086c 	.word	0x2000086c
 80042e8:	20000980 	.word	0x20000980
 80042ec:	2000097c 	.word	0x2000097c
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042fe:	4b4e      	ldr	r3, [pc, #312]	; (8004438 <xTaskIncrementTick+0x144>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 808e 	bne.w	8004424 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <xTaskIncrementTick+0x148>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004310:	4a4a      	ldr	r2, [pc, #296]	; (800443c <xTaskIncrementTick+0x148>)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d120      	bne.n	800435e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800431c:	4b48      	ldr	r3, [pc, #288]	; (8004440 <xTaskIncrementTick+0x14c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <xTaskIncrementTick+0x48>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	603b      	str	r3, [r7, #0]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xTaskIncrementTick+0x46>
 800433c:	4b40      	ldr	r3, [pc, #256]	; (8004440 <xTaskIncrementTick+0x14c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	4b40      	ldr	r3, [pc, #256]	; (8004444 <xTaskIncrementTick+0x150>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a3e      	ldr	r2, [pc, #248]	; (8004440 <xTaskIncrementTick+0x14c>)
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4a3e      	ldr	r2, [pc, #248]	; (8004444 <xTaskIncrementTick+0x150>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <xTaskIncrementTick+0x154>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <xTaskIncrementTick+0x154>)
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	f000 f981 	bl	8004660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <xTaskIncrementTick+0x158>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d348      	bcc.n	80043fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004368:	4b35      	ldr	r3, [pc, #212]	; (8004440 <xTaskIncrementTick+0x14c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <xTaskIncrementTick+0x158>)
 8004374:	f04f 32ff 	mov.w	r2, #4294967295
 8004378:	601a      	str	r2, [r3, #0]
					break;
 800437a:	e03e      	b.n	80043fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800437c:	4b30      	ldr	r3, [pc, #192]	; (8004440 <xTaskIncrementTick+0x14c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d203      	bcs.n	800439c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004394:	4a2d      	ldr	r2, [pc, #180]	; (800444c <xTaskIncrementTick+0x158>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800439a:	e02e      	b.n	80043fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fd05 	bl	8003db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d004      	beq.n	80043b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3318      	adds	r3, #24
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fcfc 	bl	8003db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <xTaskIncrementTick+0x15c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <xTaskIncrementTick+0x15c>)
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <xTaskIncrementTick+0x160>)
 80043d8:	441a      	add	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7ff fc88 	bl	8003cf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <xTaskIncrementTick+0x164>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d3b9      	bcc.n	8004368 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f8:	e7b6      	b.n	8004368 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <xTaskIncrementTick+0x164>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4914      	ldr	r1, [pc, #80]	; (8004454 <xTaskIncrementTick+0x160>)
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d901      	bls.n	8004416 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <xTaskIncrementTick+0x168>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800441e:	2301      	movs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e004      	b.n	800442e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <xTaskIncrementTick+0x16c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <xTaskIncrementTick+0x16c>)
 800442c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800442e:	697b      	ldr	r3, [r7, #20]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000994 	.word	0x20000994
 800443c:	20000970 	.word	0x20000970
 8004440:	20000924 	.word	0x20000924
 8004444:	20000928 	.word	0x20000928
 8004448:	20000984 	.word	0x20000984
 800444c:	2000098c 	.word	0x2000098c
 8004450:	20000974 	.word	0x20000974
 8004454:	20000870 	.word	0x20000870
 8004458:	2000086c 	.word	0x2000086c
 800445c:	20000980 	.word	0x20000980
 8004460:	2000097c 	.word	0x2000097c

08004464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <vTaskSwitchContext+0xac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004472:	4b28      	ldr	r3, [pc, #160]	; (8004514 <vTaskSwitchContext+0xb0>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004478:	e044      	b.n	8004504 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <vTaskSwitchContext+0xb0>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <vTaskSwitchContext+0xb4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	fab3 f383 	clz	r3, r3
 800448c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	f1c3 031f 	rsb	r3, r3, #31
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	4921      	ldr	r1, [pc, #132]	; (800451c <vTaskSwitchContext+0xb8>)
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	607b      	str	r3, [r7, #4]
}
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <vTaskSwitchContext+0x5a>
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <vTaskSwitchContext+0xb8>)
 80044cc:	4413      	add	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3308      	adds	r3, #8
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d104      	bne.n	80044f0 <vTaskSwitchContext+0x8c>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <vTaskSwitchContext+0xbc>)
 80044f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <vTaskSwitchContext+0xbc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	334c      	adds	r3, #76	; 0x4c
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <vTaskSwitchContext+0xc0>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20000994 	.word	0x20000994
 8004514:	20000980 	.word	0x20000980
 8004518:	20000974 	.word	0x20000974
 800451c:	20000870 	.word	0x20000870
 8004520:	2000086c 	.word	0x2000086c
 8004524:	20000018 	.word	0x20000018

08004528 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004530:	f000 f852 	bl	80045d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <prvIdleTask+0x28>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d9f9      	bls.n	8004530 <prvIdleTask+0x8>
			{
				taskYIELD();
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <prvIdleTask+0x2c>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800454c:	e7f0      	b.n	8004530 <prvIdleTask+0x8>
 800454e:	bf00      	nop
 8004550:	20000870 	.word	0x20000870
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	e00c      	b.n	800457e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <prvInitialiseTaskLists+0x60>)
 8004570:	4413      	add	r3, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fb92 	bl	8003c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3301      	adds	r3, #1
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b06      	cmp	r3, #6
 8004582:	d9ef      	bls.n	8004564 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004584:	480d      	ldr	r0, [pc, #52]	; (80045bc <prvInitialiseTaskLists+0x64>)
 8004586:	f7ff fb89 	bl	8003c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800458a:	480d      	ldr	r0, [pc, #52]	; (80045c0 <prvInitialiseTaskLists+0x68>)
 800458c:	f7ff fb86 	bl	8003c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004590:	480c      	ldr	r0, [pc, #48]	; (80045c4 <prvInitialiseTaskLists+0x6c>)
 8004592:	f7ff fb83 	bl	8003c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004596:	480c      	ldr	r0, [pc, #48]	; (80045c8 <prvInitialiseTaskLists+0x70>)
 8004598:	f7ff fb80 	bl	8003c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800459c:	480b      	ldr	r0, [pc, #44]	; (80045cc <prvInitialiseTaskLists+0x74>)
 800459e:	f7ff fb7d 	bl	8003c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <prvInitialiseTaskLists+0x78>)
 80045a4:	4a05      	ldr	r2, [pc, #20]	; (80045bc <prvInitialiseTaskLists+0x64>)
 80045a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <prvInitialiseTaskLists+0x7c>)
 80045aa:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <prvInitialiseTaskLists+0x68>)
 80045ac:	601a      	str	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000870 	.word	0x20000870
 80045bc:	200008fc 	.word	0x200008fc
 80045c0:	20000910 	.word	0x20000910
 80045c4:	2000092c 	.word	0x2000092c
 80045c8:	20000940 	.word	0x20000940
 80045cc:	20000958 	.word	0x20000958
 80045d0:	20000924 	.word	0x20000924
 80045d4:	20000928 	.word	0x20000928

080045d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045de:	e019      	b.n	8004614 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045e0:	f000 f9f0 	bl	80049c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <prvCheckTasksWaitingTermination+0x50>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fbdd 	bl	8003db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <prvCheckTasksWaitingTermination+0x54>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <prvCheckTasksWaitingTermination+0x54>)
 80045fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <prvCheckTasksWaitingTermination+0x58>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3b01      	subs	r3, #1
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <prvCheckTasksWaitingTermination+0x58>)
 8004608:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800460a:	f000 fa0b 	bl	8004a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f810 	bl	8004634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <prvCheckTasksWaitingTermination+0x58>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e1      	bne.n	80045e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000940 	.word	0x20000940
 800462c:	2000096c 	.word	0x2000096c
 8004630:	20000954 	.word	0x20000954

08004634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	334c      	adds	r3, #76	; 0x4c
 8004640:	4618      	mov	r0, r3
 8004642:	f000 ff91 	bl	8005568 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fb68 	bl	8004d20 <vPortFree>
			vPortFree( pxTCB );
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb65 	bl	8004d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004666:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <prvResetNextTaskUnblockTime+0x38>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <prvResetNextTaskUnblockTime+0x3c>)
 8004672:	f04f 32ff 	mov.w	r2, #4294967295
 8004676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004678:	e008      	b.n	800468c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <prvResetNextTaskUnblockTime+0x38>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <prvResetNextTaskUnblockTime+0x3c>)
 800468a:	6013      	str	r3, [r2, #0]
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	20000924 	.word	0x20000924
 800469c:	2000098c 	.word	0x2000098c

080046a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046aa:	4b29      	ldr	r3, [pc, #164]	; (8004750 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fb7a 	bl	8003db0 <uxListRemove>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046c2:	4b24      	ldr	r3, [pc, #144]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	2201      	movs	r2, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43da      	mvns	r2, r3
 80046d0:	4b21      	ldr	r3, [pc, #132]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4013      	ands	r3, r2
 80046d6:	4a20      	ldr	r2, [pc, #128]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d10a      	bne.n	80046f8 <prvAddCurrentTaskToDelayedList+0x58>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	481a      	ldr	r0, [pc, #104]	; (800475c <prvAddCurrentTaskToDelayedList+0xbc>)
 80046f2:	f7ff fb00 	bl	8003cf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046f6:	e026      	b.n	8004746 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d209      	bcs.n	8004724 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f7ff fb0e 	bl	8003d3e <vListInsert>
}
 8004722:	e010      	b.n	8004746 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7ff fb04 	bl	8003d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d202      	bcs.n	8004746 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004740:	4a09      	ldr	r2, [pc, #36]	; (8004768 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6013      	str	r3, [r2, #0]
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000970 	.word	0x20000970
 8004754:	2000086c 	.word	0x2000086c
 8004758:	20000974 	.word	0x20000974
 800475c:	20000958 	.word	0x20000958
 8004760:	20000928 	.word	0x20000928
 8004764:	20000924 	.word	0x20000924
 8004768:	2000098c 	.word	0x2000098c

0800476c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3b04      	subs	r3, #4
 800477c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3b04      	subs	r3, #4
 800478a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b04      	subs	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800479c:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <pxPortInitialiseStack+0x64>)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3b14      	subs	r3, #20
 80047a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3b04      	subs	r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f06f 0202 	mvn.w	r2, #2
 80047ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3b20      	subs	r3, #32
 80047c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047c2:	68fb      	ldr	r3, [r7, #12]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	080047d5 	.word	0x080047d5

080047d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <prvTaskExitError+0x54>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d00a      	beq.n	80047fe <prvTaskExitError+0x2a>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	60fb      	str	r3, [r7, #12]
}
 80047fa:	bf00      	nop
 80047fc:	e7fe      	b.n	80047fc <prvTaskExitError+0x28>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60bb      	str	r3, [r7, #8]
}
 8004810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004812:	bf00      	nop
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0fc      	beq.n	8004814 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800481a:	bf00      	nop
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000014 	.word	0x20000014
 800482c:	00000000 	.word	0x00000000

08004830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <pxCurrentTCBConst2>)
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	6808      	ldr	r0, [r1, #0]
 8004836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483a:	f380 8809 	msr	PSP, r0
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8811 	msr	BASEPRI, r0
 800484a:	4770      	bx	lr
 800484c:	f3af 8000 	nop.w

08004850 <pxCurrentTCBConst2>:
 8004850:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop

08004858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <prvPortStartFirstTask+0x24>)
 800485a:	6800      	ldr	r0, [r0, #0]
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	f380 8808 	msr	MSP, r0
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8814 	msr	CONTROL, r0
 800486a:	b662      	cpsie	i
 800486c:	b661      	cpsie	f
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	df00      	svc	0
 8004878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800487a:	bf00      	nop
 800487c:	e000ed08 	.word	0xe000ed08

08004880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004886:	4b46      	ldr	r3, [pc, #280]	; (80049a0 <xPortStartScheduler+0x120>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a46      	ldr	r2, [pc, #280]	; (80049a4 <xPortStartScheduler+0x124>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10a      	bne.n	80048a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	613b      	str	r3, [r7, #16]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048a6:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <xPortStartScheduler+0x120>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3f      	ldr	r2, [pc, #252]	; (80049a8 <xPortStartScheduler+0x128>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10a      	bne.n	80048c6 <xPortStartScheduler+0x46>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048c6:	4b39      	ldr	r3, [pc, #228]	; (80049ac <xPortStartScheduler+0x12c>)
 80048c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	22ff      	movs	r2, #255	; 0xff
 80048d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <xPortStartScheduler+0x130>)
 80048ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ee:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <xPortStartScheduler+0x134>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048f4:	e009      	b.n	800490a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048f6:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <xPortStartScheduler+0x134>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <xPortStartScheduler+0x134>)
 80048fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	b2db      	uxtb	r3, r3
 8004908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d0ef      	beq.n	80048f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <xPortStartScheduler+0x134>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1c3 0307 	rsb	r3, r3, #7
 800491e:	2b04      	cmp	r3, #4
 8004920:	d00a      	beq.n	8004938 <xPortStartScheduler+0xb8>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60bb      	str	r3, [r7, #8]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004938:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <xPortStartScheduler+0x134>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <xPortStartScheduler+0x134>)
 8004940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <xPortStartScheduler+0x134>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <xPortStartScheduler+0x134>)
 800494c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <xPortStartScheduler+0x138>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <xPortStartScheduler+0x138>)
 800495c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <xPortStartScheduler+0x138>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <xPortStartScheduler+0x138>)
 8004968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800496c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800496e:	f000 f8dd 	bl	8004b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <xPortStartScheduler+0x13c>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004978:	f000 f8fc 	bl	8004b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <xPortStartScheduler+0x140>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <xPortStartScheduler+0x140>)
 8004982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004988:	f7ff ff66 	bl	8004858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800498c:	f7ff fd6a 	bl	8004464 <vTaskSwitchContext>
	prvTaskExitError();
 8004990:	f7ff ff20 	bl	80047d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	e000ed00 	.word	0xe000ed00
 80049a4:	410fc271 	.word	0x410fc271
 80049a8:	410fc270 	.word	0x410fc270
 80049ac:	e000e400 	.word	0xe000e400
 80049b0:	20000998 	.word	0x20000998
 80049b4:	2000099c 	.word	0x2000099c
 80049b8:	e000ed20 	.word	0xe000ed20
 80049bc:	20000014 	.word	0x20000014
 80049c0:	e000ef34 	.word	0xe000ef34

080049c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	607b      	str	r3, [r7, #4]
}
 80049dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049de:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <vPortEnterCritical+0x58>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <vPortEnterCritical+0x58>)
 80049e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <vPortEnterCritical+0x58>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d10f      	bne.n	8004a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <vPortEnterCritical+0x5c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	603b      	str	r3, [r7, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <vPortEnterCritical+0x4a>
	}
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000014 	.word	0x20000014
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <vPortExitCritical+0x50>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <vPortExitCritical+0x24>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	607b      	str	r3, [r7, #4]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <vPortExitCritical+0x50>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <vPortExitCritical+0x50>)
 8004a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <vPortExitCritical+0x50>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <vPortExitCritical+0x42>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000014 	.word	0x20000014
	...

08004a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a80:	f3ef 8009 	mrs	r0, PSP
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <pxCurrentTCBConst>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f01e 0f10 	tst.w	lr, #16
 8004a90:	bf08      	it	eq
 8004a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9a:	6010      	str	r0, [r2, #0]
 8004a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004aa4:	f380 8811 	msr	BASEPRI, r0
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f7ff fcd8 	bl	8004464 <vTaskSwitchContext>
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f380 8811 	msr	BASEPRI, r0
 8004abc:	bc09      	pop	{r0, r3}
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	6808      	ldr	r0, [r1, #0]
 8004ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac6:	f01e 0f10 	tst.w	lr, #16
 8004aca:	bf08      	it	eq
 8004acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ad0:	f380 8809 	msr	PSP, r0
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst>:
 8004ae0:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	607b      	str	r3, [r7, #4]
}
 8004b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b02:	f7ff fbf7 	bl	80042f4 <xTaskIncrementTick>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <SysTick_Handler+0x40>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f383 8811 	msr	BASEPRI, r3
}
 8004b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <vPortSetupTimerInterrupt+0x34>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <vPortSetupTimerInterrupt+0x38>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <vPortSetupTimerInterrupt+0x3c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <vPortSetupTimerInterrupt+0x40>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <vPortSetupTimerInterrupt+0x44>)
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <vPortSetupTimerInterrupt+0x34>)
 8004b50:	2207      	movs	r2, #7
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	e000e010 	.word	0xe000e010
 8004b64:	e000e018 	.word	0xe000e018
 8004b68:	20000008 	.word	0x20000008
 8004b6c:	10624dd3 	.word	0x10624dd3
 8004b70:	e000e014 	.word	0xe000e014

08004b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b84 <vPortEnableVFP+0x10>
 8004b78:	6801      	ldr	r1, [r0, #0]
 8004b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b7e:	6001      	str	r1, [r0, #0]
 8004b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b82:	bf00      	nop
 8004b84:	e000ed88 	.word	0xe000ed88

08004b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b94:	f7ff fb04 	bl	80041a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b98:	4b5b      	ldr	r3, [pc, #364]	; (8004d08 <pvPortMalloc+0x180>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ba0:	f000 f920 	bl	8004de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ba4:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <pvPortMalloc+0x184>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f040 8093 	bne.w	8004cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01d      	beq.n	8004bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004bb8:	2208      	movs	r2, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d014      	beq.n	8004bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f023 0307 	bic.w	r3, r3, #7
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	617b      	str	r3, [r7, #20]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d06e      	beq.n	8004cd8 <pvPortMalloc+0x150>
 8004bfa:	4b45      	ldr	r3, [pc, #276]	; (8004d10 <pvPortMalloc+0x188>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d869      	bhi.n	8004cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c04:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <pvPortMalloc+0x18c>)
 8004c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c08:	4b42      	ldr	r3, [pc, #264]	; (8004d14 <pvPortMalloc+0x18c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c0e:	e004      	b.n	8004c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d903      	bls.n	8004c2c <pvPortMalloc+0xa4>
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f1      	bne.n	8004c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c2c:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <pvPortMalloc+0x180>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d050      	beq.n	8004cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	4413      	add	r3, r2
 8004c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	2308      	movs	r3, #8
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d91f      	bls.n	8004c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <pvPortMalloc+0xf8>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	613b      	str	r3, [r7, #16]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c92:	69b8      	ldr	r0, [r7, #24]
 8004c94:	f000 f908 	bl	8004ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c98:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <pvPortMalloc+0x188>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <pvPortMalloc+0x188>)
 8004ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <pvPortMalloc+0x188>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <pvPortMalloc+0x190>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d203      	bcs.n	8004cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <pvPortMalloc+0x188>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <pvPortMalloc+0x190>)
 8004cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <pvPortMalloc+0x184>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <pvPortMalloc+0x194>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <pvPortMalloc+0x194>)
 8004cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cd8:	f7ff fa70 	bl	80041bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <pvPortMalloc+0x174>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60fb      	str	r3, [r7, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <pvPortMalloc+0x172>
	return pvReturn;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3728      	adds	r7, #40	; 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200045a8 	.word	0x200045a8
 8004d0c:	200045bc 	.word	0x200045bc
 8004d10:	200045ac 	.word	0x200045ac
 8004d14:	200045a0 	.word	0x200045a0
 8004d18:	200045b0 	.word	0x200045b0
 8004d1c:	200045b4 	.word	0x200045b4

08004d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d04d      	beq.n	8004dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d32:	2308      	movs	r3, #8
 8004d34:	425b      	negs	r3, r3
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4413      	add	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <vPortFree+0xb8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <vPortFree+0x44>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	60fb      	str	r3, [r7, #12]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <vPortFree+0x62>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60bb      	str	r3, [r7, #8]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <vPortFree+0xb8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01e      	beq.n	8004dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11a      	bne.n	8004dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <vPortFree+0xb8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	401a      	ands	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004da8:	f7ff f9fa 	bl	80041a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <vPortFree+0xbc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4413      	add	r3, r2
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <vPortFree+0xbc>)
 8004db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dba:	6938      	ldr	r0, [r7, #16]
 8004dbc:	f000 f874 	bl	8004ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <vPortFree+0xc0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	4a06      	ldr	r2, [pc, #24]	; (8004de0 <vPortFree+0xc0>)
 8004dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dca:	f7ff f9f7 	bl	80041bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dce:	bf00      	nop
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200045bc 	.word	0x200045bc
 8004ddc:	200045ac 	.word	0x200045ac
 8004de0:	200045b8 	.word	0x200045b8

08004de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004df0:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <prvHeapInit+0xac>)
 8004df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3307      	adds	r3, #7
 8004e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0307 	bic.w	r3, r3, #7
 8004e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <prvHeapInit+0xac>)
 8004e14:	4413      	add	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e1c:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <prvHeapInit+0xb0>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e22:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <prvHeapInit+0xb0>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e30:	2208      	movs	r2, #8
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <prvHeapInit+0xb4>)
 8004e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <prvHeapInit+0xb4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <prvHeapInit+0xb4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvHeapInit+0xb4>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <prvHeapInit+0xb8>)
 8004e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <prvHeapInit+0xbc>)
 8004e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <prvHeapInit+0xc0>)
 8004e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	200009a0 	.word	0x200009a0
 8004e94:	200045a0 	.word	0x200045a0
 8004e98:	200045a8 	.word	0x200045a8
 8004e9c:	200045b0 	.word	0x200045b0
 8004ea0:	200045ac 	.word	0x200045ac
 8004ea4:	200045bc 	.word	0x200045bc

08004ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004eb0:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <prvInsertBlockIntoFreeList+0xac>)
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e002      	b.n	8004ebc <prvInsertBlockIntoFreeList+0x14>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d8f7      	bhi.n	8004eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d108      	bne.n	8004eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	441a      	add	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d118      	bne.n	8004f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <prvInsertBlockIntoFreeList+0xb0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d00d      	beq.n	8004f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	441a      	add	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e008      	b.n	8004f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f26:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <prvInsertBlockIntoFreeList+0xb0>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e003      	b.n	8004f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d002      	beq.n	8004f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	200045a0 	.word	0x200045a0
 8004f58:	200045a8 	.word	0x200045a8

08004f5c <__errno>:
 8004f5c:	4b01      	ldr	r3, [pc, #4]	; (8004f64 <__errno+0x8>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000018 	.word	0x20000018

08004f68 <__sflush_r>:
 8004f68:	898a      	ldrh	r2, [r1, #12]
 8004f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6e:	4605      	mov	r5, r0
 8004f70:	0710      	lsls	r0, r2, #28
 8004f72:	460c      	mov	r4, r1
 8004f74:	d458      	bmi.n	8005028 <__sflush_r+0xc0>
 8004f76:	684b      	ldr	r3, [r1, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	dc05      	bgt.n	8004f88 <__sflush_r+0x20>
 8004f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dc02      	bgt.n	8004f88 <__sflush_r+0x20>
 8004f82:	2000      	movs	r0, #0
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f8a:	2e00      	cmp	r6, #0
 8004f8c:	d0f9      	beq.n	8004f82 <__sflush_r+0x1a>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f94:	682f      	ldr	r7, [r5, #0]
 8004f96:	602b      	str	r3, [r5, #0]
 8004f98:	d032      	beq.n	8005000 <__sflush_r+0x98>
 8004f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	075a      	lsls	r2, r3, #29
 8004fa0:	d505      	bpl.n	8004fae <__sflush_r+0x46>
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	1ac0      	subs	r0, r0, r3
 8004fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fa8:	b10b      	cbz	r3, 8004fae <__sflush_r+0x46>
 8004faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fac:	1ac0      	subs	r0, r0, r3
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fb4:	6a21      	ldr	r1, [r4, #32]
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b0      	blx	r6
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	d106      	bne.n	8004fce <__sflush_r+0x66>
 8004fc0:	6829      	ldr	r1, [r5, #0]
 8004fc2:	291d      	cmp	r1, #29
 8004fc4:	d82c      	bhi.n	8005020 <__sflush_r+0xb8>
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <__sflush_r+0x108>)
 8004fc8:	40ca      	lsrs	r2, r1
 8004fca:	07d6      	lsls	r6, r2, #31
 8004fcc:	d528      	bpl.n	8005020 <__sflush_r+0xb8>
 8004fce:	2200      	movs	r2, #0
 8004fd0:	6062      	str	r2, [r4, #4]
 8004fd2:	04d9      	lsls	r1, r3, #19
 8004fd4:	6922      	ldr	r2, [r4, #16]
 8004fd6:	6022      	str	r2, [r4, #0]
 8004fd8:	d504      	bpl.n	8004fe4 <__sflush_r+0x7c>
 8004fda:	1c42      	adds	r2, r0, #1
 8004fdc:	d101      	bne.n	8004fe2 <__sflush_r+0x7a>
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	b903      	cbnz	r3, 8004fe4 <__sflush_r+0x7c>
 8004fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8004fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fe6:	602f      	str	r7, [r5, #0]
 8004fe8:	2900      	cmp	r1, #0
 8004fea:	d0ca      	beq.n	8004f82 <__sflush_r+0x1a>
 8004fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	d002      	beq.n	8004ffa <__sflush_r+0x92>
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 f9b1 	bl	800535c <_free_r>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8004ffe:	e7c1      	b.n	8004f84 <__sflush_r+0x1c>
 8005000:	6a21      	ldr	r1, [r4, #32]
 8005002:	2301      	movs	r3, #1
 8005004:	4628      	mov	r0, r5
 8005006:	47b0      	blx	r6
 8005008:	1c41      	adds	r1, r0, #1
 800500a:	d1c7      	bne.n	8004f9c <__sflush_r+0x34>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0c4      	beq.n	8004f9c <__sflush_r+0x34>
 8005012:	2b1d      	cmp	r3, #29
 8005014:	d001      	beq.n	800501a <__sflush_r+0xb2>
 8005016:	2b16      	cmp	r3, #22
 8005018:	d101      	bne.n	800501e <__sflush_r+0xb6>
 800501a:	602f      	str	r7, [r5, #0]
 800501c:	e7b1      	b.n	8004f82 <__sflush_r+0x1a>
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	e7ad      	b.n	8004f84 <__sflush_r+0x1c>
 8005028:	690f      	ldr	r7, [r1, #16]
 800502a:	2f00      	cmp	r7, #0
 800502c:	d0a9      	beq.n	8004f82 <__sflush_r+0x1a>
 800502e:	0793      	lsls	r3, r2, #30
 8005030:	680e      	ldr	r6, [r1, #0]
 8005032:	bf08      	it	eq
 8005034:	694b      	ldreq	r3, [r1, #20]
 8005036:	600f      	str	r7, [r1, #0]
 8005038:	bf18      	it	ne
 800503a:	2300      	movne	r3, #0
 800503c:	eba6 0807 	sub.w	r8, r6, r7
 8005040:	608b      	str	r3, [r1, #8]
 8005042:	f1b8 0f00 	cmp.w	r8, #0
 8005046:	dd9c      	ble.n	8004f82 <__sflush_r+0x1a>
 8005048:	6a21      	ldr	r1, [r4, #32]
 800504a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800504c:	4643      	mov	r3, r8
 800504e:	463a      	mov	r2, r7
 8005050:	4628      	mov	r0, r5
 8005052:	47b0      	blx	r6
 8005054:	2800      	cmp	r0, #0
 8005056:	dc06      	bgt.n	8005066 <__sflush_r+0xfe>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800505e:	81a3      	strh	r3, [r4, #12]
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	e78e      	b.n	8004f84 <__sflush_r+0x1c>
 8005066:	4407      	add	r7, r0
 8005068:	eba8 0800 	sub.w	r8, r8, r0
 800506c:	e7e9      	b.n	8005042 <__sflush_r+0xda>
 800506e:	bf00      	nop
 8005070:	20400001 	.word	0x20400001

08005074 <_fflush_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	690b      	ldr	r3, [r1, #16]
 8005078:	4605      	mov	r5, r0
 800507a:	460c      	mov	r4, r1
 800507c:	b913      	cbnz	r3, 8005084 <_fflush_r+0x10>
 800507e:	2500      	movs	r5, #0
 8005080:	4628      	mov	r0, r5
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	b118      	cbz	r0, 800508e <_fflush_r+0x1a>
 8005086:	6983      	ldr	r3, [r0, #24]
 8005088:	b90b      	cbnz	r3, 800508e <_fflush_r+0x1a>
 800508a:	f000 f899 	bl	80051c0 <__sinit>
 800508e:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <_fflush_r+0x6c>)
 8005090:	429c      	cmp	r4, r3
 8005092:	d11b      	bne.n	80050cc <_fflush_r+0x58>
 8005094:	686c      	ldr	r4, [r5, #4]
 8005096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0ef      	beq.n	800507e <_fflush_r+0xa>
 800509e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050a0:	07d0      	lsls	r0, r2, #31
 80050a2:	d404      	bmi.n	80050ae <_fflush_r+0x3a>
 80050a4:	0599      	lsls	r1, r3, #22
 80050a6:	d402      	bmi.n	80050ae <_fflush_r+0x3a>
 80050a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050aa:	f000 f94c 	bl	8005346 <__retarget_lock_acquire_recursive>
 80050ae:	4628      	mov	r0, r5
 80050b0:	4621      	mov	r1, r4
 80050b2:	f7ff ff59 	bl	8004f68 <__sflush_r>
 80050b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050b8:	07da      	lsls	r2, r3, #31
 80050ba:	4605      	mov	r5, r0
 80050bc:	d4e0      	bmi.n	8005080 <_fflush_r+0xc>
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	059b      	lsls	r3, r3, #22
 80050c2:	d4dd      	bmi.n	8005080 <_fflush_r+0xc>
 80050c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c6:	f000 f93f 	bl	8005348 <__retarget_lock_release_recursive>
 80050ca:	e7d9      	b.n	8005080 <_fflush_r+0xc>
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <_fflush_r+0x70>)
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d101      	bne.n	80050d6 <_fflush_r+0x62>
 80050d2:	68ac      	ldr	r4, [r5, #8]
 80050d4:	e7df      	b.n	8005096 <_fflush_r+0x22>
 80050d6:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <_fflush_r+0x74>)
 80050d8:	429c      	cmp	r4, r3
 80050da:	bf08      	it	eq
 80050dc:	68ec      	ldreq	r4, [r5, #12]
 80050de:	e7da      	b.n	8005096 <_fflush_r+0x22>
 80050e0:	080060f4 	.word	0x080060f4
 80050e4:	08006114 	.word	0x08006114
 80050e8:	080060d4 	.word	0x080060d4

080050ec <fflush>:
 80050ec:	4601      	mov	r1, r0
 80050ee:	b920      	cbnz	r0, 80050fa <fflush+0xe>
 80050f0:	4b04      	ldr	r3, [pc, #16]	; (8005104 <fflush+0x18>)
 80050f2:	4905      	ldr	r1, [pc, #20]	; (8005108 <fflush+0x1c>)
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	f000 b8e1 	b.w	80052bc <_fwalk_reent>
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <fflush+0x20>)
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	f7ff bfb9 	b.w	8005074 <_fflush_r>
 8005102:	bf00      	nop
 8005104:	08006134 	.word	0x08006134
 8005108:	08005075 	.word	0x08005075
 800510c:	20000018 	.word	0x20000018

08005110 <std>:
 8005110:	2300      	movs	r3, #0
 8005112:	b510      	push	{r4, lr}
 8005114:	4604      	mov	r4, r0
 8005116:	e9c0 3300 	strd	r3, r3, [r0]
 800511a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800511e:	6083      	str	r3, [r0, #8]
 8005120:	8181      	strh	r1, [r0, #12]
 8005122:	6643      	str	r3, [r0, #100]	; 0x64
 8005124:	81c2      	strh	r2, [r0, #14]
 8005126:	6183      	str	r3, [r0, #24]
 8005128:	4619      	mov	r1, r3
 800512a:	2208      	movs	r2, #8
 800512c:	305c      	adds	r0, #92	; 0x5c
 800512e:	f000 f90c 	bl	800534a <memset>
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <std+0x38>)
 8005134:	6263      	str	r3, [r4, #36]	; 0x24
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <std+0x3c>)
 8005138:	62a3      	str	r3, [r4, #40]	; 0x28
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <std+0x40>)
 800513c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <std+0x44>)
 8005140:	6224      	str	r4, [r4, #32]
 8005142:	6323      	str	r3, [r4, #48]	; 0x30
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop
 8005148:	08005641 	.word	0x08005641
 800514c:	08005663 	.word	0x08005663
 8005150:	0800569b 	.word	0x0800569b
 8005154:	080056bf 	.word	0x080056bf

08005158 <_cleanup_r>:
 8005158:	4901      	ldr	r1, [pc, #4]	; (8005160 <_cleanup_r+0x8>)
 800515a:	f000 b8af 	b.w	80052bc <_fwalk_reent>
 800515e:	bf00      	nop
 8005160:	08005075 	.word	0x08005075

08005164 <__sfmoreglue>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	2268      	movs	r2, #104	; 0x68
 8005168:	1e4d      	subs	r5, r1, #1
 800516a:	4355      	muls	r5, r2
 800516c:	460e      	mov	r6, r1
 800516e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005172:	f000 f95f 	bl	8005434 <_malloc_r>
 8005176:	4604      	mov	r4, r0
 8005178:	b140      	cbz	r0, 800518c <__sfmoreglue+0x28>
 800517a:	2100      	movs	r1, #0
 800517c:	e9c0 1600 	strd	r1, r6, [r0]
 8005180:	300c      	adds	r0, #12
 8005182:	60a0      	str	r0, [r4, #8]
 8005184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005188:	f000 f8df 	bl	800534a <memset>
 800518c:	4620      	mov	r0, r4
 800518e:	bd70      	pop	{r4, r5, r6, pc}

08005190 <__sfp_lock_acquire>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_acquire+0x8>)
 8005192:	f000 b8d8 	b.w	8005346 <__retarget_lock_acquire_recursive>
 8005196:	bf00      	nop
 8005198:	200045c1 	.word	0x200045c1

0800519c <__sfp_lock_release>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_release+0x8>)
 800519e:	f000 b8d3 	b.w	8005348 <__retarget_lock_release_recursive>
 80051a2:	bf00      	nop
 80051a4:	200045c1 	.word	0x200045c1

080051a8 <__sinit_lock_acquire>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sinit_lock_acquire+0x8>)
 80051aa:	f000 b8cc 	b.w	8005346 <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	200045c2 	.word	0x200045c2

080051b4 <__sinit_lock_release>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__sinit_lock_release+0x8>)
 80051b6:	f000 b8c7 	b.w	8005348 <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	200045c2 	.word	0x200045c2

080051c0 <__sinit>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	4604      	mov	r4, r0
 80051c4:	f7ff fff0 	bl	80051a8 <__sinit_lock_acquire>
 80051c8:	69a3      	ldr	r3, [r4, #24]
 80051ca:	b11b      	cbz	r3, 80051d4 <__sinit+0x14>
 80051cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d0:	f7ff bff0 	b.w	80051b4 <__sinit_lock_release>
 80051d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051d8:	6523      	str	r3, [r4, #80]	; 0x50
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <__sinit+0x68>)
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <__sinit+0x6c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	bf04      	itt	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	61a3      	streq	r3, [r4, #24]
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 f820 	bl	8005230 <__sfp>
 80051f0:	6060      	str	r0, [r4, #4]
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 f81c 	bl	8005230 <__sfp>
 80051f8:	60a0      	str	r0, [r4, #8]
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f818 	bl	8005230 <__sfp>
 8005200:	2200      	movs	r2, #0
 8005202:	60e0      	str	r0, [r4, #12]
 8005204:	2104      	movs	r1, #4
 8005206:	6860      	ldr	r0, [r4, #4]
 8005208:	f7ff ff82 	bl	8005110 <std>
 800520c:	68a0      	ldr	r0, [r4, #8]
 800520e:	2201      	movs	r2, #1
 8005210:	2109      	movs	r1, #9
 8005212:	f7ff ff7d 	bl	8005110 <std>
 8005216:	68e0      	ldr	r0, [r4, #12]
 8005218:	2202      	movs	r2, #2
 800521a:	2112      	movs	r1, #18
 800521c:	f7ff ff78 	bl	8005110 <std>
 8005220:	2301      	movs	r3, #1
 8005222:	61a3      	str	r3, [r4, #24]
 8005224:	e7d2      	b.n	80051cc <__sinit+0xc>
 8005226:	bf00      	nop
 8005228:	08006134 	.word	0x08006134
 800522c:	08005159 	.word	0x08005159

08005230 <__sfp>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4607      	mov	r7, r0
 8005234:	f7ff ffac 	bl	8005190 <__sfp_lock_acquire>
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <__sfp+0x84>)
 800523a:	681e      	ldr	r6, [r3, #0]
 800523c:	69b3      	ldr	r3, [r6, #24]
 800523e:	b913      	cbnz	r3, 8005246 <__sfp+0x16>
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff ffbd 	bl	80051c0 <__sinit>
 8005246:	3648      	adds	r6, #72	; 0x48
 8005248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800524c:	3b01      	subs	r3, #1
 800524e:	d503      	bpl.n	8005258 <__sfp+0x28>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	b30b      	cbz	r3, 8005298 <__sfp+0x68>
 8005254:	6836      	ldr	r6, [r6, #0]
 8005256:	e7f7      	b.n	8005248 <__sfp+0x18>
 8005258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800525c:	b9d5      	cbnz	r5, 8005294 <__sfp+0x64>
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <__sfp+0x88>)
 8005260:	60e3      	str	r3, [r4, #12]
 8005262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005266:	6665      	str	r5, [r4, #100]	; 0x64
 8005268:	f000 f86c 	bl	8005344 <__retarget_lock_init_recursive>
 800526c:	f7ff ff96 	bl	800519c <__sfp_lock_release>
 8005270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005278:	6025      	str	r5, [r4, #0]
 800527a:	61a5      	str	r5, [r4, #24]
 800527c:	2208      	movs	r2, #8
 800527e:	4629      	mov	r1, r5
 8005280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005284:	f000 f861 	bl	800534a <memset>
 8005288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800528c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005290:	4620      	mov	r0, r4
 8005292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005294:	3468      	adds	r4, #104	; 0x68
 8005296:	e7d9      	b.n	800524c <__sfp+0x1c>
 8005298:	2104      	movs	r1, #4
 800529a:	4638      	mov	r0, r7
 800529c:	f7ff ff62 	bl	8005164 <__sfmoreglue>
 80052a0:	4604      	mov	r4, r0
 80052a2:	6030      	str	r0, [r6, #0]
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1d5      	bne.n	8005254 <__sfp+0x24>
 80052a8:	f7ff ff78 	bl	800519c <__sfp_lock_release>
 80052ac:	230c      	movs	r3, #12
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	e7ee      	b.n	8005290 <__sfp+0x60>
 80052b2:	bf00      	nop
 80052b4:	08006134 	.word	0x08006134
 80052b8:	ffff0001 	.word	0xffff0001

080052bc <_fwalk_reent>:
 80052bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c0:	4606      	mov	r6, r0
 80052c2:	4688      	mov	r8, r1
 80052c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052c8:	2700      	movs	r7, #0
 80052ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ce:	f1b9 0901 	subs.w	r9, r9, #1
 80052d2:	d505      	bpl.n	80052e0 <_fwalk_reent+0x24>
 80052d4:	6824      	ldr	r4, [r4, #0]
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d1f7      	bne.n	80052ca <_fwalk_reent+0xe>
 80052da:	4638      	mov	r0, r7
 80052dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e0:	89ab      	ldrh	r3, [r5, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d907      	bls.n	80052f6 <_fwalk_reent+0x3a>
 80052e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ea:	3301      	adds	r3, #1
 80052ec:	d003      	beq.n	80052f6 <_fwalk_reent+0x3a>
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	47c0      	blx	r8
 80052f4:	4307      	orrs	r7, r0
 80052f6:	3568      	adds	r5, #104	; 0x68
 80052f8:	e7e9      	b.n	80052ce <_fwalk_reent+0x12>
	...

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4d0d      	ldr	r5, [pc, #52]	; (8005334 <__libc_init_array+0x38>)
 8005300:	4c0d      	ldr	r4, [pc, #52]	; (8005338 <__libc_init_array+0x3c>)
 8005302:	1b64      	subs	r4, r4, r5
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	2600      	movs	r6, #0
 8005308:	42a6      	cmp	r6, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	4d0b      	ldr	r5, [pc, #44]	; (800533c <__libc_init_array+0x40>)
 800530e:	4c0c      	ldr	r4, [pc, #48]	; (8005340 <__libc_init_array+0x44>)
 8005310:	f000 fe62 	bl	8005fd8 <_init>
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	2600      	movs	r6, #0
 800531a:	42a6      	cmp	r6, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	f855 3b04 	ldr.w	r3, [r5], #4
 8005324:	4798      	blx	r3
 8005326:	3601      	adds	r6, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	f855 3b04 	ldr.w	r3, [r5], #4
 800532e:	4798      	blx	r3
 8005330:	3601      	adds	r6, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	08006174 	.word	0x08006174
 8005338:	08006174 	.word	0x08006174
 800533c:	08006174 	.word	0x08006174
 8005340:	08006178 	.word	0x08006178

08005344 <__retarget_lock_init_recursive>:
 8005344:	4770      	bx	lr

08005346 <__retarget_lock_acquire_recursive>:
 8005346:	4770      	bx	lr

08005348 <__retarget_lock_release_recursive>:
 8005348:	4770      	bx	lr

0800534a <memset>:
 800534a:	4402      	add	r2, r0
 800534c:	4603      	mov	r3, r0
 800534e:	4293      	cmp	r3, r2
 8005350:	d100      	bne.n	8005354 <memset+0xa>
 8005352:	4770      	bx	lr
 8005354:	f803 1b01 	strb.w	r1, [r3], #1
 8005358:	e7f9      	b.n	800534e <memset+0x4>
	...

0800535c <_free_r>:
 800535c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800535e:	2900      	cmp	r1, #0
 8005360:	d044      	beq.n	80053ec <_free_r+0x90>
 8005362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005366:	9001      	str	r0, [sp, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f1a1 0404 	sub.w	r4, r1, #4
 800536e:	bfb8      	it	lt
 8005370:	18e4      	addlt	r4, r4, r3
 8005372:	f000 f9dd 	bl	8005730 <__malloc_lock>
 8005376:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <_free_r+0x94>)
 8005378:	9801      	ldr	r0, [sp, #4]
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	b933      	cbnz	r3, 800538c <_free_r+0x30>
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	6014      	str	r4, [r2, #0]
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005388:	f000 b9d8 	b.w	800573c <__malloc_unlock>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d908      	bls.n	80053a2 <_free_r+0x46>
 8005390:	6825      	ldr	r5, [r4, #0]
 8005392:	1961      	adds	r1, r4, r5
 8005394:	428b      	cmp	r3, r1
 8005396:	bf01      	itttt	eq
 8005398:	6819      	ldreq	r1, [r3, #0]
 800539a:	685b      	ldreq	r3, [r3, #4]
 800539c:	1949      	addeq	r1, r1, r5
 800539e:	6021      	streq	r1, [r4, #0]
 80053a0:	e7ed      	b.n	800537e <_free_r+0x22>
 80053a2:	461a      	mov	r2, r3
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b10b      	cbz	r3, 80053ac <_free_r+0x50>
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d9fa      	bls.n	80053a2 <_free_r+0x46>
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	1855      	adds	r5, r2, r1
 80053b0:	42a5      	cmp	r5, r4
 80053b2:	d10b      	bne.n	80053cc <_free_r+0x70>
 80053b4:	6824      	ldr	r4, [r4, #0]
 80053b6:	4421      	add	r1, r4
 80053b8:	1854      	adds	r4, r2, r1
 80053ba:	42a3      	cmp	r3, r4
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	d1e0      	bne.n	8005382 <_free_r+0x26>
 80053c0:	681c      	ldr	r4, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	6053      	str	r3, [r2, #4]
 80053c6:	4421      	add	r1, r4
 80053c8:	6011      	str	r1, [r2, #0]
 80053ca:	e7da      	b.n	8005382 <_free_r+0x26>
 80053cc:	d902      	bls.n	80053d4 <_free_r+0x78>
 80053ce:	230c      	movs	r3, #12
 80053d0:	6003      	str	r3, [r0, #0]
 80053d2:	e7d6      	b.n	8005382 <_free_r+0x26>
 80053d4:	6825      	ldr	r5, [r4, #0]
 80053d6:	1961      	adds	r1, r4, r5
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf04      	itt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	6063      	str	r3, [r4, #4]
 80053e2:	bf04      	itt	eq
 80053e4:	1949      	addeq	r1, r1, r5
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	6054      	str	r4, [r2, #4]
 80053ea:	e7ca      	b.n	8005382 <_free_r+0x26>
 80053ec:	b003      	add	sp, #12
 80053ee:	bd30      	pop	{r4, r5, pc}
 80053f0:	200045c4 	.word	0x200045c4

080053f4 <sbrk_aligned>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4e0e      	ldr	r6, [pc, #56]	; (8005430 <sbrk_aligned+0x3c>)
 80053f8:	460c      	mov	r4, r1
 80053fa:	6831      	ldr	r1, [r6, #0]
 80053fc:	4605      	mov	r5, r0
 80053fe:	b911      	cbnz	r1, 8005406 <sbrk_aligned+0x12>
 8005400:	f000 f90e 	bl	8005620 <_sbrk_r>
 8005404:	6030      	str	r0, [r6, #0]
 8005406:	4621      	mov	r1, r4
 8005408:	4628      	mov	r0, r5
 800540a:	f000 f909 	bl	8005620 <_sbrk_r>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	d00a      	beq.n	8005428 <sbrk_aligned+0x34>
 8005412:	1cc4      	adds	r4, r0, #3
 8005414:	f024 0403 	bic.w	r4, r4, #3
 8005418:	42a0      	cmp	r0, r4
 800541a:	d007      	beq.n	800542c <sbrk_aligned+0x38>
 800541c:	1a21      	subs	r1, r4, r0
 800541e:	4628      	mov	r0, r5
 8005420:	f000 f8fe 	bl	8005620 <_sbrk_r>
 8005424:	3001      	adds	r0, #1
 8005426:	d101      	bne.n	800542c <sbrk_aligned+0x38>
 8005428:	f04f 34ff 	mov.w	r4, #4294967295
 800542c:	4620      	mov	r0, r4
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	200045c8 	.word	0x200045c8

08005434 <_malloc_r>:
 8005434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005438:	1ccd      	adds	r5, r1, #3
 800543a:	f025 0503 	bic.w	r5, r5, #3
 800543e:	3508      	adds	r5, #8
 8005440:	2d0c      	cmp	r5, #12
 8005442:	bf38      	it	cc
 8005444:	250c      	movcc	r5, #12
 8005446:	2d00      	cmp	r5, #0
 8005448:	4607      	mov	r7, r0
 800544a:	db01      	blt.n	8005450 <_malloc_r+0x1c>
 800544c:	42a9      	cmp	r1, r5
 800544e:	d905      	bls.n	800545c <_malloc_r+0x28>
 8005450:	230c      	movs	r3, #12
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	2600      	movs	r6, #0
 8005456:	4630      	mov	r0, r6
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545c:	4e2e      	ldr	r6, [pc, #184]	; (8005518 <_malloc_r+0xe4>)
 800545e:	f000 f967 	bl	8005730 <__malloc_lock>
 8005462:	6833      	ldr	r3, [r6, #0]
 8005464:	461c      	mov	r4, r3
 8005466:	bb34      	cbnz	r4, 80054b6 <_malloc_r+0x82>
 8005468:	4629      	mov	r1, r5
 800546a:	4638      	mov	r0, r7
 800546c:	f7ff ffc2 	bl	80053f4 <sbrk_aligned>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	4604      	mov	r4, r0
 8005474:	d14d      	bne.n	8005512 <_malloc_r+0xde>
 8005476:	6834      	ldr	r4, [r6, #0]
 8005478:	4626      	mov	r6, r4
 800547a:	2e00      	cmp	r6, #0
 800547c:	d140      	bne.n	8005500 <_malloc_r+0xcc>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	4631      	mov	r1, r6
 8005482:	4638      	mov	r0, r7
 8005484:	eb04 0803 	add.w	r8, r4, r3
 8005488:	f000 f8ca 	bl	8005620 <_sbrk_r>
 800548c:	4580      	cmp	r8, r0
 800548e:	d13a      	bne.n	8005506 <_malloc_r+0xd2>
 8005490:	6821      	ldr	r1, [r4, #0]
 8005492:	3503      	adds	r5, #3
 8005494:	1a6d      	subs	r5, r5, r1
 8005496:	f025 0503 	bic.w	r5, r5, #3
 800549a:	3508      	adds	r5, #8
 800549c:	2d0c      	cmp	r5, #12
 800549e:	bf38      	it	cc
 80054a0:	250c      	movcc	r5, #12
 80054a2:	4629      	mov	r1, r5
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff ffa5 	bl	80053f4 <sbrk_aligned>
 80054aa:	3001      	adds	r0, #1
 80054ac:	d02b      	beq.n	8005506 <_malloc_r+0xd2>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	442b      	add	r3, r5
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	e00e      	b.n	80054d4 <_malloc_r+0xa0>
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	1b52      	subs	r2, r2, r5
 80054ba:	d41e      	bmi.n	80054fa <_malloc_r+0xc6>
 80054bc:	2a0b      	cmp	r2, #11
 80054be:	d916      	bls.n	80054ee <_malloc_r+0xba>
 80054c0:	1961      	adds	r1, r4, r5
 80054c2:	42a3      	cmp	r3, r4
 80054c4:	6025      	str	r5, [r4, #0]
 80054c6:	bf18      	it	ne
 80054c8:	6059      	strne	r1, [r3, #4]
 80054ca:	6863      	ldr	r3, [r4, #4]
 80054cc:	bf08      	it	eq
 80054ce:	6031      	streq	r1, [r6, #0]
 80054d0:	5162      	str	r2, [r4, r5]
 80054d2:	604b      	str	r3, [r1, #4]
 80054d4:	4638      	mov	r0, r7
 80054d6:	f104 060b 	add.w	r6, r4, #11
 80054da:	f000 f92f 	bl	800573c <__malloc_unlock>
 80054de:	f026 0607 	bic.w	r6, r6, #7
 80054e2:	1d23      	adds	r3, r4, #4
 80054e4:	1af2      	subs	r2, r6, r3
 80054e6:	d0b6      	beq.n	8005456 <_malloc_r+0x22>
 80054e8:	1b9b      	subs	r3, r3, r6
 80054ea:	50a3      	str	r3, [r4, r2]
 80054ec:	e7b3      	b.n	8005456 <_malloc_r+0x22>
 80054ee:	6862      	ldr	r2, [r4, #4]
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	bf0c      	ite	eq
 80054f4:	6032      	streq	r2, [r6, #0]
 80054f6:	605a      	strne	r2, [r3, #4]
 80054f8:	e7ec      	b.n	80054d4 <_malloc_r+0xa0>
 80054fa:	4623      	mov	r3, r4
 80054fc:	6864      	ldr	r4, [r4, #4]
 80054fe:	e7b2      	b.n	8005466 <_malloc_r+0x32>
 8005500:	4634      	mov	r4, r6
 8005502:	6876      	ldr	r6, [r6, #4]
 8005504:	e7b9      	b.n	800547a <_malloc_r+0x46>
 8005506:	230c      	movs	r3, #12
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4638      	mov	r0, r7
 800550c:	f000 f916 	bl	800573c <__malloc_unlock>
 8005510:	e7a1      	b.n	8005456 <_malloc_r+0x22>
 8005512:	6025      	str	r5, [r4, #0]
 8005514:	e7de      	b.n	80054d4 <_malloc_r+0xa0>
 8005516:	bf00      	nop
 8005518:	200045c4 	.word	0x200045c4

0800551c <iprintf>:
 800551c:	b40f      	push	{r0, r1, r2, r3}
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <iprintf+0x2c>)
 8005520:	b513      	push	{r0, r1, r4, lr}
 8005522:	681c      	ldr	r4, [r3, #0]
 8005524:	b124      	cbz	r4, 8005530 <iprintf+0x14>
 8005526:	69a3      	ldr	r3, [r4, #24]
 8005528:	b913      	cbnz	r3, 8005530 <iprintf+0x14>
 800552a:	4620      	mov	r0, r4
 800552c:	f7ff fe48 	bl	80051c0 <__sinit>
 8005530:	ab05      	add	r3, sp, #20
 8005532:	9a04      	ldr	r2, [sp, #16]
 8005534:	68a1      	ldr	r1, [r4, #8]
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f92f 	bl	800579c <_vfiprintf_r>
 800553e:	b002      	add	sp, #8
 8005540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005544:	b004      	add	sp, #16
 8005546:	4770      	bx	lr
 8005548:	20000018 	.word	0x20000018

0800554c <cleanup_glue>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	460c      	mov	r4, r1
 8005550:	6809      	ldr	r1, [r1, #0]
 8005552:	4605      	mov	r5, r0
 8005554:	b109      	cbz	r1, 800555a <cleanup_glue+0xe>
 8005556:	f7ff fff9 	bl	800554c <cleanup_glue>
 800555a:	4621      	mov	r1, r4
 800555c:	4628      	mov	r0, r5
 800555e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005562:	f7ff befb 	b.w	800535c <_free_r>
	...

08005568 <_reclaim_reent>:
 8005568:	4b2c      	ldr	r3, [pc, #176]	; (800561c <_reclaim_reent+0xb4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4283      	cmp	r3, r0
 800556e:	b570      	push	{r4, r5, r6, lr}
 8005570:	4604      	mov	r4, r0
 8005572:	d051      	beq.n	8005618 <_reclaim_reent+0xb0>
 8005574:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005576:	b143      	cbz	r3, 800558a <_reclaim_reent+0x22>
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d14a      	bne.n	8005614 <_reclaim_reent+0xac>
 800557e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005580:	6819      	ldr	r1, [r3, #0]
 8005582:	b111      	cbz	r1, 800558a <_reclaim_reent+0x22>
 8005584:	4620      	mov	r0, r4
 8005586:	f7ff fee9 	bl	800535c <_free_r>
 800558a:	6961      	ldr	r1, [r4, #20]
 800558c:	b111      	cbz	r1, 8005594 <_reclaim_reent+0x2c>
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff fee4 	bl	800535c <_free_r>
 8005594:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005596:	b111      	cbz	r1, 800559e <_reclaim_reent+0x36>
 8005598:	4620      	mov	r0, r4
 800559a:	f7ff fedf 	bl	800535c <_free_r>
 800559e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055a0:	b111      	cbz	r1, 80055a8 <_reclaim_reent+0x40>
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7ff feda 	bl	800535c <_free_r>
 80055a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80055aa:	b111      	cbz	r1, 80055b2 <_reclaim_reent+0x4a>
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff fed5 	bl	800535c <_free_r>
 80055b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80055b4:	b111      	cbz	r1, 80055bc <_reclaim_reent+0x54>
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7ff fed0 	bl	800535c <_free_r>
 80055bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80055be:	b111      	cbz	r1, 80055c6 <_reclaim_reent+0x5e>
 80055c0:	4620      	mov	r0, r4
 80055c2:	f7ff fecb 	bl	800535c <_free_r>
 80055c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80055c8:	b111      	cbz	r1, 80055d0 <_reclaim_reent+0x68>
 80055ca:	4620      	mov	r0, r4
 80055cc:	f7ff fec6 	bl	800535c <_free_r>
 80055d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055d2:	b111      	cbz	r1, 80055da <_reclaim_reent+0x72>
 80055d4:	4620      	mov	r0, r4
 80055d6:	f7ff fec1 	bl	800535c <_free_r>
 80055da:	69a3      	ldr	r3, [r4, #24]
 80055dc:	b1e3      	cbz	r3, 8005618 <_reclaim_reent+0xb0>
 80055de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055e0:	4620      	mov	r0, r4
 80055e2:	4798      	blx	r3
 80055e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055e6:	b1b9      	cbz	r1, 8005618 <_reclaim_reent+0xb0>
 80055e8:	4620      	mov	r0, r4
 80055ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055ee:	f7ff bfad 	b.w	800554c <cleanup_glue>
 80055f2:	5949      	ldr	r1, [r1, r5]
 80055f4:	b941      	cbnz	r1, 8005608 <_reclaim_reent+0xa0>
 80055f6:	3504      	adds	r5, #4
 80055f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fa:	2d80      	cmp	r5, #128	; 0x80
 80055fc:	68d9      	ldr	r1, [r3, #12]
 80055fe:	d1f8      	bne.n	80055f2 <_reclaim_reent+0x8a>
 8005600:	4620      	mov	r0, r4
 8005602:	f7ff feab 	bl	800535c <_free_r>
 8005606:	e7ba      	b.n	800557e <_reclaim_reent+0x16>
 8005608:	680e      	ldr	r6, [r1, #0]
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff fea6 	bl	800535c <_free_r>
 8005610:	4631      	mov	r1, r6
 8005612:	e7ef      	b.n	80055f4 <_reclaim_reent+0x8c>
 8005614:	2500      	movs	r5, #0
 8005616:	e7ef      	b.n	80055f8 <_reclaim_reent+0x90>
 8005618:	bd70      	pop	{r4, r5, r6, pc}
 800561a:	bf00      	nop
 800561c:	20000018 	.word	0x20000018

08005620 <_sbrk_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d06      	ldr	r5, [pc, #24]	; (800563c <_sbrk_r+0x1c>)
 8005624:	2300      	movs	r3, #0
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb fcdc 	bl	8000fe8 <_sbrk>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_sbrk_r+0x1a>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_sbrk_r+0x1a>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	200045cc 	.word	0x200045cc

08005640 <__sread>:
 8005640:	b510      	push	{r4, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	f000 fb6c 	bl	8005d24 <_read_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	bfab      	itete	ge
 8005650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005652:	89a3      	ldrhlt	r3, [r4, #12]
 8005654:	181b      	addge	r3, r3, r0
 8005656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800565a:	bfac      	ite	ge
 800565c:	6563      	strge	r3, [r4, #84]	; 0x54
 800565e:	81a3      	strhlt	r3, [r4, #12]
 8005660:	bd10      	pop	{r4, pc}

08005662 <__swrite>:
 8005662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005666:	461f      	mov	r7, r3
 8005668:	898b      	ldrh	r3, [r1, #12]
 800566a:	05db      	lsls	r3, r3, #23
 800566c:	4605      	mov	r5, r0
 800566e:	460c      	mov	r4, r1
 8005670:	4616      	mov	r6, r2
 8005672:	d505      	bpl.n	8005680 <__swrite+0x1e>
 8005674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005678:	2302      	movs	r3, #2
 800567a:	2200      	movs	r2, #0
 800567c:	f000 f846 	bl	800570c <_lseek_r>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	4632      	mov	r2, r6
 800568e:	463b      	mov	r3, r7
 8005690:	4628      	mov	r0, r5
 8005692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005696:	f000 b817 	b.w	80056c8 <_write_r>

0800569a <__sseek>:
 800569a:	b510      	push	{r4, lr}
 800569c:	460c      	mov	r4, r1
 800569e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a2:	f000 f833 	bl	800570c <_lseek_r>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	bf15      	itete	ne
 80056ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056b6:	81a3      	strheq	r3, [r4, #12]
 80056b8:	bf18      	it	ne
 80056ba:	81a3      	strhne	r3, [r4, #12]
 80056bc:	bd10      	pop	{r4, pc}

080056be <__sclose>:
 80056be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c2:	f000 b813 	b.w	80056ec <_close_r>
	...

080056c8 <_write_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d07      	ldr	r5, [pc, #28]	; (80056e8 <_write_r+0x20>)
 80056cc:	4604      	mov	r4, r0
 80056ce:	4608      	mov	r0, r1
 80056d0:	4611      	mov	r1, r2
 80056d2:	2200      	movs	r2, #0
 80056d4:	602a      	str	r2, [r5, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f7fb fc35 	bl	8000f46 <_write>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_write_r+0x1e>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_write_r+0x1e>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	200045cc 	.word	0x200045cc

080056ec <_close_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d06      	ldr	r5, [pc, #24]	; (8005708 <_close_r+0x1c>)
 80056f0:	2300      	movs	r3, #0
 80056f2:	4604      	mov	r4, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fb fc41 	bl	8000f7e <_close>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_close_r+0x1a>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_close_r+0x1a>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	200045cc 	.word	0x200045cc

0800570c <_lseek_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d07      	ldr	r5, [pc, #28]	; (800572c <_lseek_r+0x20>)
 8005710:	4604      	mov	r4, r0
 8005712:	4608      	mov	r0, r1
 8005714:	4611      	mov	r1, r2
 8005716:	2200      	movs	r2, #0
 8005718:	602a      	str	r2, [r5, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	f7fb fc56 	bl	8000fcc <_lseek>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_lseek_r+0x1e>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	b103      	cbz	r3, 800572a <_lseek_r+0x1e>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	200045cc 	.word	0x200045cc

08005730 <__malloc_lock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_lock+0x8>)
 8005732:	f7ff be08 	b.w	8005346 <__retarget_lock_acquire_recursive>
 8005736:	bf00      	nop
 8005738:	200045c0 	.word	0x200045c0

0800573c <__malloc_unlock>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__malloc_unlock+0x8>)
 800573e:	f7ff be03 	b.w	8005348 <__retarget_lock_release_recursive>
 8005742:	bf00      	nop
 8005744:	200045c0 	.word	0x200045c0

08005748 <__sfputc_r>:
 8005748:	6893      	ldr	r3, [r2, #8]
 800574a:	3b01      	subs	r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	b410      	push	{r4}
 8005750:	6093      	str	r3, [r2, #8]
 8005752:	da08      	bge.n	8005766 <__sfputc_r+0x1e>
 8005754:	6994      	ldr	r4, [r2, #24]
 8005756:	42a3      	cmp	r3, r4
 8005758:	db01      	blt.n	800575e <__sfputc_r+0x16>
 800575a:	290a      	cmp	r1, #10
 800575c:	d103      	bne.n	8005766 <__sfputc_r+0x1e>
 800575e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005762:	f000 baf1 	b.w	8005d48 <__swbuf_r>
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	1c58      	adds	r0, r3, #1
 800576a:	6010      	str	r0, [r2, #0]
 800576c:	7019      	strb	r1, [r3, #0]
 800576e:	4608      	mov	r0, r1
 8005770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005774:	4770      	bx	lr

08005776 <__sfputs_r>:
 8005776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	4614      	mov	r4, r2
 800577e:	18d5      	adds	r5, r2, r3
 8005780:	42ac      	cmp	r4, r5
 8005782:	d101      	bne.n	8005788 <__sfputs_r+0x12>
 8005784:	2000      	movs	r0, #0
 8005786:	e007      	b.n	8005798 <__sfputs_r+0x22>
 8005788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578c:	463a      	mov	r2, r7
 800578e:	4630      	mov	r0, r6
 8005790:	f7ff ffda 	bl	8005748 <__sfputc_r>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d1f3      	bne.n	8005780 <__sfputs_r+0xa>
 8005798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800579c <_vfiprintf_r>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	460d      	mov	r5, r1
 80057a2:	b09d      	sub	sp, #116	; 0x74
 80057a4:	4614      	mov	r4, r2
 80057a6:	4698      	mov	r8, r3
 80057a8:	4606      	mov	r6, r0
 80057aa:	b118      	cbz	r0, 80057b4 <_vfiprintf_r+0x18>
 80057ac:	6983      	ldr	r3, [r0, #24]
 80057ae:	b90b      	cbnz	r3, 80057b4 <_vfiprintf_r+0x18>
 80057b0:	f7ff fd06 	bl	80051c0 <__sinit>
 80057b4:	4b89      	ldr	r3, [pc, #548]	; (80059dc <_vfiprintf_r+0x240>)
 80057b6:	429d      	cmp	r5, r3
 80057b8:	d11b      	bne.n	80057f2 <_vfiprintf_r+0x56>
 80057ba:	6875      	ldr	r5, [r6, #4]
 80057bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057be:	07d9      	lsls	r1, r3, #31
 80057c0:	d405      	bmi.n	80057ce <_vfiprintf_r+0x32>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	059a      	lsls	r2, r3, #22
 80057c6:	d402      	bmi.n	80057ce <_vfiprintf_r+0x32>
 80057c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ca:	f7ff fdbc 	bl	8005346 <__retarget_lock_acquire_recursive>
 80057ce:	89ab      	ldrh	r3, [r5, #12]
 80057d0:	071b      	lsls	r3, r3, #28
 80057d2:	d501      	bpl.n	80057d8 <_vfiprintf_r+0x3c>
 80057d4:	692b      	ldr	r3, [r5, #16]
 80057d6:	b9eb      	cbnz	r3, 8005814 <_vfiprintf_r+0x78>
 80057d8:	4629      	mov	r1, r5
 80057da:	4630      	mov	r0, r6
 80057dc:	f000 fb06 	bl	8005dec <__swsetup_r>
 80057e0:	b1c0      	cbz	r0, 8005814 <_vfiprintf_r+0x78>
 80057e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057e4:	07dc      	lsls	r4, r3, #31
 80057e6:	d50e      	bpl.n	8005806 <_vfiprintf_r+0x6a>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	b01d      	add	sp, #116	; 0x74
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f2:	4b7b      	ldr	r3, [pc, #492]	; (80059e0 <_vfiprintf_r+0x244>)
 80057f4:	429d      	cmp	r5, r3
 80057f6:	d101      	bne.n	80057fc <_vfiprintf_r+0x60>
 80057f8:	68b5      	ldr	r5, [r6, #8]
 80057fa:	e7df      	b.n	80057bc <_vfiprintf_r+0x20>
 80057fc:	4b79      	ldr	r3, [pc, #484]	; (80059e4 <_vfiprintf_r+0x248>)
 80057fe:	429d      	cmp	r5, r3
 8005800:	bf08      	it	eq
 8005802:	68f5      	ldreq	r5, [r6, #12]
 8005804:	e7da      	b.n	80057bc <_vfiprintf_r+0x20>
 8005806:	89ab      	ldrh	r3, [r5, #12]
 8005808:	0598      	lsls	r0, r3, #22
 800580a:	d4ed      	bmi.n	80057e8 <_vfiprintf_r+0x4c>
 800580c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800580e:	f7ff fd9b 	bl	8005348 <__retarget_lock_release_recursive>
 8005812:	e7e9      	b.n	80057e8 <_vfiprintf_r+0x4c>
 8005814:	2300      	movs	r3, #0
 8005816:	9309      	str	r3, [sp, #36]	; 0x24
 8005818:	2320      	movs	r3, #32
 800581a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800581e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005822:	2330      	movs	r3, #48	; 0x30
 8005824:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059e8 <_vfiprintf_r+0x24c>
 8005828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800582c:	f04f 0901 	mov.w	r9, #1
 8005830:	4623      	mov	r3, r4
 8005832:	469a      	mov	sl, r3
 8005834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005838:	b10a      	cbz	r2, 800583e <_vfiprintf_r+0xa2>
 800583a:	2a25      	cmp	r2, #37	; 0x25
 800583c:	d1f9      	bne.n	8005832 <_vfiprintf_r+0x96>
 800583e:	ebba 0b04 	subs.w	fp, sl, r4
 8005842:	d00b      	beq.n	800585c <_vfiprintf_r+0xc0>
 8005844:	465b      	mov	r3, fp
 8005846:	4622      	mov	r2, r4
 8005848:	4629      	mov	r1, r5
 800584a:	4630      	mov	r0, r6
 800584c:	f7ff ff93 	bl	8005776 <__sfputs_r>
 8005850:	3001      	adds	r0, #1
 8005852:	f000 80aa 	beq.w	80059aa <_vfiprintf_r+0x20e>
 8005856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005858:	445a      	add	r2, fp
 800585a:	9209      	str	r2, [sp, #36]	; 0x24
 800585c:	f89a 3000 	ldrb.w	r3, [sl]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80a2 	beq.w	80059aa <_vfiprintf_r+0x20e>
 8005866:	2300      	movs	r3, #0
 8005868:	f04f 32ff 	mov.w	r2, #4294967295
 800586c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005870:	f10a 0a01 	add.w	sl, sl, #1
 8005874:	9304      	str	r3, [sp, #16]
 8005876:	9307      	str	r3, [sp, #28]
 8005878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800587c:	931a      	str	r3, [sp, #104]	; 0x68
 800587e:	4654      	mov	r4, sl
 8005880:	2205      	movs	r2, #5
 8005882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005886:	4858      	ldr	r0, [pc, #352]	; (80059e8 <_vfiprintf_r+0x24c>)
 8005888:	f7fa fcb2 	bl	80001f0 <memchr>
 800588c:	9a04      	ldr	r2, [sp, #16]
 800588e:	b9d8      	cbnz	r0, 80058c8 <_vfiprintf_r+0x12c>
 8005890:	06d1      	lsls	r1, r2, #27
 8005892:	bf44      	itt	mi
 8005894:	2320      	movmi	r3, #32
 8005896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800589a:	0713      	lsls	r3, r2, #28
 800589c:	bf44      	itt	mi
 800589e:	232b      	movmi	r3, #43	; 0x2b
 80058a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058a4:	f89a 3000 	ldrb.w	r3, [sl]
 80058a8:	2b2a      	cmp	r3, #42	; 0x2a
 80058aa:	d015      	beq.n	80058d8 <_vfiprintf_r+0x13c>
 80058ac:	9a07      	ldr	r2, [sp, #28]
 80058ae:	4654      	mov	r4, sl
 80058b0:	2000      	movs	r0, #0
 80058b2:	f04f 0c0a 	mov.w	ip, #10
 80058b6:	4621      	mov	r1, r4
 80058b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058bc:	3b30      	subs	r3, #48	; 0x30
 80058be:	2b09      	cmp	r3, #9
 80058c0:	d94e      	bls.n	8005960 <_vfiprintf_r+0x1c4>
 80058c2:	b1b0      	cbz	r0, 80058f2 <_vfiprintf_r+0x156>
 80058c4:	9207      	str	r2, [sp, #28]
 80058c6:	e014      	b.n	80058f2 <_vfiprintf_r+0x156>
 80058c8:	eba0 0308 	sub.w	r3, r0, r8
 80058cc:	fa09 f303 	lsl.w	r3, r9, r3
 80058d0:	4313      	orrs	r3, r2
 80058d2:	9304      	str	r3, [sp, #16]
 80058d4:	46a2      	mov	sl, r4
 80058d6:	e7d2      	b.n	800587e <_vfiprintf_r+0xe2>
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	1d19      	adds	r1, r3, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	9103      	str	r1, [sp, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bfbb      	ittet	lt
 80058e4:	425b      	neglt	r3, r3
 80058e6:	f042 0202 	orrlt.w	r2, r2, #2
 80058ea:	9307      	strge	r3, [sp, #28]
 80058ec:	9307      	strlt	r3, [sp, #28]
 80058ee:	bfb8      	it	lt
 80058f0:	9204      	strlt	r2, [sp, #16]
 80058f2:	7823      	ldrb	r3, [r4, #0]
 80058f4:	2b2e      	cmp	r3, #46	; 0x2e
 80058f6:	d10c      	bne.n	8005912 <_vfiprintf_r+0x176>
 80058f8:	7863      	ldrb	r3, [r4, #1]
 80058fa:	2b2a      	cmp	r3, #42	; 0x2a
 80058fc:	d135      	bne.n	800596a <_vfiprintf_r+0x1ce>
 80058fe:	9b03      	ldr	r3, [sp, #12]
 8005900:	1d1a      	adds	r2, r3, #4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	9203      	str	r2, [sp, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	bfb8      	it	lt
 800590a:	f04f 33ff 	movlt.w	r3, #4294967295
 800590e:	3402      	adds	r4, #2
 8005910:	9305      	str	r3, [sp, #20]
 8005912:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059f8 <_vfiprintf_r+0x25c>
 8005916:	7821      	ldrb	r1, [r4, #0]
 8005918:	2203      	movs	r2, #3
 800591a:	4650      	mov	r0, sl
 800591c:	f7fa fc68 	bl	80001f0 <memchr>
 8005920:	b140      	cbz	r0, 8005934 <_vfiprintf_r+0x198>
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	eba0 000a 	sub.w	r0, r0, sl
 8005928:	fa03 f000 	lsl.w	r0, r3, r0
 800592c:	9b04      	ldr	r3, [sp, #16]
 800592e:	4303      	orrs	r3, r0
 8005930:	3401      	adds	r4, #1
 8005932:	9304      	str	r3, [sp, #16]
 8005934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005938:	482c      	ldr	r0, [pc, #176]	; (80059ec <_vfiprintf_r+0x250>)
 800593a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800593e:	2206      	movs	r2, #6
 8005940:	f7fa fc56 	bl	80001f0 <memchr>
 8005944:	2800      	cmp	r0, #0
 8005946:	d03f      	beq.n	80059c8 <_vfiprintf_r+0x22c>
 8005948:	4b29      	ldr	r3, [pc, #164]	; (80059f0 <_vfiprintf_r+0x254>)
 800594a:	bb1b      	cbnz	r3, 8005994 <_vfiprintf_r+0x1f8>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	3307      	adds	r3, #7
 8005950:	f023 0307 	bic.w	r3, r3, #7
 8005954:	3308      	adds	r3, #8
 8005956:	9303      	str	r3, [sp, #12]
 8005958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800595a:	443b      	add	r3, r7
 800595c:	9309      	str	r3, [sp, #36]	; 0x24
 800595e:	e767      	b.n	8005830 <_vfiprintf_r+0x94>
 8005960:	fb0c 3202 	mla	r2, ip, r2, r3
 8005964:	460c      	mov	r4, r1
 8005966:	2001      	movs	r0, #1
 8005968:	e7a5      	b.n	80058b6 <_vfiprintf_r+0x11a>
 800596a:	2300      	movs	r3, #0
 800596c:	3401      	adds	r4, #1
 800596e:	9305      	str	r3, [sp, #20]
 8005970:	4619      	mov	r1, r3
 8005972:	f04f 0c0a 	mov.w	ip, #10
 8005976:	4620      	mov	r0, r4
 8005978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800597c:	3a30      	subs	r2, #48	; 0x30
 800597e:	2a09      	cmp	r2, #9
 8005980:	d903      	bls.n	800598a <_vfiprintf_r+0x1ee>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0c5      	beq.n	8005912 <_vfiprintf_r+0x176>
 8005986:	9105      	str	r1, [sp, #20]
 8005988:	e7c3      	b.n	8005912 <_vfiprintf_r+0x176>
 800598a:	fb0c 2101 	mla	r1, ip, r1, r2
 800598e:	4604      	mov	r4, r0
 8005990:	2301      	movs	r3, #1
 8005992:	e7f0      	b.n	8005976 <_vfiprintf_r+0x1da>
 8005994:	ab03      	add	r3, sp, #12
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	462a      	mov	r2, r5
 800599a:	4b16      	ldr	r3, [pc, #88]	; (80059f4 <_vfiprintf_r+0x258>)
 800599c:	a904      	add	r1, sp, #16
 800599e:	4630      	mov	r0, r6
 80059a0:	f3af 8000 	nop.w
 80059a4:	4607      	mov	r7, r0
 80059a6:	1c78      	adds	r0, r7, #1
 80059a8:	d1d6      	bne.n	8005958 <_vfiprintf_r+0x1bc>
 80059aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059ac:	07d9      	lsls	r1, r3, #31
 80059ae:	d405      	bmi.n	80059bc <_vfiprintf_r+0x220>
 80059b0:	89ab      	ldrh	r3, [r5, #12]
 80059b2:	059a      	lsls	r2, r3, #22
 80059b4:	d402      	bmi.n	80059bc <_vfiprintf_r+0x220>
 80059b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059b8:	f7ff fcc6 	bl	8005348 <__retarget_lock_release_recursive>
 80059bc:	89ab      	ldrh	r3, [r5, #12]
 80059be:	065b      	lsls	r3, r3, #25
 80059c0:	f53f af12 	bmi.w	80057e8 <_vfiprintf_r+0x4c>
 80059c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059c6:	e711      	b.n	80057ec <_vfiprintf_r+0x50>
 80059c8:	ab03      	add	r3, sp, #12
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	462a      	mov	r2, r5
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <_vfiprintf_r+0x258>)
 80059d0:	a904      	add	r1, sp, #16
 80059d2:	4630      	mov	r0, r6
 80059d4:	f000 f880 	bl	8005ad8 <_printf_i>
 80059d8:	e7e4      	b.n	80059a4 <_vfiprintf_r+0x208>
 80059da:	bf00      	nop
 80059dc:	080060f4 	.word	0x080060f4
 80059e0:	08006114 	.word	0x08006114
 80059e4:	080060d4 	.word	0x080060d4
 80059e8:	08006138 	.word	0x08006138
 80059ec:	08006142 	.word	0x08006142
 80059f0:	00000000 	.word	0x00000000
 80059f4:	08005777 	.word	0x08005777
 80059f8:	0800613e 	.word	0x0800613e

080059fc <_printf_common>:
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	4616      	mov	r6, r2
 8005a02:	4699      	mov	r9, r3
 8005a04:	688a      	ldr	r2, [r1, #8]
 8005a06:	690b      	ldr	r3, [r1, #16]
 8005a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	bfb8      	it	lt
 8005a10:	4613      	movlt	r3, r2
 8005a12:	6033      	str	r3, [r6, #0]
 8005a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a18:	4607      	mov	r7, r0
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	b10a      	cbz	r2, 8005a22 <_printf_common+0x26>
 8005a1e:	3301      	adds	r3, #1
 8005a20:	6033      	str	r3, [r6, #0]
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	0699      	lsls	r1, r3, #26
 8005a26:	bf42      	ittt	mi
 8005a28:	6833      	ldrmi	r3, [r6, #0]
 8005a2a:	3302      	addmi	r3, #2
 8005a2c:	6033      	strmi	r3, [r6, #0]
 8005a2e:	6825      	ldr	r5, [r4, #0]
 8005a30:	f015 0506 	ands.w	r5, r5, #6
 8005a34:	d106      	bne.n	8005a44 <_printf_common+0x48>
 8005a36:	f104 0a19 	add.w	sl, r4, #25
 8005a3a:	68e3      	ldr	r3, [r4, #12]
 8005a3c:	6832      	ldr	r2, [r6, #0]
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	42ab      	cmp	r3, r5
 8005a42:	dc26      	bgt.n	8005a92 <_printf_common+0x96>
 8005a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a48:	1e13      	subs	r3, r2, #0
 8005a4a:	6822      	ldr	r2, [r4, #0]
 8005a4c:	bf18      	it	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	0692      	lsls	r2, r2, #26
 8005a52:	d42b      	bmi.n	8005aac <_printf_common+0xb0>
 8005a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a58:	4649      	mov	r1, r9
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	47c0      	blx	r8
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d01e      	beq.n	8005aa0 <_printf_common+0xa4>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	68e5      	ldr	r5, [r4, #12]
 8005a66:	6832      	ldr	r2, [r6, #0]
 8005a68:	f003 0306 	and.w	r3, r3, #6
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	bf08      	it	eq
 8005a70:	1aad      	subeq	r5, r5, r2
 8005a72:	68a3      	ldr	r3, [r4, #8]
 8005a74:	6922      	ldr	r2, [r4, #16]
 8005a76:	bf0c      	ite	eq
 8005a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a7c:	2500      	movne	r5, #0
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	bfc4      	itt	gt
 8005a82:	1a9b      	subgt	r3, r3, r2
 8005a84:	18ed      	addgt	r5, r5, r3
 8005a86:	2600      	movs	r6, #0
 8005a88:	341a      	adds	r4, #26
 8005a8a:	42b5      	cmp	r5, r6
 8005a8c:	d11a      	bne.n	8005ac4 <_printf_common+0xc8>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	e008      	b.n	8005aa4 <_printf_common+0xa8>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4652      	mov	r2, sl
 8005a96:	4649      	mov	r1, r9
 8005a98:	4638      	mov	r0, r7
 8005a9a:	47c0      	blx	r8
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d103      	bne.n	8005aa8 <_printf_common+0xac>
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa8:	3501      	adds	r5, #1
 8005aaa:	e7c6      	b.n	8005a3a <_printf_common+0x3e>
 8005aac:	18e1      	adds	r1, r4, r3
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	2030      	movs	r0, #48	; 0x30
 8005ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ab6:	4422      	add	r2, r4
 8005ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	e7c7      	b.n	8005a54 <_printf_common+0x58>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	4649      	mov	r1, r9
 8005aca:	4638      	mov	r0, r7
 8005acc:	47c0      	blx	r8
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d0e6      	beq.n	8005aa0 <_printf_common+0xa4>
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7d9      	b.n	8005a8a <_printf_common+0x8e>
	...

08005ad8 <_printf_i>:
 8005ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	7e0f      	ldrb	r7, [r1, #24]
 8005ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ae0:	2f78      	cmp	r7, #120	; 0x78
 8005ae2:	4691      	mov	r9, r2
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	469a      	mov	sl, r3
 8005aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aee:	d807      	bhi.n	8005b00 <_printf_i+0x28>
 8005af0:	2f62      	cmp	r7, #98	; 0x62
 8005af2:	d80a      	bhi.n	8005b0a <_printf_i+0x32>
 8005af4:	2f00      	cmp	r7, #0
 8005af6:	f000 80d8 	beq.w	8005caa <_printf_i+0x1d2>
 8005afa:	2f58      	cmp	r7, #88	; 0x58
 8005afc:	f000 80a3 	beq.w	8005c46 <_printf_i+0x16e>
 8005b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b08:	e03a      	b.n	8005b80 <_printf_i+0xa8>
 8005b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b0e:	2b15      	cmp	r3, #21
 8005b10:	d8f6      	bhi.n	8005b00 <_printf_i+0x28>
 8005b12:	a101      	add	r1, pc, #4	; (adr r1, 8005b18 <_printf_i+0x40>)
 8005b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b85 	.word	0x08005b85
 8005b20:	08005b01 	.word	0x08005b01
 8005b24:	08005b01 	.word	0x08005b01
 8005b28:	08005b01 	.word	0x08005b01
 8005b2c:	08005b01 	.word	0x08005b01
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005b01 	.word	0x08005b01
 8005b38:	08005b01 	.word	0x08005b01
 8005b3c:	08005b01 	.word	0x08005b01
 8005b40:	08005b01 	.word	0x08005b01
 8005b44:	08005c91 	.word	0x08005c91
 8005b48:	08005bb5 	.word	0x08005bb5
 8005b4c:	08005c73 	.word	0x08005c73
 8005b50:	08005b01 	.word	0x08005b01
 8005b54:	08005b01 	.word	0x08005b01
 8005b58:	08005cb3 	.word	0x08005cb3
 8005b5c:	08005b01 	.word	0x08005b01
 8005b60:	08005bb5 	.word	0x08005bb5
 8005b64:	08005b01 	.word	0x08005b01
 8005b68:	08005b01 	.word	0x08005b01
 8005b6c:	08005c7b 	.word	0x08005c7b
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	1d1a      	adds	r2, r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	602a      	str	r2, [r5, #0]
 8005b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0a3      	b.n	8005ccc <_printf_i+0x1f4>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	6829      	ldr	r1, [r5, #0]
 8005b88:	0606      	lsls	r6, r0, #24
 8005b8a:	f101 0304 	add.w	r3, r1, #4
 8005b8e:	d50a      	bpl.n	8005ba6 <_printf_i+0xce>
 8005b90:	680e      	ldr	r6, [r1, #0]
 8005b92:	602b      	str	r3, [r5, #0]
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	da03      	bge.n	8005ba0 <_printf_i+0xc8>
 8005b98:	232d      	movs	r3, #45	; 0x2d
 8005b9a:	4276      	negs	r6, r6
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba0:	485e      	ldr	r0, [pc, #376]	; (8005d1c <_printf_i+0x244>)
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	e019      	b.n	8005bda <_printf_i+0x102>
 8005ba6:	680e      	ldr	r6, [r1, #0]
 8005ba8:	602b      	str	r3, [r5, #0]
 8005baa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bae:	bf18      	it	ne
 8005bb0:	b236      	sxthne	r6, r6
 8005bb2:	e7ef      	b.n	8005b94 <_printf_i+0xbc>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	1d19      	adds	r1, r3, #4
 8005bba:	6029      	str	r1, [r5, #0]
 8005bbc:	0601      	lsls	r1, r0, #24
 8005bbe:	d501      	bpl.n	8005bc4 <_printf_i+0xec>
 8005bc0:	681e      	ldr	r6, [r3, #0]
 8005bc2:	e002      	b.n	8005bca <_printf_i+0xf2>
 8005bc4:	0646      	lsls	r6, r0, #25
 8005bc6:	d5fb      	bpl.n	8005bc0 <_printf_i+0xe8>
 8005bc8:	881e      	ldrh	r6, [r3, #0]
 8005bca:	4854      	ldr	r0, [pc, #336]	; (8005d1c <_printf_i+0x244>)
 8005bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8005bce:	bf0c      	ite	eq
 8005bd0:	2308      	moveq	r3, #8
 8005bd2:	230a      	movne	r3, #10
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bda:	6865      	ldr	r5, [r4, #4]
 8005bdc:	60a5      	str	r5, [r4, #8]
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	bfa2      	ittt	ge
 8005be2:	6821      	ldrge	r1, [r4, #0]
 8005be4:	f021 0104 	bicge.w	r1, r1, #4
 8005be8:	6021      	strge	r1, [r4, #0]
 8005bea:	b90e      	cbnz	r6, 8005bf0 <_printf_i+0x118>
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	d04d      	beq.n	8005c8c <_printf_i+0x1b4>
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bf6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bfa:	5dc7      	ldrb	r7, [r0, r7]
 8005bfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c00:	4637      	mov	r7, r6
 8005c02:	42bb      	cmp	r3, r7
 8005c04:	460e      	mov	r6, r1
 8005c06:	d9f4      	bls.n	8005bf2 <_printf_i+0x11a>
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d10b      	bne.n	8005c24 <_printf_i+0x14c>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	07de      	lsls	r6, r3, #31
 8005c10:	d508      	bpl.n	8005c24 <_printf_i+0x14c>
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	6861      	ldr	r1, [r4, #4]
 8005c16:	4299      	cmp	r1, r3
 8005c18:	bfde      	ittt	le
 8005c1a:	2330      	movle	r3, #48	; 0x30
 8005c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c24:	1b52      	subs	r2, r2, r5
 8005c26:	6122      	str	r2, [r4, #16]
 8005c28:	f8cd a000 	str.w	sl, [sp]
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	aa03      	add	r2, sp, #12
 8005c30:	4621      	mov	r1, r4
 8005c32:	4640      	mov	r0, r8
 8005c34:	f7ff fee2 	bl	80059fc <_printf_common>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d14c      	bne.n	8005cd6 <_printf_i+0x1fe>
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	b004      	add	sp, #16
 8005c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c46:	4835      	ldr	r0, [pc, #212]	; (8005d1c <_printf_i+0x244>)
 8005c48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c4c:	6829      	ldr	r1, [r5, #0]
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c54:	6029      	str	r1, [r5, #0]
 8005c56:	061d      	lsls	r5, r3, #24
 8005c58:	d514      	bpl.n	8005c84 <_printf_i+0x1ac>
 8005c5a:	07df      	lsls	r7, r3, #31
 8005c5c:	bf44      	itt	mi
 8005c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c62:	6023      	strmi	r3, [r4, #0]
 8005c64:	b91e      	cbnz	r6, 8005c6e <_printf_i+0x196>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	f023 0320 	bic.w	r3, r3, #32
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	2310      	movs	r3, #16
 8005c70:	e7b0      	b.n	8005bd4 <_printf_i+0xfc>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f043 0320 	orr.w	r3, r3, #32
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	2378      	movs	r3, #120	; 0x78
 8005c7c:	4828      	ldr	r0, [pc, #160]	; (8005d20 <_printf_i+0x248>)
 8005c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c82:	e7e3      	b.n	8005c4c <_printf_i+0x174>
 8005c84:	0659      	lsls	r1, r3, #25
 8005c86:	bf48      	it	mi
 8005c88:	b2b6      	uxthmi	r6, r6
 8005c8a:	e7e6      	b.n	8005c5a <_printf_i+0x182>
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	e7bb      	b.n	8005c08 <_printf_i+0x130>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	6826      	ldr	r6, [r4, #0]
 8005c94:	6961      	ldr	r1, [r4, #20]
 8005c96:	1d18      	adds	r0, r3, #4
 8005c98:	6028      	str	r0, [r5, #0]
 8005c9a:	0635      	lsls	r5, r6, #24
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	d501      	bpl.n	8005ca4 <_printf_i+0x1cc>
 8005ca0:	6019      	str	r1, [r3, #0]
 8005ca2:	e002      	b.n	8005caa <_printf_i+0x1d2>
 8005ca4:	0670      	lsls	r0, r6, #25
 8005ca6:	d5fb      	bpl.n	8005ca0 <_printf_i+0x1c8>
 8005ca8:	8019      	strh	r1, [r3, #0]
 8005caa:	2300      	movs	r3, #0
 8005cac:	6123      	str	r3, [r4, #16]
 8005cae:	4615      	mov	r5, r2
 8005cb0:	e7ba      	b.n	8005c28 <_printf_i+0x150>
 8005cb2:	682b      	ldr	r3, [r5, #0]
 8005cb4:	1d1a      	adds	r2, r3, #4
 8005cb6:	602a      	str	r2, [r5, #0]
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	6862      	ldr	r2, [r4, #4]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7fa fa96 	bl	80001f0 <memchr>
 8005cc4:	b108      	cbz	r0, 8005cca <_printf_i+0x1f2>
 8005cc6:	1b40      	subs	r0, r0, r5
 8005cc8:	6060      	str	r0, [r4, #4]
 8005cca:	6863      	ldr	r3, [r4, #4]
 8005ccc:	6123      	str	r3, [r4, #16]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd4:	e7a8      	b.n	8005c28 <_printf_i+0x150>
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4649      	mov	r1, r9
 8005cdc:	4640      	mov	r0, r8
 8005cde:	47d0      	blx	sl
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d0ab      	beq.n	8005c3c <_printf_i+0x164>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	079b      	lsls	r3, r3, #30
 8005ce8:	d413      	bmi.n	8005d12 <_printf_i+0x23a>
 8005cea:	68e0      	ldr	r0, [r4, #12]
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	4298      	cmp	r0, r3
 8005cf0:	bfb8      	it	lt
 8005cf2:	4618      	movlt	r0, r3
 8005cf4:	e7a4      	b.n	8005c40 <_printf_i+0x168>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	47d0      	blx	sl
 8005d00:	3001      	adds	r0, #1
 8005d02:	d09b      	beq.n	8005c3c <_printf_i+0x164>
 8005d04:	3501      	adds	r5, #1
 8005d06:	68e3      	ldr	r3, [r4, #12]
 8005d08:	9903      	ldr	r1, [sp, #12]
 8005d0a:	1a5b      	subs	r3, r3, r1
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	dcf2      	bgt.n	8005cf6 <_printf_i+0x21e>
 8005d10:	e7eb      	b.n	8005cea <_printf_i+0x212>
 8005d12:	2500      	movs	r5, #0
 8005d14:	f104 0619 	add.w	r6, r4, #25
 8005d18:	e7f5      	b.n	8005d06 <_printf_i+0x22e>
 8005d1a:	bf00      	nop
 8005d1c:	08006149 	.word	0x08006149
 8005d20:	0800615a 	.word	0x0800615a

08005d24 <_read_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_read_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb f8ea 	bl	8000f0c <_read>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_read_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_read_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	200045cc 	.word	0x200045cc

08005d48 <__swbuf_r>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	460e      	mov	r6, r1
 8005d4c:	4614      	mov	r4, r2
 8005d4e:	4605      	mov	r5, r0
 8005d50:	b118      	cbz	r0, 8005d5a <__swbuf_r+0x12>
 8005d52:	6983      	ldr	r3, [r0, #24]
 8005d54:	b90b      	cbnz	r3, 8005d5a <__swbuf_r+0x12>
 8005d56:	f7ff fa33 	bl	80051c0 <__sinit>
 8005d5a:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <__swbuf_r+0x98>)
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	d12b      	bne.n	8005db8 <__swbuf_r+0x70>
 8005d60:	686c      	ldr	r4, [r5, #4]
 8005d62:	69a3      	ldr	r3, [r4, #24]
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	071a      	lsls	r2, r3, #28
 8005d6a:	d52f      	bpl.n	8005dcc <__swbuf_r+0x84>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	b36b      	cbz	r3, 8005dcc <__swbuf_r+0x84>
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	1ac0      	subs	r0, r0, r3
 8005d76:	6963      	ldr	r3, [r4, #20]
 8005d78:	b2f6      	uxtb	r6, r6
 8005d7a:	4283      	cmp	r3, r0
 8005d7c:	4637      	mov	r7, r6
 8005d7e:	dc04      	bgt.n	8005d8a <__swbuf_r+0x42>
 8005d80:	4621      	mov	r1, r4
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff f976 	bl	8005074 <_fflush_r>
 8005d88:	bb30      	cbnz	r0, 8005dd8 <__swbuf_r+0x90>
 8005d8a:	68a3      	ldr	r3, [r4, #8]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	60a3      	str	r3, [r4, #8]
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	6022      	str	r2, [r4, #0]
 8005d96:	701e      	strb	r6, [r3, #0]
 8005d98:	6963      	ldr	r3, [r4, #20]
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	4283      	cmp	r3, r0
 8005d9e:	d004      	beq.n	8005daa <__swbuf_r+0x62>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	07db      	lsls	r3, r3, #31
 8005da4:	d506      	bpl.n	8005db4 <__swbuf_r+0x6c>
 8005da6:	2e0a      	cmp	r6, #10
 8005da8:	d104      	bne.n	8005db4 <__swbuf_r+0x6c>
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f7ff f961 	bl	8005074 <_fflush_r>
 8005db2:	b988      	cbnz	r0, 8005dd8 <__swbuf_r+0x90>
 8005db4:	4638      	mov	r0, r7
 8005db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <__swbuf_r+0x9c>)
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d101      	bne.n	8005dc2 <__swbuf_r+0x7a>
 8005dbe:	68ac      	ldr	r4, [r5, #8]
 8005dc0:	e7cf      	b.n	8005d62 <__swbuf_r+0x1a>
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <__swbuf_r+0xa0>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	bf08      	it	eq
 8005dc8:	68ec      	ldreq	r4, [r5, #12]
 8005dca:	e7ca      	b.n	8005d62 <__swbuf_r+0x1a>
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 f80c 	bl	8005dec <__swsetup_r>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d0cb      	beq.n	8005d70 <__swbuf_r+0x28>
 8005dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8005ddc:	e7ea      	b.n	8005db4 <__swbuf_r+0x6c>
 8005dde:	bf00      	nop
 8005de0:	080060f4 	.word	0x080060f4
 8005de4:	08006114 	.word	0x08006114
 8005de8:	080060d4 	.word	0x080060d4

08005dec <__swsetup_r>:
 8005dec:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <__swsetup_r+0xcc>)
 8005dee:	b570      	push	{r4, r5, r6, lr}
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	4606      	mov	r6, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	b125      	cbz	r5, 8005e02 <__swsetup_r+0x16>
 8005df8:	69ab      	ldr	r3, [r5, #24]
 8005dfa:	b913      	cbnz	r3, 8005e02 <__swsetup_r+0x16>
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f7ff f9df 	bl	80051c0 <__sinit>
 8005e02:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <__swsetup_r+0xd0>)
 8005e04:	429c      	cmp	r4, r3
 8005e06:	d10f      	bne.n	8005e28 <__swsetup_r+0x3c>
 8005e08:	686c      	ldr	r4, [r5, #4]
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e10:	0719      	lsls	r1, r3, #28
 8005e12:	d42c      	bmi.n	8005e6e <__swsetup_r+0x82>
 8005e14:	06dd      	lsls	r5, r3, #27
 8005e16:	d411      	bmi.n	8005e3c <__swsetup_r+0x50>
 8005e18:	2309      	movs	r3, #9
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	e03e      	b.n	8005ea6 <__swsetup_r+0xba>
 8005e28:	4b25      	ldr	r3, [pc, #148]	; (8005ec0 <__swsetup_r+0xd4>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d101      	bne.n	8005e32 <__swsetup_r+0x46>
 8005e2e:	68ac      	ldr	r4, [r5, #8]
 8005e30:	e7eb      	b.n	8005e0a <__swsetup_r+0x1e>
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <__swsetup_r+0xd8>)
 8005e34:	429c      	cmp	r4, r3
 8005e36:	bf08      	it	eq
 8005e38:	68ec      	ldreq	r4, [r5, #12]
 8005e3a:	e7e6      	b.n	8005e0a <__swsetup_r+0x1e>
 8005e3c:	0758      	lsls	r0, r3, #29
 8005e3e:	d512      	bpl.n	8005e66 <__swsetup_r+0x7a>
 8005e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e42:	b141      	cbz	r1, 8005e56 <__swsetup_r+0x6a>
 8005e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	d002      	beq.n	8005e52 <__swsetup_r+0x66>
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff fa85 	bl	800535c <_free_r>
 8005e52:	2300      	movs	r3, #0
 8005e54:	6363      	str	r3, [r4, #52]	; 0x34
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6063      	str	r3, [r4, #4]
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f043 0308 	orr.w	r3, r3, #8
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	b94b      	cbnz	r3, 8005e86 <__swsetup_r+0x9a>
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7c:	d003      	beq.n	8005e86 <__swsetup_r+0x9a>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4630      	mov	r0, r6
 8005e82:	f000 f847 	bl	8005f14 <__smakebuf_r>
 8005e86:	89a0      	ldrh	r0, [r4, #12]
 8005e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e8c:	f010 0301 	ands.w	r3, r0, #1
 8005e90:	d00a      	beq.n	8005ea8 <__swsetup_r+0xbc>
 8005e92:	2300      	movs	r3, #0
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	6963      	ldr	r3, [r4, #20]
 8005e98:	425b      	negs	r3, r3
 8005e9a:	61a3      	str	r3, [r4, #24]
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	b943      	cbnz	r3, 8005eb2 <__swsetup_r+0xc6>
 8005ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ea4:	d1ba      	bne.n	8005e1c <__swsetup_r+0x30>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	0781      	lsls	r1, r0, #30
 8005eaa:	bf58      	it	pl
 8005eac:	6963      	ldrpl	r3, [r4, #20]
 8005eae:	60a3      	str	r3, [r4, #8]
 8005eb0:	e7f4      	b.n	8005e9c <__swsetup_r+0xb0>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e7f7      	b.n	8005ea6 <__swsetup_r+0xba>
 8005eb6:	bf00      	nop
 8005eb8:	20000018 	.word	0x20000018
 8005ebc:	080060f4 	.word	0x080060f4
 8005ec0:	08006114 	.word	0x08006114
 8005ec4:	080060d4 	.word	0x080060d4

08005ec8 <__swhatbuf_r>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	460e      	mov	r6, r1
 8005ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	b096      	sub	sp, #88	; 0x58
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	461d      	mov	r5, r3
 8005ed8:	da08      	bge.n	8005eec <__swhatbuf_r+0x24>
 8005eda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	602a      	str	r2, [r5, #0]
 8005ee2:	061a      	lsls	r2, r3, #24
 8005ee4:	d410      	bmi.n	8005f08 <__swhatbuf_r+0x40>
 8005ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eea:	e00e      	b.n	8005f0a <__swhatbuf_r+0x42>
 8005eec:	466a      	mov	r2, sp
 8005eee:	f000 f851 	bl	8005f94 <_fstat_r>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	dbf1      	blt.n	8005eda <__swhatbuf_r+0x12>
 8005ef6:	9a01      	ldr	r2, [sp, #4]
 8005ef8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005efc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f00:	425a      	negs	r2, r3
 8005f02:	415a      	adcs	r2, r3
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	e7ee      	b.n	8005ee6 <__swhatbuf_r+0x1e>
 8005f08:	2340      	movs	r3, #64	; 0x40
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	b016      	add	sp, #88	; 0x58
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f14 <__smakebuf_r>:
 8005f14:	898b      	ldrh	r3, [r1, #12]
 8005f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f18:	079d      	lsls	r5, r3, #30
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	d507      	bpl.n	8005f30 <__smakebuf_r+0x1c>
 8005f20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	2301      	movs	r3, #1
 8005f2a:	6163      	str	r3, [r4, #20]
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	ab01      	add	r3, sp, #4
 8005f32:	466a      	mov	r2, sp
 8005f34:	f7ff ffc8 	bl	8005ec8 <__swhatbuf_r>
 8005f38:	9900      	ldr	r1, [sp, #0]
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff fa79 	bl	8005434 <_malloc_r>
 8005f42:	b948      	cbnz	r0, 8005f58 <__smakebuf_r+0x44>
 8005f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f48:	059a      	lsls	r2, r3, #22
 8005f4a:	d4ef      	bmi.n	8005f2c <__smakebuf_r+0x18>
 8005f4c:	f023 0303 	bic.w	r3, r3, #3
 8005f50:	f043 0302 	orr.w	r3, r3, #2
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	e7e3      	b.n	8005f20 <__smakebuf_r+0xc>
 8005f58:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <__smakebuf_r+0x7c>)
 8005f5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	6020      	str	r0, [r4, #0]
 8005f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	6163      	str	r3, [r4, #20]
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	6120      	str	r0, [r4, #16]
 8005f6e:	b15b      	cbz	r3, 8005f88 <__smakebuf_r+0x74>
 8005f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f74:	4630      	mov	r0, r6
 8005f76:	f000 f81f 	bl	8005fb8 <_isatty_r>
 8005f7a:	b128      	cbz	r0, 8005f88 <__smakebuf_r+0x74>
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	89a0      	ldrh	r0, [r4, #12]
 8005f8a:	4305      	orrs	r5, r0
 8005f8c:	81a5      	strh	r5, [r4, #12]
 8005f8e:	e7cd      	b.n	8005f2c <__smakebuf_r+0x18>
 8005f90:	08005159 	.word	0x08005159

08005f94 <_fstat_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d07      	ldr	r5, [pc, #28]	; (8005fb4 <_fstat_r+0x20>)
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	f7fa fff8 	bl	8000f96 <_fstat>
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	d102      	bne.n	8005fb0 <_fstat_r+0x1c>
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	b103      	cbz	r3, 8005fb0 <_fstat_r+0x1c>
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	bd38      	pop	{r3, r4, r5, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200045cc 	.word	0x200045cc

08005fb8 <_isatty_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d06      	ldr	r5, [pc, #24]	; (8005fd4 <_isatty_r+0x1c>)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	f7fa fff7 	bl	8000fb6 <_isatty>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_isatty_r+0x1a>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_isatty_r+0x1a>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	200045cc 	.word	0x200045cc

08005fd8 <_init>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_fini>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr
