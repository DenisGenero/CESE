
freertos_app_Example4_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c4  080070c4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070cc  080070cc  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080070d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00004560  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000460c  2000460c  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c50e  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5a  00000000  00000000  0003c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  00040348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  00041ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a3f  00000000  00000000  000430b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d1e2  00000000  00000000  0006baef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ece65  00000000  00000000  00088cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175b36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a98  00000000  00000000  00175b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e74 	.word	0x08006e74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	08006e74 	.word	0x08006e74

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <appInit>:


/*------------------------------------------------------------------*/
/* App Initialization */
void appInit( void )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
//	LDX_Config_t* ptr;
	BaseType_t ret;

	/* Print out the name of this Example. */
  	vPrintString( pcTextForMain );
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <appInit+0xb4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fbce 	bl	8005d40 <vPrintString>

  	/* Add a Queue */
  	QueueHandle = xQueueCreate(1, sizeof(int32_t));
 80005a4:	2200      	movs	r2, #0
 80005a6:	2104      	movs	r1, #4
 80005a8:	2001      	movs	r0, #1
 80005aa:	f003 fd4b 	bl	8004044 <xQueueGenericCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <appInit+0xb8>)
 80005b2:	6013      	str	r3, [r2, #0]

  	/* Check if the queue was successfully created */
  	configASSERT( QueueHandle != NULL);
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <appInit+0xb8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10a      	bne.n	80005d2 <appInit+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005ce:	bf00      	nop
 80005d0:	e7fe      	b.n	80005d0 <appInit+0x3c>

//	ptr = &LDX_Config[0];
	/* Task Led thread at priority 1 */
	ret = xTaskCreate( vTaskLed,					/* Pointer to the function thats implement the task. */
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <appInit+0xb8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <appInit+0xbc>)
 80005d8:	9201      	str	r2, [sp, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	9200      	str	r2, [sp, #0]
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	491c      	ldr	r1, [pc, #112]	; (8000654 <appInit+0xc0>)
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <appInit+0xc4>)
 80005e6:	f004 f88f 	bl	8004708 <xTaskCreate>
 80005ea:	60f8      	str	r0, [r7, #12]
	                   (void*) QueueHandle,    				/* Pass the ptr as the task parameter. */
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
					   &xTaskLedHandle );			/* We are using a variable as task handle.	*/

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00a      	beq.n	8000608 <appInit+0x74>
	__asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	607b      	str	r3, [r7, #4]
}
 8000604:	bf00      	nop
 8000606:	e7fe      	b.n	8000606 <appInit+0x72>

//	ptr = &LDX_Config[0];
	/* Task Button thread at priority 1 */
	ret = xTaskCreate( vTaskButton,					/* Pointer to the function thats implement the task. */
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <appInit+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <appInit+0xc8>)
 800060e:	9201      	str	r2, [sp, #4]
 8000610:	2201      	movs	r2, #1
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000618:	4911      	ldr	r1, [pc, #68]	; (8000660 <appInit+0xcc>)
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <appInit+0xd0>)
 800061c:	f004 f874 	bl	8004708 <xTaskCreate>
 8000620:	60f8      	str	r0, [r7, #12]
	                   (void*) QueueHandle,    				/* Pass the ptr as the task parameter. */
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
					   &xTaskButtonHandle );		/* We are using a variable as task handle.	*/

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d00a      	beq.n	800063e <appInit+0xaa>
	__asm volatile
 8000628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800062c:	f383 8811 	msr	BASEPRI, r3
 8000630:	f3bf 8f6f 	isb	sy
 8000634:	f3bf 8f4f 	dsb	sy
 8000638:	603b      	str	r3, [r7, #0]
}
 800063a:	bf00      	nop
 800063c:	e7fe      	b.n	800063c <appInit+0xa8>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000
 800064c:	200000d0 	.word	0x200000d0
 8000650:	200000cc 	.word	0x200000cc
 8000654:	08006ec0 	.word	0x08006ec0
 8000658:	08000705 	.word	0x08000705
 800065c:	200000c8 	.word	0x200000c8
 8000660:	08006ecc 	.word	0x08006ecc
 8000664:	08000669 	.word	0x08000669

08000668 <vTaskButton>:
// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task Button thread */
void vTaskButton( void *pvParameters )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	/*  Declare & Initialize Task Function variables for argument, led, button and task */
//	LDX_Config_t * ptr = (LDX_Config_t *)pvParameters;
	LDX_Config_t *ptr;
	ptr = &LDX_Config[0];
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <vTaskButton+0x84>)
 8000672:	60bb      	str	r3, [r7, #8]
	QueueHandle_t BtnQueueHandle = (QueueHandle_t) pvParameters;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	617b      	str	r3, [r7, #20]
	BaseType_t xStatus;

	char *pcTaskName = (char *) pcTaskGetName( NULL );
 8000678:	2000      	movs	r0, #0
 800067a:	f004 fb4b 	bl	8004d14 <pcTaskGetName>
 800067e:	6138      	str	r0, [r7, #16]

	/* Print out the name of this task. */
	vPrintTwoStrings( pcTaskName, "- is running\r\n" );
 8000680:	491b      	ldr	r1, [pc, #108]	; (80006f0 <vTaskButton+0x88>)
 8000682:	6938      	ldr	r0, [r7, #16]
 8000684:	f005 fb92 	bl	8005dac <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Check HW Button State */
		if( HAL_GPIO_ReadPin( USER_Btn_GPIO_Port, USER_Btn_Pin ) == GPIO_PIN_SET )
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	4819      	ldr	r0, [pc, #100]	; (80006f4 <vTaskButton+0x8c>)
 800068e:	f001 fbd9 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b01      	cmp	r3, #1
 8000696:	d116      	bne.n	80006c6 <vTaskButton+0x5e>
		{
        	/* Check, Update and Print Led Flag */
			if( ptr->ledFlag == NotBlinking )
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	79db      	ldrb	r3, [r3, #7]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d109      	bne.n	80006b4 <vTaskButton+0x4c>
			{
				ptr->ledFlag = Blinking;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	2200      	movs	r2, #0
 80006a4:	71da      	strb	r2, [r3, #7]
				vPrintTwoStrings( pcTaskName, pcTextForTask_BlinkingOn );
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <vTaskButton+0x90>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	6938      	ldr	r0, [r7, #16]
 80006ae:	f005 fb7d 	bl	8005dac <vPrintTwoStrings>
 80006b2:	e008      	b.n	80006c6 <vTaskButton+0x5e>
			}
			else
			{
				ptr->ledFlag = NotBlinking;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	2201      	movs	r2, #1
 80006b8:	71da      	strb	r2, [r3, #7]
            	vPrintTwoStrings( pcTaskName, pcTextForTask_BlinkingOff );
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <vTaskButton+0x94>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	6938      	ldr	r0, [r7, #16]
 80006c2:	f005 fb73 	bl	8005dac <vPrintTwoStrings>
			}
		}
		/* Send the led state, whether or not the button has been pressed */
		xStatus = xQueueSendToBack( BtnQueueHandle, &ptr, 0 );
 80006c6:	f107 0108 	add.w	r1, r7, #8
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	6978      	ldr	r0, [r7, #20]
 80006d0:	f003 fd0e 	bl	80040f0 <xQueueGenericSend>
 80006d4:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d002      	beq.n	80006e2 <vTaskButton+0x7a>
		{
			/* We could not write to the queue because it was full – this must
								be an error as the queue should never contain more than one item! */
			vPrintString( "Could not send to the queue.\r\n" );
 80006dc:	4808      	ldr	r0, [pc, #32]	; (8000700 <vTaskButton+0x98>)
 80006de:	f005 fb2f 	bl	8005d40 <vPrintString>
		}

		/* We want this task to execute every 250 milliseconds. */
		vTaskDelay( buttonTickCntMAX );
 80006e2:	20fa      	movs	r0, #250	; 0xfa
 80006e4:	f004 f9d8 	bl	8004a98 <vTaskDelay>
		if( HAL_GPIO_ReadPin( USER_Btn_GPIO_Port, USER_Btn_Pin ) == GPIO_PIN_SET )
 80006e8:	e7ce      	b.n	8000688 <vTaskButton+0x20>
 80006ea:	bf00      	nop
 80006ec:	20000014 	.word	0x20000014
 80006f0:	08006f08 	.word	0x08006f08
 80006f4:	40020800 	.word	0x40020800
 80006f8:	20000004 	.word	0x20000004
 80006fc:	20000008 	.word	0x20000008
 8000700:	08006f18 	.word	0x08006f18

08000704 <vTaskLed>:
// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task Led thread */
void vTaskLed( void *pvParameters )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	/*  Declare & Initialize Task Function variables for argument, led, button and task */
//	LDX_Config_t * ptr = (LDX_Config_t *)pvParameters;
	LDX_Config_t *ptr;
	ptr = &LDX_Config[0];
 800070c:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <vTaskLed+0xbc>)
 800070e:	613b      	str	r3, [r7, #16]
	QueueHandle_t LedQueueHandle = (QueueHandle_t) pvParameters;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	61fb      	str	r3, [r7, #28]

	TickType_t xLastWakeTime;

	/* The xLastWakeTime variable needs to be initialized with the current tick
	   count. ws*/
	xLastWakeTime = xTaskGetTickCount();
 8000714:	f004 faee 	bl	8004cf4 <xTaskGetTickCount>
 8000718:	4603      	mov	r3, r0
 800071a:	60fb      	str	r3, [r7, #12]

	char *pcTaskName = (char *) pcTaskGetName( NULL );
 800071c:	2000      	movs	r0, #0
 800071e:	f004 faf9 	bl	8004d14 <pcTaskGetName>
 8000722:	61b8      	str	r0, [r7, #24]

	/* Print out the name of this task. */
	vPrintTwoStrings( pcTaskName, "   - is running\r\n" );
 8000724:	4927      	ldr	r1, [pc, #156]	; (80007c4 <vTaskLed+0xc0>)
 8000726:	69b8      	ldr	r0, [r7, #24]
 8000728:	f005 fb40 	bl	8005dac <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		if(uxQueueMessagesWaiting(LedQueueHandle) != 0){
 800072c:	69f8      	ldr	r0, [r7, #28]
 800072e:	f003 febd 	bl	80044ac <uxQueueMessagesWaiting>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <vTaskLed+0x3a>
			vPrintString("Queue should have been empty\r\n");
 8000738:	4823      	ldr	r0, [pc, #140]	; (80007c8 <vTaskLed+0xc4>)
 800073a:	f005 fb01 	bl	8005d40 <vPrintString>
		}
		xStatus = xQueueReceive(LedQueueHandle, &ptr, 0);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	69f8      	ldr	r0, [r7, #28]
 8000748:	f003 fdd0 	bl	80042ec <xQueueReceive>
 800074c:	6178      	str	r0, [r7, #20]

		if( xStatus == pdPASS )
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d106      	bne.n	8000762 <vTaskLed+0x5e>
		{
			/* Data was successfully received from the queue, print out the received
					   value. */
			vPrintStringAndNumber( "Received = ", ptr->ledFlag );
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	79db      	ldrb	r3, [r3, #7]
 8000758:	4619      	mov	r1, r3
 800075a:	481c      	ldr	r0, [pc, #112]	; (80007cc <vTaskLed+0xc8>)
 800075c:	f005 fb0a 	bl	8005d74 <vPrintStringAndNumber>
 8000760:	e002      	b.n	8000768 <vTaskLed+0x64>
		else
		{
			/* We did not receive anything from the queue even after waiting for 100ms.
					   This must be an error as the sending tasks are free running and will be
					   continuously writing to the queue. */
			vPrintString( "Could not receive from the queue.\r\n" );
 8000762:	481b      	ldr	r0, [pc, #108]	; (80007d0 <vTaskLed+0xcc>)
 8000764:	f005 faec 	bl	8005d40 <vPrintString>
		}

		/* Check Led Flag */
		if( ptr->ledFlag == Blinking )
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d11f      	bne.n	80007b0 <vTaskLed+0xac>
		{
			/* Check, Update and Print Led State */
		   	if( ptr->ledState == GPIO_PIN_RESET )
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	799b      	ldrb	r3, [r3, #6]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <vTaskLed+0x88>
		   	{
		   		ptr->ledState = GPIO_PIN_SET;
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	2201      	movs	r2, #1
 800077c:	719a      	strb	r2, [r3, #6]
            	vPrintTwoStrings( pcTaskName, pcTextForTask_LDXTOn );
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <vTaskLed+0xd0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	69b8      	ldr	r0, [r7, #24]
 8000786:	f005 fb11 	bl	8005dac <vPrintTwoStrings>
 800078a:	e008      	b.n	800079e <vTaskLed+0x9a>
		   	}
	    	else
	    	{
	    		ptr->ledState = GPIO_PIN_RESET;
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	2200      	movs	r2, #0
 8000790:	719a      	strb	r2, [r3, #6]
            	vPrintTwoStrings( pcTaskName, pcTextForTask_LDXTOff );
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <vTaskLed+0xd4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	69b8      	ldr	r0, [r7, #24]
 800079a:	f005 fb07 	bl	8005dac <vPrintTwoStrings>
		   	}
			/* Update HW Led State */
		   	HAL_GPIO_WritePin( ptr->LDX_GPIO_Port, ptr->LDX_Pin, ptr->ledState );
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	8899      	ldrh	r1, [r3, #4]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	799b      	ldrb	r3, [r3, #6]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f001 fb62 	bl	8001e74 <HAL_GPIO_WritePin>
		}

		/* We want this task to execute exactly every 250 milliseconds. */
		vTaskDelayUntil( &xLastWakeTime, ledTickCntMAX );
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	21fa      	movs	r1, #250	; 0xfa
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 f8f0 	bl	800499c <vTaskDelayUntil>
		if(uxQueueMessagesWaiting(LedQueueHandle) != 0){
 80007bc:	e7b6      	b.n	800072c <vTaskLed+0x28>
 80007be:	bf00      	nop
 80007c0:	20000014 	.word	0x20000014
 80007c4:	08006f60 	.word	0x08006f60
 80007c8:	08006f74 	.word	0x08006f74
 80007cc:	08006f94 	.word	0x08006f94
 80007d0:	08006fa0 	.word	0x08006fa0
 80007d4:	2000000c 	.word	0x2000000c
 80007d8:	20000010 	.word	0x20000010

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fd13 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f821 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 f92f 	bl	8000a4c <MX_GPIO_Init>
  MX_ETH_Init();
 80007ee:	f000 f887 	bl	8000900 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007f2:	f000 f8d3 	bl	800099c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007f6:	f000 f8fb 	bl	80009f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
    /* add application, ... */
  	  appInit();
 80007fa:	f7ff fecb 	bl	8000594 <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <main+0x48>)
 8000800:	1d3c      	adds	r4, r7, #4
 8000802:	461d      	mov	r5, r3
 8000804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fac0 	bl	8003d96 <osThreadCreate>
 8000816:	4603      	mov	r3, r0
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <main+0x4c>)
 800081a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800081c:	f003 fab4 	bl	8003d88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000820:	e7fe      	b.n	8000820 <main+0x44>
 8000822:	bf00      	nop
 8000824:	08006fd0 	.word	0x08006fd0
 8000828:	2000084c 	.word	0x2000084c

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2230      	movs	r2, #48	; 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fcd3 	bl	80061e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <SystemClock_Config+0xcc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <SystemClock_Config+0xcc>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <SystemClock_Config+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SystemClock_Config+0xd0>)
 8000876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800088c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008a0:	23a8      	movs	r3, #168	; 0xa8
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a8:	2307      	movs	r3, #7
 80008aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fc15 	bl	80020e0 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008bc:	f000 f990 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2105      	movs	r1, #5
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fe76 	bl	80025d0 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ea:	f000 f979 	bl	8000be0 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	; 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_ETH_Init+0x84>)
 8000906:	4a20      	ldr	r2, [pc, #128]	; (8000988 <MX_ETH_Init+0x88>)
 8000908:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_ETH_Init+0x8c>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_ETH_Init+0x8c>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_ETH_Init+0x8c>)
 8000918:	22e1      	movs	r2, #225	; 0xe1
 800091a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_ETH_Init+0x8c>)
 800091e:	2200      	movs	r2, #0
 8000920:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_ETH_Init+0x8c>)
 8000924:	2200      	movs	r2, #0
 8000926:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_ETH_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_ETH_Init+0x84>)
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <MX_ETH_Init+0x8c>)
 8000932:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_ETH_Init+0x84>)
 8000936:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800093a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_ETH_Init+0x84>)
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <MX_ETH_Init+0x90>)
 8000940:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_ETH_Init+0x84>)
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <MX_ETH_Init+0x94>)
 8000946:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_ETH_Init+0x84>)
 800094a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800094e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_ETH_Init+0x84>)
 8000952:	f000 fda3 	bl	800149c <HAL_ETH_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f940 	bl	8000be0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000960:	2238      	movs	r2, #56	; 0x38
 8000962:	2100      	movs	r1, #0
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_ETH_Init+0x98>)
 8000966:	f005 fc3e 	bl	80061e6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_ETH_Init+0x98>)
 800096c:	2221      	movs	r2, #33	; 0x21
 800096e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_ETH_Init+0x98>)
 8000972:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000976:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_ETH_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000024c 	.word	0x2000024c
 8000988:	40028000 	.word	0x40028000
 800098c:	20000850 	.word	0x20000850
 8000990:	200001ac 	.word	0x200001ac
 8000994:	2000010c 	.word	0x2000010c
 8000998:	200000d4 	.word	0x200000d4

0800099c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART3_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009d4:	f002 fafc 	bl	8002fd0 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f8ff 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200002fc 	.word	0x200002fc
 80009ec:	40004800 	.word	0x40004800

080009f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2202      	movs	r2, #2
 8000a06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	f001 fa37 	bl	8001ea6 <HAL_PCD_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f000 f8cf 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000340 	.word	0x20000340

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b4c      	ldr	r3, [pc, #304]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a4b      	ldr	r2, [pc, #300]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a44      	ldr	r2, [pc, #272]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b42      	ldr	r3, [pc, #264]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a3d      	ldr	r2, [pc, #244]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b10:	4822      	ldr	r0, [pc, #136]	; (8000b9c <MX_GPIO_Init+0x150>)
 8000b12:	f001 f9af 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	4821      	ldr	r0, [pc, #132]	; (8000ba0 <MX_GPIO_Init+0x154>)
 8000b1c:	f001 f9aa 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0x158>)
 8000b38:	f000 ffd8 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_GPIO_Init+0x150>)
 8000b56:	f000 ffc9 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <MX_GPIO_Init+0x154>)
 8000b72:	f000 ffbb 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_GPIO_Init+0x154>)
 8000b8a:	f000 ffaf 	bl	8001aec <HAL_GPIO_Init>

}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	; 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bb4:	f003 f916 	bl	8003de4 <osDelay>
 8000bb8:	e7fa      	b.n	8000bb0 <StartDefaultTask+0x8>
	...

08000bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bce:	f000 fb3f 	bl	8001250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40001400 	.word	0x40001400

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x54>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_MspInit+0x54>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x54>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x54>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_MspInit+0x54>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_MspInit+0x54>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	f06f 0001 	mvn.w	r0, #1
 8000c32:	f000 fc09 	bl	8001448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <HAL_ETH_MspInit+0x174>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	f040 80a4 	bne.w	8000db0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a52      	ldr	r2, [pc, #328]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a4b      	ldr	r2, [pc, #300]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000caa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_ETH_MspInit+0x178>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d2c:	2332      	movs	r3, #50	; 0x32
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	481e      	ldr	r0, [pc, #120]	; (8000dc0 <HAL_ETH_MspInit+0x17c>)
 8000d48:	f000 fed0 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d4c:	2386      	movs	r3, #134	; 0x86
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5c:	230b      	movs	r3, #11
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <HAL_ETH_MspInit+0x180>)
 8000d68:	f000 fec0 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <HAL_ETH_MspInit+0x184>)
 8000d8a:	f000 feaf 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da0:	230b      	movs	r3, #11
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <HAL_ETH_MspInit+0x188>)
 8000dac:	f000 fe9e 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3738      	adds	r7, #56	; 0x38
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40028000 	.word	0x40028000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40021800 	.word	0x40021800

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_UART_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12c      	bne.n	8000e4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_UART_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_UART_MspInit+0x8c>)
 8000e48:	f000 fe50 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40004800 	.word	0x40004800
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e80:	d13f      	bne.n	8000f02 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e9e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4815      	ldr	r0, [pc, #84]	; (8000f10 <HAL_PCD_MspInit+0xb0>)
 8000ebc:	f000 fe16 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480e      	ldr	r0, [pc, #56]	; (8000f10 <HAL_PCD_MspInit+0xb0>)
 8000ed6:	f000 fe09 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_PCD_MspInit+0xac>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <HAL_InitTick+0xe4>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a32      	ldr	r2, [pc, #200]	; (8000ff8 <HAL_InitTick+0xe4>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <HAL_InitTick+0xe4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fd60 	bl	8002a10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d103      	bne.n	8000f62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f5a:	f001 fd31 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8000f5e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f60:	e004      	b.n	8000f6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f62:	f001 fd2d 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8000f66:	4603      	mov	r3, r0
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <HAL_InitTick+0xe8>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0c9b      	lsrs	r3, r3, #18
 8000f76:	3b01      	subs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_InitTick+0xec>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <HAL_InitTick+0xf0>)
 8000f7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_InitTick+0xec>)
 8000f82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f86:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_InitTick+0xec>)
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_InitTick+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_InitTick+0xec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_InitTick+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <HAL_InitTick+0xec>)
 8000fa2:	f001 fd67 	bl	8002a74 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11b      	bne.n	8000fec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000fb4:	4812      	ldr	r0, [pc, #72]	; (8001000 <HAL_InitTick+0xec>)
 8000fb6:	f001 fdb7 	bl	8002b28 <HAL_TIM_Base_Start_IT>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d111      	bne.n	8000fec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fc8:	2037      	movs	r0, #55	; 0x37
 8000fca:	f000 fa59 	bl	8001480 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d808      	bhi.n	8000fe6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	2037      	movs	r0, #55	; 0x37
 8000fda:	f000 fa35 	bl	8001448 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_InitTick+0xf4>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e002      	b.n	8000fec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3738      	adds	r7, #56	; 0x38
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	431bde83 	.word	0x431bde83
 8001000:	20000858 	.word	0x20000858
 8001004:	40001400 	.word	0x40001400
 8001008:	2000003c 	.word	0x2000003c

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM7_IRQHandler+0x10>)
 800103e:	f001 fde3 	bl	8002c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000858 	.word	0x20000858

0800104c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e00a      	b.n	8001074 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800105e:	f3af 8000 	nop.w
 8001062:	4601      	mov	r1, r0
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	b2ca      	uxtb	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf0      	blt.n	800105e <_read+0x12>
	}

return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e009      	b.n	80010ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fe3b 	bl	8005d1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf1      	blt.n	8001098 <_write+0x12>
	}
	return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_close>:

int _close(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e6:	605a      	str	r2, [r3, #4]
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f004 fe40 	bl	8005ddc <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20030000 	.word	0x20030000
 8001188:	00000400 	.word	0x00000400
 800118c:	200008a0 	.word	0x200008a0
 8001190:	20004610 	.word	0x20004610

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e2:	f7ff ffd7 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f004 ffc9 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff faf7 	bl	80007dc <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80011fc:	080070d4 	.word	0x080070d4
  ldr r2, =_sbss
 8001200:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001204:	2000460c 	.word	0x2000460c

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f8fc 	bl	8001432 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f7ff fe6a 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fcd4 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000040 	.word	0x20000040
 8001274:	200008a4 	.word	0x200008a4

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200008a4 	.word	0x200008a4

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000040 	.word	0x20000040

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff4c 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145a:	f7ff ff61 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800145e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	6978      	ldr	r0, [r7, #20]
 8001466:	f7ff ffb1 	bl	80013cc <NVIC_EncodePriority>
 800146a:	4602      	mov	r2, r0
 800146c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff80 	bl	8001378 <__NVIC_SetPriority>
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff54 	bl	800133c <__NVIC_EnableIRQ>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06c      	b.n	8001588 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d106      	bne.n	80014c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2223      	movs	r2, #35	; 0x23
 80014bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fbbf 	bl	8000c44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_ETH_Init+0xf4>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <HAL_ETH_Init+0xf4>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <HAL_ETH_Init+0xf4>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_ETH_Init+0xf8>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a2b      	ldr	r2, [pc, #172]	; (8001594 <HAL_ETH_Init+0xf8>)
 80014e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_ETH_Init+0xf8>)
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	4927      	ldr	r1, [pc, #156]	; (8001594 <HAL_ETH_Init+0xf8>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_ETH_Init+0xf8>)
 80014fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001516:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff feae 	bl	8001278 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800151e:	e011      	b.n	8001544 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001520:	f7ff feaa 	bl	8001278 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800152e:	d909      	bls.n	8001544 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	22e0      	movs	r2, #224	; 0xe0
 800153c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e021      	b.n	8001588 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1e4      	bne.n	8001520 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f958 	bl	800180c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f9ff 	bl	8001960 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fa55 	bl	8001a12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	461a      	mov	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f9bd 	bl	80018f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2210      	movs	r2, #16
 8001582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800

08001598 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <ETH_SetMACConfig+0x15c>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	7c1b      	ldrb	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <ETH_SetMACConfig+0x28>
 80015ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015be:	e000      	b.n	80015c2 <ETH_SetMACConfig+0x2a>
 80015c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	7c5b      	ldrb	r3, [r3, #17]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <ETH_SetMACConfig+0x38>
 80015ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ce:	e000      	b.n	80015d2 <ETH_SetMACConfig+0x3a>
 80015d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7fdb      	ldrb	r3, [r3, #31]
 80015de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	7f92      	ldrb	r2, [r2, #30]
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	d102      	bne.n	80015f6 <ETH_SetMACConfig+0x5e>
 80015f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f4:	e000      	b.n	80015f8 <ETH_SetMACConfig+0x60>
 80015f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80015f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	7f1b      	ldrb	r3, [r3, #28]
 80015fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001600:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001606:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	791b      	ldrb	r3, [r3, #4]
 800160c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800160e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001616:	2a00      	cmp	r2, #0
 8001618:	d102      	bne.n	8001620 <ETH_SetMACConfig+0x88>
 800161a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161e:	e000      	b.n	8001622 <ETH_SetMACConfig+0x8a>
 8001620:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001622:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7bdb      	ldrb	r3, [r3, #15]
 8001628:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800162a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001630:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001638:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800163a:	4313      	orrs	r3, r2
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff fe1c 	bl	8001290 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001676:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800167e:	2a00      	cmp	r2, #0
 8001680:	d101      	bne.n	8001686 <ETH_SetMACConfig+0xee>
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	e000      	b.n	8001688 <ETH_SetMACConfig+0xf0>
 8001686:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001688:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800168e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001696:	2a01      	cmp	r2, #1
 8001698:	d101      	bne.n	800169e <ETH_SetMACConfig+0x106>
 800169a:	2208      	movs	r2, #8
 800169c:	e000      	b.n	80016a0 <ETH_SetMACConfig+0x108>
 800169e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80016a8:	2a01      	cmp	r2, #1
 80016aa:	d101      	bne.n	80016b0 <ETH_SetMACConfig+0x118>
 80016ac:	2204      	movs	r2, #4
 80016ae:	e000      	b.n	80016b2 <ETH_SetMACConfig+0x11a>
 80016b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80016ba:	2a01      	cmp	r2, #1
 80016bc:	d101      	bne.n	80016c2 <ETH_SetMACConfig+0x12a>
 80016be:	2202      	movs	r2, #2
 80016c0:	e000      	b.n	80016c4 <ETH_SetMACConfig+0x12c>
 80016c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016c4:	4313      	orrs	r3, r2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fdd7 	bl	8001290 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	619a      	str	r2, [r3, #24]
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	ff20810f 	.word	0xff20810f

080016f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <ETH_SetDMAConfig+0x110>)
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	7b1b      	ldrb	r3, [r3, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <ETH_SetDMAConfig+0x2c>
 800171e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001722:	e000      	b.n	8001726 <ETH_SetDMAConfig+0x2e>
 8001724:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	7b5b      	ldrb	r3, [r3, #13]
 800172a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800172c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	7f52      	ldrb	r2, [r2, #29]
 8001732:	2a00      	cmp	r2, #0
 8001734:	d102      	bne.n	800173c <ETH_SetDMAConfig+0x44>
 8001736:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800173a:	e000      	b.n	800173e <ETH_SetDMAConfig+0x46>
 800173c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800173e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	7b9b      	ldrb	r3, [r3, #14]
 8001744:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001746:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800174c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7f1b      	ldrb	r3, [r3, #28]
 8001752:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001754:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7f9b      	ldrb	r3, [r3, #30]
 800175a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800175c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001762:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800176a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800176c:	4313      	orrs	r3, r2
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff fd7e 	bl	8001290 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80017c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fd4f 	bl	8001290 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	f8de3f23 	.word	0xf8de3f23

0800180c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0a6      	sub	sp, #152	; 0x98
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001814:	2301      	movs	r3, #1
 8001816:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001836:	2301      	movs	r3, #1
 8001838:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001848:	2300      	movs	r3, #0
 800184a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001852:	2300      	movs	r3, #0
 8001854:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800186e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001878:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001880:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fe86 	bl	8001598 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800188c:	2301      	movs	r3, #1
 800188e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001890:	2301      	movs	r3, #1
 8001892:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800189a:	2301      	movs	r3, #1
 800189c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff08 	bl	80016f8 <ETH_SetDMAConfig>
}
 80018e8:	bf00      	nop
 80018ea:	3798      	adds	r7, #152	; 0x98
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3305      	adds	r3, #5
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	3204      	adds	r2, #4
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <ETH_MACAddressConfig+0x68>)
 8001912:	4413      	add	r3, r2
 8001914:	461a      	mov	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3303      	adds	r3, #3
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	061a      	lsls	r2, r3, #24
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3302      	adds	r3, #2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	041b      	lsls	r3, r3, #16
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	4313      	orrs	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <ETH_MACAddressConfig+0x6c>)
 8001942:	4413      	add	r3, r2
 8001944:	461a      	mov	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40028040 	.word	0x40028040
 800195c:	40028044 	.word	0x40028044

08001960 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e03e      	b.n	80019ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68d9      	ldr	r1, [r3, #12]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	3206      	adds	r2, #6
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d80c      	bhi.n	80019d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68d9      	ldr	r1, [r3, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	e004      	b.n	80019da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d9bd      	bls.n	800196e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a04:	611a      	str	r2, [r3, #16]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e046      	b.n	8001aae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6919      	ldr	r1, [r3, #16]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	3212      	adds	r2, #18
 8001a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d80c      	bhi.n	8001a9e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6919      	ldr	r1, [r3, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	461a      	mov	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	e004      	b.n	8001aa8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d9b5      	bls.n	8001a20 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ade:	60da      	str	r2, [r3, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e177      	b.n	8001df8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 8166 	bne.w	8001df2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80c0 	beq.w	8001df2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_GPIO_Init+0x324>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <HAL_GPIO_Init+0x324>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_GPIO_Init+0x324>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a61      	ldr	r2, [pc, #388]	; (8001e14 <HAL_GPIO_Init+0x328>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a58      	ldr	r2, [pc, #352]	; (8001e18 <HAL_GPIO_Init+0x32c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d037      	beq.n	8001d2a <HAL_GPIO_Init+0x23e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a57      	ldr	r2, [pc, #348]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <HAL_GPIO_Init+0x23a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a56      	ldr	r2, [pc, #344]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02b      	beq.n	8001d22 <HAL_GPIO_Init+0x236>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a55      	ldr	r2, [pc, #340]	; (8001e24 <HAL_GPIO_Init+0x338>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x232>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a54      	ldr	r2, [pc, #336]	; (8001e28 <HAL_GPIO_Init+0x33c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x22e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a53      	ldr	r2, [pc, #332]	; (8001e2c <HAL_GPIO_Init+0x340>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x22a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <HAL_GPIO_Init+0x344>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_GPIO_Init+0x348>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x222>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_GPIO_Init+0x34c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x21e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x21a>
 8001d02:	2309      	movs	r3, #9
 8001d04:	e012      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d06:	230a      	movs	r3, #10
 8001d08:	e010      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	e00e      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d0e:	2307      	movs	r3, #7
 8001d10:	e00c      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e00a      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x240>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x328>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_GPIO_Init+0x354>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f ae84 	bls.w	8001b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40021c00 	.word	0x40021c00
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40022400 	.word	0x40022400
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea8:	b08f      	sub	sp, #60	; 0x3c
 8001eaa:	af0a      	add	r7, sp, #40	; 0x28
 8001eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e10f      	b.n	80020d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe ffc4 	bl	8000e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2203      	movs	r2, #3
 8001edc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fc8d 	bl	8003816 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	687e      	ldr	r6, [r7, #4]
 8001f04:	466d      	mov	r5, sp
 8001f06:	f106 0410 	add.w	r4, r6, #16
 8001f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f1a:	1d33      	adds	r3, r6, #4
 8001f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1e:	6838      	ldr	r0, [r7, #0]
 8001f20:	f001 fc18 	bl	8003754 <USB_CoreInit>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0d0      	b.n	80020d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 fc7b 	bl	8003838 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e04a      	b.n	8001fde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	333d      	adds	r3, #61	; 0x3d
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	333c      	adds	r3, #60	; 0x3c
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	b298      	uxth	r0, r3
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3344      	adds	r3, #68	; 0x44
 8001f84:	4602      	mov	r2, r0
 8001f86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	3340      	adds	r3, #64	; 0x40
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3348      	adds	r3, #72	; 0x48
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	334c      	adds	r3, #76	; 0x4c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3354      	adds	r3, #84	; 0x54
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3af      	bcc.n	8001f48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e044      	b.n	8002078 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3301      	adds	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	d3b5      	bcc.n	8001fee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	687e      	ldr	r6, [r7, #4]
 800208a:	466d      	mov	r5, sp
 800208c:	f106 0410 	add.w	r4, r6, #16
 8002090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002098:	e894 0003 	ldmia.w	r4, {r0, r1}
 800209c:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a0:	1d33      	adds	r3, r6, #4
 80020a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a4:	6838      	ldr	r0, [r7, #0]
 80020a6:	f001 fc13 	bl	80038d0 <USB_DevInit>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e00d      	b.n	80020d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 fdde 	bl	8003c92 <USB_DevDisconnect>

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e267      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d075      	beq.n	80021ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00c      	beq.n	8002124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210a:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d112      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x108>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d157      	bne.n	80021e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e242      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x74>
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6f      	ldr	r2, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6c      	ldr	r2, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002178:	4b69      	ldr	r3, [pc, #420]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff f86e 	bl	8001278 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f86a 	bl	8001278 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e207      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xc0>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f85a 	bl	8001278 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff f856 	bl	8001278 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1f3      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0xe8>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d11c      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1c7      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4937      	ldr	r1, [pc, #220]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e03a      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7ff f80f 	bl	8001278 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff f80b 	bl	8001278 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1a8      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4925      	ldr	r1, [pc, #148]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe ffee 	bl	8001278 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a0:	f7fe ffea 	bl	8001278 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e187      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d036      	beq.n	8002338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7fe ffce 	bl	8001278 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e0:	f7fe ffca 	bl	8001278 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e167      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x200>
 80022fe:	e01b      	b.n	8002338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe ffb7 	bl	8001278 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	e00e      	b.n	800232c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230e:	f7fe ffb3 	bl	8001278 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d907      	bls.n	800232c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e150      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002320:	40023800 	.word	0x40023800
 8002324:	42470000 	.word	0x42470000
 8002328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ea      	bne.n	800230e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8097 	beq.w	8002474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a73      	ldr	r2, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7fe ff73 	bl	8001278 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7fe ff6f 	bl	8001278 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e10c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x2ea>
 80023bc:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x30c>
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a5e      	ldr	r2, [pc, #376]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe ff34 	bl	8001278 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe ff30 	bl	8001278 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0cb      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ee      	beq.n	8002414 <HAL_RCC_OscConfig+0x334>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe ff1e 	bl	8001278 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe ff1a 	bl	8001278 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0b5      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ee      	bne.n	8002440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a1 	beq.w	80025c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b08      	cmp	r3, #8
 8002488:	d05c      	beq.n	8002544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d141      	bne.n	8002516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe feee 	bl	8001278 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe feea 	bl	8001278 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e087      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	491b      	ldr	r1, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fec3 	bl	8001278 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe febf 	bl	8001278 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e05c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x416>
 8002514:	e054      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe feac 	bl	8001278 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fea8 	bl	8001278 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e045      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
 8002542:	e03d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e038      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002550:	40023800 	.word	0x40023800
 8002554:	40007000 	.word	0x40007000
 8002558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x4ec>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d028      	beq.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d121      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d11a      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d111      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	3b01      	subs	r3, #1
 80025a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0cc      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d90c      	bls.n	800260c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0b8      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	494d      	ldr	r1, [pc, #308]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d044      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d119      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	2b03      	cmp	r3, #3
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e067      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4934      	ldr	r1, [pc, #208]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fdda 	bl	8001278 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fe fdd6 	bl	8001278 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d20c      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e032      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4916      	ldr	r1, [pc, #88]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002756:	f000 f821 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490a      	ldr	r1, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fbcc 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023c00 	.word	0x40023c00
 800278c:	40023800 	.word	0x40023800
 8002790:	08007014 	.word	0x08007014
 8002794:	20000038 	.word	0x20000038
 8002798:	2000003c 	.word	0x2000003c

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b094      	sub	sp, #80	; 0x50
 80027a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
 80027a8:	2300      	movs	r3, #0
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b4:	4b79      	ldr	r3, [pc, #484]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d00d      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x40>
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	f200 80e1 	bhi.w	8002988 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ce:	e0db      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027d4:	e0db      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80027d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027da:	e0d8      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e6:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	2200      	movs	r2, #0
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80027fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
 800280a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800280e:	4622      	mov	r2, r4
 8002810:	462b      	mov	r3, r5
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	0159      	lsls	r1, r3, #5
 800281c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002820:	0150      	lsls	r0, r2, #5
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4621      	mov	r1, r4
 8002828:	1a51      	subs	r1, r2, r1
 800282a:	6139      	str	r1, [r7, #16]
 800282c:	4629      	mov	r1, r5
 800282e:	eb63 0301 	sbc.w	r3, r3, r1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002840:	4659      	mov	r1, fp
 8002842:	018b      	lsls	r3, r1, #6
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284a:	4651      	mov	r1, sl
 800284c:	018a      	lsls	r2, r1, #6
 800284e:	4651      	mov	r1, sl
 8002850:	ebb2 0801 	subs.w	r8, r2, r1
 8002854:	4659      	mov	r1, fp
 8002856:	eb63 0901 	sbc.w	r9, r3, r1
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800286a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800286e:	4690      	mov	r8, r2
 8002870:	4699      	mov	r9, r3
 8002872:	4623      	mov	r3, r4
 8002874:	eb18 0303 	adds.w	r3, r8, r3
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	462b      	mov	r3, r5
 800287c:	eb49 0303 	adc.w	r3, r9, r3
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800288e:	4629      	mov	r1, r5
 8002890:	024b      	lsls	r3, r1, #9
 8002892:	4621      	mov	r1, r4
 8002894:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002898:	4621      	mov	r1, r4
 800289a:	024a      	lsls	r2, r1, #9
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a2:	2200      	movs	r2, #0
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ac:	f7fd fcf0 	bl	8000290 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4613      	mov	r3, r2
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b8:	e058      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ba:	4b38      	ldr	r3, [pc, #224]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	2200      	movs	r2, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	4611      	mov	r1, r2
 80028c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
 80028d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028d4:	4642      	mov	r2, r8
 80028d6:	464b      	mov	r3, r9
 80028d8:	f04f 0000 	mov.w	r0, #0
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	0159      	lsls	r1, r3, #5
 80028e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e6:	0150      	lsls	r0, r2, #5
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4641      	mov	r1, r8
 80028ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80028f2:	4649      	mov	r1, r9
 80028f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800290c:	ebb2 040a 	subs.w	r4, r2, sl
 8002910:	eb63 050b 	sbc.w	r5, r3, fp
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	00eb      	lsls	r3, r5, #3
 800291e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002922:	00e2      	lsls	r2, r4, #3
 8002924:	4614      	mov	r4, r2
 8002926:	461d      	mov	r5, r3
 8002928:	4643      	mov	r3, r8
 800292a:	18e3      	adds	r3, r4, r3
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	464b      	mov	r3, r9
 8002930:	eb45 0303 	adc.w	r3, r5, r3
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002942:	4629      	mov	r1, r5
 8002944:	028b      	lsls	r3, r1, #10
 8002946:	4621      	mov	r1, r4
 8002948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800294c:	4621      	mov	r1, r4
 800294e:	028a      	lsls	r2, r1, #10
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	2200      	movs	r2, #0
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	61fa      	str	r2, [r7, #28]
 800295c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002960:	f7fd fc96 	bl	8000290 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4613      	mov	r3, r2
 800296a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_GetSysClockFreq+0x200>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800297c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800297e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002990:	4618      	mov	r0, r3
 8002992:	3750      	adds	r7, #80	; 0x50
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	00f42400 	.word	0x00f42400
 80029a4:	007a1200 	.word	0x007a1200

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000038 	.word	0x20000038

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c4:	f7ff fff0 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0a9b      	lsrs	r3, r3, #10
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08007024 	.word	0x08007024

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffdc 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0b5b      	lsrs	r3, r3, #13
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	08007024 	.word	0x08007024

08002a10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0203 	and.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_RCC_GetClockConfig+0x60>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 020f 	and.w	r2, r3, #15
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e041      	b.n	8002b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f839 	bl	8002b12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f000 f9d8 	bl	8002e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d001      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e04e      	b.n	8002bde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a23      	ldr	r2, [pc, #140]	; (8002bec <HAL_TIM_Base_Start_IT+0xc4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d022      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x80>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d01d      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x80>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d018      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x80>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x80>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x80>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <HAL_TIM_Base_Start_IT+0xd4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x80>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x80>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d111      	bne.n	8002bcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d010      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	e007      	b.n	8002bdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40000c00 	.word	0x40000c00
 8002bfc:	40010400 	.word	0x40010400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40001800 	.word	0x40001800

08002c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0202 	mvn.w	r2, #2
 8002c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8ee 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8e0 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f8f1 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0204 	mvn.w	r2, #4
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8c4 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8b6 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8c7 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d122      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d11b      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0208 	mvn.w	r2, #8
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f89a 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f88c 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f89d 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d122      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d11b      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0210 	mvn.w	r2, #16
 8002d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2208      	movs	r2, #8
 8002d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f870 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f862 	bl	8002e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f873 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10e      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0201 	mvn.w	r2, #1
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd ff18 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d10e      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d107      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f902 	bl	8002fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d107      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f838 	bl	8002e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d10e      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d107      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0220 	mvn.w	r2, #32
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8cc 	bl	8002fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a40      	ldr	r2, [pc, #256]	; (8002f7c <TIM_Base_SetConfig+0x114>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e86:	d00f      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3d      	ldr	r2, [pc, #244]	; (8002f80 <TIM_Base_SetConfig+0x118>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <TIM_Base_SetConfig+0x11c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3b      	ldr	r2, [pc, #236]	; (8002f88 <TIM_Base_SetConfig+0x120>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3a      	ldr	r2, [pc, #232]	; (8002f8c <TIM_Base_SetConfig+0x124>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d108      	bne.n	8002eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	; (8002f7c <TIM_Base_SetConfig+0x114>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d02b      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d027      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <TIM_Base_SetConfig+0x118>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d023      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a2b      	ldr	r2, [pc, #172]	; (8002f84 <TIM_Base_SetConfig+0x11c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <TIM_Base_SetConfig+0x120>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01b      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <TIM_Base_SetConfig+0x124>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d017      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <TIM_Base_SetConfig+0x128>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <TIM_Base_SetConfig+0x12c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00f      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <TIM_Base_SetConfig+0x130>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <TIM_Base_SetConfig+0x134>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <TIM_Base_SetConfig+0x138>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <TIM_Base_SetConfig+0x13c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d108      	bne.n	8002f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <TIM_Base_SetConfig+0x114>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_Base_SetConfig+0xf8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <TIM_Base_SetConfig+0x124>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	615a      	str	r2, [r3, #20]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40000c00 	.word	0x40000c00
 8002f8c:	40010400 	.word	0x40010400
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800
 8002f9c:	40001800 	.word	0x40001800
 8002fa0:	40001c00 	.word	0x40001c00
 8002fa4:	40002000 	.word	0x40002000

08002fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e03f      	b.n	8003062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd feea 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f929 	bl	800326c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b08a      	sub	sp, #40	; 0x28
 800306e:	af02      	add	r7, sp, #8
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d17c      	bne.n	8003184 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_UART_Transmit+0x2c>
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e075      	b.n	8003186 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Transmit+0x3e>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e06e      	b.n	8003186 <HAL_UART_Transmit+0x11c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2221      	movs	r2, #33	; 0x21
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030be:	f7fe f8db 	bl	8001278 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d8:	d108      	bne.n	80030ec <HAL_UART_Transmit+0x82>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e003      	b.n	80030f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030fc:	e02a      	b.n	8003154 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f840 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e036      	b.n	8003186 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3302      	adds	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e007      	b.n	8003146 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3301      	adds	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1cf      	bne.n	80030fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f810 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e006      	b.n	8003186 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b090      	sub	sp, #64	; 0x40
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319e:	e050      	b.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d04c      	beq.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0x30>
 80031ae:	f7fe f863 	bl	8001278 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d241      	bcs.n	8003242 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031de:	637a      	str	r2, [r7, #52]	; 0x34
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	613b      	str	r3, [r7, #16]
   return(result);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3314      	adds	r3, #20
 8003210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003212:	623a      	str	r2, [r7, #32]
 8003214:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	69f9      	ldr	r1, [r7, #28]
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e5      	bne.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e00f      	b.n	8003262 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	429a      	cmp	r2, r3
 800325e:	d09f      	beq.n	80031a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3740      	adds	r7, #64	; 0x40
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b0c0      	sub	sp, #256	; 0x100
 8003272:	af00      	add	r7, sp, #0
 8003274:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	ea40 0301 	orr.w	r3, r0, r1
 8003294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032c4:	f021 010c 	bic.w	r1, r1, #12
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032d2:	430b      	orrs	r3, r1
 80032d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	6999      	ldr	r1, [r3, #24]
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	ea40 0301 	orr.w	r3, r0, r1
 80032f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b8f      	ldr	r3, [pc, #572]	; (8003538 <UART_SetConfig+0x2cc>)
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d005      	beq.n	800330c <UART_SetConfig+0xa0>
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b8d      	ldr	r3, [pc, #564]	; (800353c <UART_SetConfig+0x2d0>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d104      	bne.n	8003316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7ff fb6c 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8003310:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003314:	e003      	b.n	800331e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7ff fb53 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 800331a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003328:	f040 810c 	bne.w	8003544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003336:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800333a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800333e:	4622      	mov	r2, r4
 8003340:	462b      	mov	r3, r5
 8003342:	1891      	adds	r1, r2, r2
 8003344:	65b9      	str	r1, [r7, #88]	; 0x58
 8003346:	415b      	adcs	r3, r3
 8003348:	65fb      	str	r3, [r7, #92]	; 0x5c
 800334a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800334e:	4621      	mov	r1, r4
 8003350:	eb12 0801 	adds.w	r8, r2, r1
 8003354:	4629      	mov	r1, r5
 8003356:	eb43 0901 	adc.w	r9, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb18 0303 	adds.w	r3, r8, r3
 8003378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800337c:	462b      	mov	r3, r5
 800337e:	eb49 0303 	adc.w	r3, r9, r3
 8003382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003392:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800339a:	460b      	mov	r3, r1
 800339c:	18db      	adds	r3, r3, r3
 800339e:	653b      	str	r3, [r7, #80]	; 0x50
 80033a0:	4613      	mov	r3, r2
 80033a2:	eb42 0303 	adc.w	r3, r2, r3
 80033a6:	657b      	str	r3, [r7, #84]	; 0x54
 80033a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033b0:	f7fc ff6e 	bl	8000290 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4b61      	ldr	r3, [pc, #388]	; (8003540 <UART_SetConfig+0x2d4>)
 80033ba:	fba3 2302 	umull	r2, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	011c      	lsls	r4, r3, #4
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	64b9      	str	r1, [r7, #72]	; 0x48
 80033dc:	415b      	adcs	r3, r3
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033e4:	4641      	mov	r1, r8
 80033e6:	eb12 0a01 	adds.w	sl, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb43 0b01 	adc.w	fp, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003404:	4692      	mov	sl, r2
 8003406:	469b      	mov	fp, r3
 8003408:	4643      	mov	r3, r8
 800340a:	eb1a 0303 	adds.w	r3, sl, r3
 800340e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003412:	464b      	mov	r3, r9
 8003414:	eb4b 0303 	adc.w	r3, fp, r3
 8003418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003428:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800342c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003430:	460b      	mov	r3, r1
 8003432:	18db      	adds	r3, r3, r3
 8003434:	643b      	str	r3, [r7, #64]	; 0x40
 8003436:	4613      	mov	r3, r2
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
 800343e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003446:	f7fc ff23 	bl	8000290 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4611      	mov	r1, r2
 8003450:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2301 	umull	r2, r3, r3, r1
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2264      	movs	r2, #100	; 0x64
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <UART_SetConfig+0x2d4>)
 8003468:	fba3 2302 	umull	r2, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003474:	441c      	add	r4, r3
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003480:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003490:	415b      	adcs	r3, r3
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003498:	4641      	mov	r1, r8
 800349a:	1851      	adds	r1, r2, r1
 800349c:	6339      	str	r1, [r7, #48]	; 0x30
 800349e:	4649      	mov	r1, r9
 80034a0:	414b      	adcs	r3, r1
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034b0:	4659      	mov	r1, fp
 80034b2:	00cb      	lsls	r3, r1, #3
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ba:	4651      	mov	r1, sl
 80034bc:	00ca      	lsls	r2, r1, #3
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	4642      	mov	r2, r8
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034cc:	464b      	mov	r3, r9
 80034ce:	460a      	mov	r2, r1
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034ec:	460b      	mov	r3, r1
 80034ee:	18db      	adds	r3, r3, r3
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f2:	4613      	mov	r3, r2
 80034f4:	eb42 0303 	adc.w	r3, r2, r3
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003502:	f7fc fec5 	bl	8000290 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <UART_SetConfig+0x2d4>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	; 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <UART_SetConfig+0x2d4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 0207 	and.w	r2, r3, #7
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4422      	add	r2, r4
 8003532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003534:	e105      	b.n	8003742 <UART_SetConfig+0x4d6>
 8003536:	bf00      	nop
 8003538:	40011000 	.word	0x40011000
 800353c:	40011400 	.word	0x40011400
 8003540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800354e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003556:	4642      	mov	r2, r8
 8003558:	464b      	mov	r3, r9
 800355a:	1891      	adds	r1, r2, r2
 800355c:	6239      	str	r1, [r7, #32]
 800355e:	415b      	adcs	r3, r3
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003566:	4641      	mov	r1, r8
 8003568:	1854      	adds	r4, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb43 0501 	adc.w	r5, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	00eb      	lsls	r3, r5, #3
 800357a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800357e:	00e2      	lsls	r2, r4, #3
 8003580:	4614      	mov	r4, r2
 8003582:	461d      	mov	r5, r3
 8003584:	4643      	mov	r3, r8
 8003586:	18e3      	adds	r3, r4, r3
 8003588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800358c:	464b      	mov	r3, r9
 800358e:	eb45 0303 	adc.w	r3, r5, r3
 8003592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035b2:	4629      	mov	r1, r5
 80035b4:	008b      	lsls	r3, r1, #2
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035bc:	4621      	mov	r1, r4
 80035be:	008a      	lsls	r2, r1, #2
 80035c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035c4:	f7fc fe64 	bl	8000290 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4b60      	ldr	r3, [pc, #384]	; (8003750 <UART_SetConfig+0x4e4>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011c      	lsls	r4, r3, #4
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	1891      	adds	r1, r2, r2
 80035ee:	61b9      	str	r1, [r7, #24]
 80035f0:	415b      	adcs	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f8:	4641      	mov	r1, r8
 80035fa:	1851      	adds	r1, r2, r1
 80035fc:	6139      	str	r1, [r7, #16]
 80035fe:	4649      	mov	r1, r9
 8003600:	414b      	adcs	r3, r1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003610:	4659      	mov	r1, fp
 8003612:	00cb      	lsls	r3, r1, #3
 8003614:	4651      	mov	r1, sl
 8003616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361a:	4651      	mov	r1, sl
 800361c:	00ca      	lsls	r2, r1, #3
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	4603      	mov	r3, r0
 8003624:	4642      	mov	r2, r8
 8003626:	189b      	adds	r3, r3, r2
 8003628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800362c:	464b      	mov	r3, r9
 800362e:	460a      	mov	r2, r1
 8003630:	eb42 0303 	adc.w	r3, r2, r3
 8003634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	67bb      	str	r3, [r7, #120]	; 0x78
 8003642:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003650:	4649      	mov	r1, r9
 8003652:	008b      	lsls	r3, r1, #2
 8003654:	4641      	mov	r1, r8
 8003656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800365a:	4641      	mov	r1, r8
 800365c:	008a      	lsls	r2, r1, #2
 800365e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003662:	f7fc fe15 	bl	8000290 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <UART_SetConfig+0x4e4>)
 800366c:	fba3 1302 	umull	r1, r3, r3, r2
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	2164      	movs	r1, #100	; 0x64
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	3332      	adds	r3, #50	; 0x32
 800367e:	4a34      	ldr	r2, [pc, #208]	; (8003750 <UART_SetConfig+0x4e4>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368a:	441c      	add	r4, r3
 800368c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003690:	2200      	movs	r2, #0
 8003692:	673b      	str	r3, [r7, #112]	; 0x70
 8003694:	677a      	str	r2, [r7, #116]	; 0x74
 8003696:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
 800369e:	1891      	adds	r1, r2, r2
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	415b      	adcs	r3, r3
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036aa:	4641      	mov	r1, r8
 80036ac:	1851      	adds	r1, r2, r1
 80036ae:	6039      	str	r1, [r7, #0]
 80036b0:	4649      	mov	r1, r9
 80036b2:	414b      	adcs	r3, r1
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036c2:	4659      	mov	r1, fp
 80036c4:	00cb      	lsls	r3, r1, #3
 80036c6:	4651      	mov	r1, sl
 80036c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036cc:	4651      	mov	r1, sl
 80036ce:	00ca      	lsls	r2, r1, #3
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	4642      	mov	r2, r8
 80036d8:	189b      	adds	r3, r3, r2
 80036da:	66bb      	str	r3, [r7, #104]	; 0x68
 80036dc:	464b      	mov	r3, r9
 80036de:	460a      	mov	r2, r1
 80036e0:	eb42 0303 	adc.w	r3, r2, r3
 80036e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	663b      	str	r3, [r7, #96]	; 0x60
 80036f0:	667a      	str	r2, [r7, #100]	; 0x64
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036fe:	4649      	mov	r1, r9
 8003700:	008b      	lsls	r3, r1, #2
 8003702:	4641      	mov	r1, r8
 8003704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003708:	4641      	mov	r1, r8
 800370a:	008a      	lsls	r2, r1, #2
 800370c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003710:	f7fc fdbe 	bl	8000290 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <UART_SetConfig+0x4e4>)
 800371a:	fba3 1302 	umull	r1, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2164      	movs	r1, #100	; 0x64
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	3332      	adds	r3, #50	; 0x32
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <UART_SetConfig+0x4e4>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4422      	add	r2, r4
 8003740:	609a      	str	r2, [r3, #8]
}
 8003742:	bf00      	nop
 8003744:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003748:	46bd      	mov	sp, r7
 800374a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374e:	bf00      	nop
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003754:	b084      	sub	sp, #16
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	f107 001c 	add.w	r0, r7, #28
 8003762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	2b01      	cmp	r3, #1
 800376a:	d122      	bne.n	80037b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d105      	bne.n	80037a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 faa2 	bl	8003cf0 <USB_CoreReset>
 80037ac:	4603      	mov	r3, r0
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e01a      	b.n	80037e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa96 	bl	8003cf0 <USB_CoreReset>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
 80037da:	e005      	b.n	80037e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d10b      	bne.n	8003806 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f043 0206 	orr.w	r2, r3, #6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003812:	b004      	add	sp, #16
 8003814:	4770      	bx	lr

08003816 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 0201 	bic.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d115      	bne.n	8003886 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003866:	2001      	movs	r0, #1
 8003868:	f7fd fd12 	bl	8001290 <HAL_Delay>
      ms++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3301      	adds	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa2e 	bl	8003cd4 <USB_GetMode>
 8003878:	4603      	mov	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	d01e      	beq.n	80038bc <USB_SetCurrentMode+0x84>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b31      	cmp	r3, #49	; 0x31
 8003882:	d9f0      	bls.n	8003866 <USB_SetCurrentMode+0x2e>
 8003884:	e01a      	b.n	80038bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d115      	bne.n	80038b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003898:	2001      	movs	r0, #1
 800389a:	f7fd fcf9 	bl	8001290 <HAL_Delay>
      ms++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa15 	bl	8003cd4 <USB_GetMode>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <USB_SetCurrentMode+0x84>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b31      	cmp	r3, #49	; 0x31
 80038b4:	d9f0      	bls.n	8003898 <USB_SetCurrentMode+0x60>
 80038b6:	e001      	b.n	80038bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e005      	b.n	80038c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b32      	cmp	r3, #50	; 0x32
 80038c0:	d101      	bne.n	80038c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038d0:	b084      	sub	sp, #16
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	e009      	b.n	8003904 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	3340      	adds	r3, #64	; 0x40
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	2200      	movs	r2, #0
 80038fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3301      	adds	r3, #1
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b0e      	cmp	r3, #14
 8003908:	d9f2      	bls.n	80038f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11c      	bne.n	800394a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
 8003948:	e00b      	b.n	8003962 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003968:	461a      	mov	r2, r3
 800396a:	2300      	movs	r3, #0
 800396c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003974:	4619      	mov	r1, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397c:	461a      	mov	r2, r3
 800397e:	680b      	ldr	r3, [r1, #0]
 8003980:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10c      	bne.n	80039a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800398e:	2100      	movs	r1, #0
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f965 	bl	8003c60 <USB_SetDevSpeed>
 8003996:	e008      	b.n	80039aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003998:	2101      	movs	r1, #1
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f960 	bl	8003c60 <USB_SetDevSpeed>
 80039a0:	e003      	b.n	80039aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039a2:	2103      	movs	r1, #3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f95b 	bl	8003c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039aa:	2110      	movs	r1, #16
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f8f3 	bl	8003b98 <USB_FlushTxFifo>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f91f 	bl	8003c00 <USB_FlushRxFifo>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d2:	461a      	mov	r2, r3
 80039d4:	2300      	movs	r3, #0
 80039d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039de:	461a      	mov	r2, r3
 80039e0:	2300      	movs	r3, #0
 80039e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ea:	461a      	mov	r2, r3
 80039ec:	2300      	movs	r3, #0
 80039ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e043      	b.n	8003a7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a0c:	d118      	bne.n	8003a40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	461a      	mov	r2, r3
 8003a22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e013      	b.n	8003a52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a36:	461a      	mov	r2, r3
 8003a38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e008      	b.n	8003a52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	461a      	mov	r2, r3
 8003a72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3b7      	bcc.n	80039f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e043      	b.n	8003b14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aa2:	d118      	bne.n	8003ad6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e013      	b.n	8003ae8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e008      	b.n	8003ae8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	461a      	mov	r2, r3
 8003af6:	2300      	movs	r3, #0
 8003af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	461a      	mov	r2, r3
 8003b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	3301      	adds	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3b7      	bcc.n	8003a8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f043 0210 	orr.w	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <USB_DevInit+0x2c4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f043 0208 	orr.w	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b90:	b004      	add	sp, #16
 8003b92:	4770      	bx	lr
 8003b94:	803c3800 	.word	0x803c3800

08003b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <USB_FlushTxFifo+0x64>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e01b      	b.n	8003bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	daf2      	bge.n	8003ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	019b      	lsls	r3, r3, #6
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <USB_FlushTxFifo+0x64>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d0f0      	beq.n	8003bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	00030d40 	.word	0x00030d40

08003c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <USB_FlushRxFifo+0x5c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e018      	b.n	8003c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	daf2      	bge.n	8003c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <USB_FlushRxFifo+0x5c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e006      	b.n	8003c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d0f0      	beq.n	8003c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	00030d40 	.word	0x00030d40

08003c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003cac:	f023 0303 	bic.w	r3, r3, #3
 8003cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <USB_CoreReset+0x64>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e01b      	b.n	8003d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	daf2      	bge.n	8003cfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <USB_CoreReset+0x64>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e006      	b.n	8003d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d0f0      	beq.n	8003d26 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	00030d40 	.word	0x00030d40

08003d58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d6a:	2b84      	cmp	r3, #132	; 0x84
 8003d6c:	d005      	beq.n	8003d7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	3303      	adds	r3, #3
 8003d78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d8c:	f000 feb8 	bl	8004b00 <vTaskStartScheduler>
  
  return osOK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af02      	add	r7, sp, #8
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685c      	ldr	r4, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dac:	b29e      	uxth	r6, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ffcf 	bl	8003d58 <makeFreeRtosPriority>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	9200      	str	r2, [sp, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	4629      	mov	r1, r5
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f000 fc9c 	bl	8004708 <xTaskCreate>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003dda:	68fb      	ldr	r3, [r7, #12]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003de4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <osDelay+0x16>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	e000      	b.n	8003dfc <osDelay+0x18>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fe4b 	bl	8004a98 <vTaskDelay>
  
  return osOK;
 8003e02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f103 0208 	add.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0208 	add.w	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f103 0208 	add.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e00c      	b.n	8003ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <vListInsert+0x2e>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d2f6      	bcs.n	8003ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6852      	ldr	r2, [r2, #4]
 8003f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d103      	bne.n	8003f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericReset+0x2a>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60bb      	str	r3, [r7, #8]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f9e:	f001 fbf1 	bl	8005784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	441a      	add	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	22ff      	movs	r2, #255	; 0xff
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	22ff      	movs	r2, #255	; 0xff
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d114      	bne.n	800401e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01a      	beq.n	8004032 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3310      	adds	r3, #16
 8004000:	4618      	mov	r0, r3
 8004002:	f000 ffe9 	bl	8004fd8 <xTaskRemoveFromEventList>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <xQueueGenericReset+0xcc>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	e009      	b.n	8004032 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3310      	adds	r3, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fef2 	bl	8003e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff feed 	bl	8003e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004032:	f001 fbd7 	bl	80057e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	613b      	str	r3, [r7, #16]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	3348      	adds	r3, #72	; 0x48
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fc63 	bl	8005948 <pvPortMalloc>
 8004082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3348      	adds	r3, #72	; 0x48
 8004092:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004094:	79fa      	ldrb	r2, [r7, #7]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	4613      	mov	r3, r2
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f805 	bl	80040b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040a6:	69bb      	ldr	r3, [r7, #24]
	}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d103      	bne.n	80040cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e002      	b.n	80040d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040de:	2101      	movs	r1, #1
 80040e0:	69b8      	ldr	r0, [r7, #24]
 80040e2:	f7ff ff47 	bl	8003f74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08e      	sub	sp, #56	; 0x38
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040fe:	2300      	movs	r3, #0
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <xQueueGenericSend+0x32>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <xQueueGenericSend+0x40>
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <xQueueGenericSend+0x44>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <xQueueGenericSend+0x46>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <xQueueGenericSend+0x60>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d103      	bne.n	800415e <xQueueGenericSend+0x6e>
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <xQueueGenericSend+0x72>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <xQueueGenericSend+0x74>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <xQueueGenericSend+0x8e>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	623b      	str	r3, [r7, #32]
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800417e:	f001 f8cd 	bl	800531c <xTaskGetSchedulerState>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <xQueueGenericSend+0x9e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <xQueueGenericSend+0xa2>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueGenericSend+0xa4>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueGenericSend+0xbe>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	61fb      	str	r3, [r7, #28]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ae:	f001 fae9 	bl	8005784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <xQueueGenericSend+0xd4>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d129      	bne.n	8004218 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ca:	f000 f98d 	bl	80044e8 <prvCopyDataToQueue>
 80041ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fefb 	bl	8004fd8 <xTaskRemoveFromEventList>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d013      	beq.n	8004210 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041e8:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <xQueueGenericSend+0x1f8>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	e00a      	b.n	8004210 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <xQueueGenericSend+0x1f8>)
 8004202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004210:	f001 fae8 	bl	80057e4 <vPortExitCritical>
				return pdPASS;
 8004214:	2301      	movs	r3, #1
 8004216:	e063      	b.n	80042e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800421e:	f001 fae1 	bl	80057e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004222:	2300      	movs	r3, #0
 8004224:	e05c      	b.n	80042e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	4618      	mov	r0, r3
 8004232:	f000 ff33 	bl	800509c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800423a:	f001 fad3 	bl	80057e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800423e:	f000 fcaf 	bl	8004ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004242:	f001 fa9f 	bl	8005784 <vPortEnterCritical>
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800424c:	b25b      	sxtb	r3, r3
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d103      	bne.n	800425c <xQueueGenericSend+0x16c>
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004262:	b25b      	sxtb	r3, r3
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d103      	bne.n	8004272 <xQueueGenericSend+0x182>
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004272:	f001 fab7 	bl	80057e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004276:	1d3a      	adds	r2, r7, #4
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f000 ff22 	bl	80050c8 <xTaskCheckForTimeOut>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d124      	bne.n	80042d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800428a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800428c:	f000 fa24 	bl	80046d8 <prvIsQueueFull>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d018      	beq.n	80042c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	3310      	adds	r3, #16
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fe76 	bl	8004f90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a6:	f000 f9af 	bl	8004608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042aa:	f000 fc87 	bl	8004bbc <xTaskResumeAll>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f47f af7c 	bne.w	80041ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <xQueueGenericSend+0x1f8>)
 80042b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	e772      	b.n	80041ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ca:	f000 f99d 	bl	8004608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ce:	f000 fc75 	bl	8004bbc <xTaskResumeAll>
 80042d2:	e76c      	b.n	80041ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d6:	f000 f997 	bl	8004608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042da:	f000 fc6f 	bl	8004bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3738      	adds	r7, #56	; 0x38
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xQueueReceive+0x30>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	623b      	str	r3, [r7, #32]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <xQueueReceive+0x3e>
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <xQueueReceive+0x42>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <xQueueReceive+0x44>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <xQueueReceive+0x5e>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	61fb      	str	r3, [r7, #28]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800434a:	f000 ffe7 	bl	800531c <xTaskGetSchedulerState>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <xQueueReceive+0x6e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <xQueueReceive+0x72>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <xQueueReceive+0x74>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <xQueueReceive+0x8e>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	61bb      	str	r3, [r7, #24]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800437a:	f001 fa03 	bl	8005784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01f      	beq.n	80043ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438e:	f000 f915 	bl	80045bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	1e5a      	subs	r2, r3, #1
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00f      	beq.n	80043c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	3310      	adds	r3, #16
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fe16 	bl	8004fd8 <xTaskRemoveFromEventList>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043b2:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <xQueueReceive+0x1bc>)
 80043b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043c2:	f001 fa0f 	bl	80057e4 <vPortExitCritical>
				return pdPASS;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e069      	b.n	800449e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043d0:	f001 fa08 	bl	80057e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e062      	b.n	800449e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043de:	f107 0310 	add.w	r3, r7, #16
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fe5a 	bl	800509c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043e8:	2301      	movs	r3, #1
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ec:	f001 f9fa 	bl	80057e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043f0:	f000 fbd6 	bl	8004ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043f4:	f001 f9c6 	bl	8005784 <vPortEnterCritical>
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043fe:	b25b      	sxtb	r3, r3
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d103      	bne.n	800440e <xQueueReceive+0x122>
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004414:	b25b      	sxtb	r3, r3
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d103      	bne.n	8004424 <xQueueReceive+0x138>
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004424:	f001 f9de 	bl	80057e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004428:	1d3a      	adds	r2, r7, #4
 800442a:	f107 0310 	add.w	r3, r7, #16
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fe49 	bl	80050c8 <xTaskCheckForTimeOut>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d123      	bne.n	8004484 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800443c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800443e:	f000 f935 	bl	80046ac <prvIsQueueEmpty>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fd9d 	bl	8004f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004458:	f000 f8d6 	bl	8004608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800445c:	f000 fbae 	bl	8004bbc <xTaskResumeAll>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d189      	bne.n	800437a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <xQueueReceive+0x1bc>)
 8004468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	e780      	b.n	800437a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447a:	f000 f8c5 	bl	8004608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800447e:	f000 fb9d 	bl	8004bbc <xTaskResumeAll>
 8004482:	e77a      	b.n	800437a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004486:	f000 f8bf 	bl	8004608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800448a:	f000 fb97 	bl	8004bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800448e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004490:	f000 f90c 	bl	80046ac <prvIsQueueEmpty>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	f43f af6f 	beq.w	800437a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800449c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3730      	adds	r7, #48	; 0x30
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80044d0:	f001 f958 	bl	8005784 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80044da:	f001 f983 	bl	80057e4 <vPortExitCritical>

	return uxReturn;
 80044de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d14d      	bne.n	80045aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ff20 	bl	8005358 <xTaskPriorityDisinherit>
 8004518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	e043      	b.n	80045aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d119      	bne.n	800455c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6858      	ldr	r0, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	461a      	mov	r2, r3
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	f001 fe49 	bl	80061ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	441a      	add	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	d32b      	bcc.n	80045aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	e026      	b.n	80045aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68d8      	ldr	r0, [r3, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	461a      	mov	r2, r3
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	f001 fe2f 	bl	80061ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	425b      	negs	r3, r3
 8004576:	441a      	add	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d207      	bcs.n	8004598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	425b      	negs	r3, r3
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d105      	bne.n	80045aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045b2:	697b      	ldr	r3, [r7, #20]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d018      	beq.n	8004600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	441a      	add	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d303      	bcc.n	80045f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68d9      	ldr	r1, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	461a      	mov	r2, r3
 80045fa:	6838      	ldr	r0, [r7, #0]
 80045fc:	f001 fde5 	bl	80061ca <memcpy>
	}
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004610:	f001 f8b8 	bl	8005784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800461c:	e011      	b.n	8004642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d012      	beq.n	800464c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3324      	adds	r3, #36	; 0x24
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fcd4 	bl	8004fd8 <xTaskRemoveFromEventList>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004636:	f000 fda9 	bl	800518c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	3b01      	subs	r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	dce9      	bgt.n	800461e <prvUnlockQueue+0x16>
 800464a:	e000      	b.n	800464e <prvUnlockQueue+0x46>
					break;
 800464c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004656:	f001 f8c5 	bl	80057e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800465a:	f001 f893 	bl	8005784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004666:	e011      	b.n	800468c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d012      	beq.n	8004696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3310      	adds	r3, #16
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fcaf 	bl	8004fd8 <xTaskRemoveFromEventList>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004680:	f000 fd84 	bl	800518c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004684:	7bbb      	ldrb	r3, [r7, #14]
 8004686:	3b01      	subs	r3, #1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800468c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004690:	2b00      	cmp	r3, #0
 8004692:	dce9      	bgt.n	8004668 <prvUnlockQueue+0x60>
 8004694:	e000      	b.n	8004698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046a0:	f001 f8a0 	bl	80057e4 <vPortExitCritical>
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046b4:	f001 f866 	bl	8005784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e001      	b.n	80046ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046ca:	f001 f88b 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046e0:	f001 f850 	bl	8005784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d102      	bne.n	80046f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e001      	b.n	80046fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046fa:	f001 f873 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af04      	add	r7, sp, #16
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4618      	mov	r0, r3
 800471e:	f001 f913 	bl	8005948 <pvPortMalloc>
 8004722:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800472a:	20b4      	movs	r0, #180	; 0xb4
 800472c:	f001 f90c 	bl	8005948 <pvPortMalloc>
 8004730:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
 800473e:	e005      	b.n	800474c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004740:	6978      	ldr	r0, [r7, #20]
 8004742:	f001 f9cd 	bl	8005ae0 <vPortFree>
 8004746:	e001      	b.n	800474c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d013      	beq.n	800477a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	2300      	movs	r3, #0
 8004756:	9303      	str	r3, [sp, #12]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	9302      	str	r3, [sp, #8]
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f80f 	bl	800478c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800476e:	69f8      	ldr	r0, [r7, #28]
 8004770:	f000 f8aa 	bl	80048c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004774:	2301      	movs	r3, #1
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e002      	b.n	8004780 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
 800477e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004780:	69bb      	ldr	r3, [r7, #24]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047a4:	3b01      	subs	r3, #1
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	617b      	str	r3, [r7, #20]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01f      	beq.n	800481a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	e012      	b.n	8004806 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	7819      	ldrb	r1, [r3, #0]
 80047e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	3334      	adds	r3, #52	; 0x34
 80047f0:	460a      	mov	r2, r1
 80047f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b0f      	cmp	r3, #15
 800480a:	d9e9      	bls.n	80047e0 <prvInitialiseNewTask+0x54>
 800480c:	e000      	b.n	8004810 <prvInitialiseNewTask+0x84>
			{
				break;
 800480e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004818:	e003      	b.n	8004822 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	2b06      	cmp	r3, #6
 8004826:	d901      	bls.n	800482c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004828:	2306      	movs	r3, #6
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004836:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	2200      	movs	r2, #0
 800483c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	3304      	adds	r3, #4
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fb02 	bl	8003e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	3318      	adds	r3, #24
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fafd 	bl	8003e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004856:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	f1c3 0207 	rsb	r2, r3, #7
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	2200      	movs	r2, #0
 8004874:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	334c      	adds	r3, #76	; 0x4c
 800487c:	2260      	movs	r2, #96	; 0x60
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f001 fcb0 	bl	80061e6 <memset>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	4a0c      	ldr	r2, [pc, #48]	; (80048bc <prvInitialiseNewTask+0x130>)
 800488a:	651a      	str	r2, [r3, #80]	; 0x50
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <prvInitialiseNewTask+0x134>)
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	4a0b      	ldr	r2, [pc, #44]	; (80048c4 <prvInitialiseNewTask+0x138>)
 8004896:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	69b8      	ldr	r0, [r7, #24]
 800489e:	f000 fe47 	bl	8005530 <pxPortInitialiseStack>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048b4:	bf00      	nop
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	0800704c 	.word	0x0800704c
 80048c0:	0800706c 	.word	0x0800706c
 80048c4:	0800702c 	.word	0x0800702c

080048c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048d0:	f000 ff58 	bl	8005784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048d4:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <prvAddNewTaskToReadyList+0xb8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	4a29      	ldr	r2, [pc, #164]	; (8004980 <prvAddNewTaskToReadyList+0xb8>)
 80048dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048de:	4b29      	ldr	r3, [pc, #164]	; (8004984 <prvAddNewTaskToReadyList+0xbc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048e6:	4a27      	ldr	r2, [pc, #156]	; (8004984 <prvAddNewTaskToReadyList+0xbc>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048ec:	4b24      	ldr	r3, [pc, #144]	; (8004980 <prvAddNewTaskToReadyList+0xb8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d110      	bne.n	8004916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048f4:	f000 fc6e 	bl	80051d4 <prvInitialiseTaskLists>
 80048f8:	e00d      	b.n	8004916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <prvAddNewTaskToReadyList+0xc0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004902:	4b20      	ldr	r3, [pc, #128]	; (8004984 <prvAddNewTaskToReadyList+0xbc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	429a      	cmp	r2, r3
 800490e:	d802      	bhi.n	8004916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <prvAddNewTaskToReadyList+0xbc>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004916:	4b1d      	ldr	r3, [pc, #116]	; (800498c <prvAddNewTaskToReadyList+0xc4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a1b      	ldr	r2, [pc, #108]	; (800498c <prvAddNewTaskToReadyList+0xc4>)
 800491e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	2201      	movs	r2, #1
 8004926:	409a      	lsls	r2, r3
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <prvAddNewTaskToReadyList+0xc8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4313      	orrs	r3, r2
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <prvAddNewTaskToReadyList+0xc8>)
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <prvAddNewTaskToReadyList+0xcc>)
 8004940:	441a      	add	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7ff fa8c 	bl	8003e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800494e:	f000 ff49 	bl	80057e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004952:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <prvAddNewTaskToReadyList+0xc0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00e      	beq.n	8004978 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <prvAddNewTaskToReadyList+0xbc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	429a      	cmp	r2, r3
 8004966:	d207      	bcs.n	8004978 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <prvAddNewTaskToReadyList+0xd0>)
 800496a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200009a8 	.word	0x200009a8
 8004984:	200008a8 	.word	0x200008a8
 8004988:	200009b4 	.word	0x200009b4
 800498c:	200009c4 	.word	0x200009c4
 8004990:	200009b0 	.word	0x200009b0
 8004994:	200008ac 	.word	0x200008ac
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	617b      	str	r3, [r7, #20]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <vTaskDelayUntil+0x46>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	613b      	str	r3, [r7, #16]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80049e2:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <vTaskDelayUntil+0xf0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <vTaskDelayUntil+0x64>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60fb      	str	r3, [r7, #12]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004a00:	f000 f8ce 	bl	8004ba0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004a04:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <vTaskDelayUntil+0xf4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d20b      	bcs.n	8004a36 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d211      	bcs.n	8004a4c <vTaskDelayUntil+0xb0>
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d90d      	bls.n	8004a4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004a30:	2301      	movs	r3, #1
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	e00a      	b.n	8004a4c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d303      	bcc.n	8004a48 <vTaskDelayUntil+0xac>
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d901      	bls.n	8004a4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d006      	beq.n	8004a66 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fcff 	bl	8005464 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004a66:	f000 f8a9 	bl	8004bbc <xTaskResumeAll>
 8004a6a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d107      	bne.n	8004a82 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <vTaskDelayUntil+0xf8>)
 8004a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a82:	bf00      	nop
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200009d0 	.word	0x200009d0
 8004a90:	200009ac 	.word	0x200009ac
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d017      	beq.n	8004ada <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <vTaskDelay+0x60>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <vTaskDelay+0x30>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60bb      	str	r3, [r7, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ac8:	f000 f86a 	bl	8004ba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004acc:	2100      	movs	r1, #0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fcc8 	bl	8005464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ad4:	f000 f872 	bl	8004bbc <xTaskResumeAll>
 8004ad8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <vTaskDelay+0x64>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	200009d0 	.word	0x200009d0
 8004afc:	e000ed04 	.word	0xe000ed04

08004b00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004b06:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <vTaskStartScheduler+0x80>)
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2280      	movs	r2, #128	; 0x80
 8004b12:	491c      	ldr	r1, [pc, #112]	; (8004b84 <vTaskStartScheduler+0x84>)
 8004b14:	481c      	ldr	r0, [pc, #112]	; (8004b88 <vTaskStartScheduler+0x88>)
 8004b16:	f7ff fdf7 	bl	8004708 <xTaskCreate>
 8004b1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d11b      	bne.n	8004b5a <vTaskStartScheduler+0x5a>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60bb      	str	r3, [r7, #8]
}
 8004b34:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <vTaskStartScheduler+0x8c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	334c      	adds	r3, #76	; 0x4c
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <vTaskStartScheduler+0x90>)
 8004b3e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <vTaskStartScheduler+0x94>)
 8004b42:	f04f 32ff 	mov.w	r2, #4294967295
 8004b46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <vTaskStartScheduler+0x98>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <vTaskStartScheduler+0x9c>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b54:	f000 fd74 	bl	8005640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b58:	e00e      	b.n	8004b78 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d10a      	bne.n	8004b78 <vTaskStartScheduler+0x78>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vTaskStartScheduler+0x76>
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	200009cc 	.word	0x200009cc
 8004b84:	08006fe4 	.word	0x08006fe4
 8004b88:	080051a5 	.word	0x080051a5
 8004b8c:	200008a8 	.word	0x200008a8
 8004b90:	20000048 	.word	0x20000048
 8004b94:	200009c8 	.word	0x200009c8
 8004b98:	200009b4 	.word	0x200009b4
 8004b9c:	200009ac 	.word	0x200009ac

08004ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <vTaskSuspendAll+0x18>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	4a03      	ldr	r2, [pc, #12]	; (8004bb8 <vTaskSuspendAll+0x18>)
 8004bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	200009d0 	.word	0x200009d0

08004bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bca:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <xTaskResumeAll+0x114>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	603b      	str	r3, [r7, #0]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004be8:	f000 fdcc 	bl	8005784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bec:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <xTaskResumeAll+0x114>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	4a37      	ldr	r2, [pc, #220]	; (8004cd0 <xTaskResumeAll+0x114>)
 8004bf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf6:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <xTaskResumeAll+0x114>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d161      	bne.n	8004cc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bfe:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <xTaskResumeAll+0x118>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d05d      	beq.n	8004cc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c06:	e02e      	b.n	8004c66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <xTaskResumeAll+0x11c>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3318      	adds	r3, #24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff f983 	bl	8003f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f97e 	bl	8003f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	2201      	movs	r2, #1
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <xTaskResumeAll+0x120>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <xTaskResumeAll+0x120>)
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <xTaskResumeAll+0x124>)
 8004c44:	441a      	add	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7ff f90a 	bl	8003e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <xTaskResumeAll+0x128>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c60:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <xTaskResumeAll+0x12c>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c66:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <xTaskResumeAll+0x11c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1cc      	bne.n	8004c08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c74:	f000 fb32 	bl	80052dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c78:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <xTaskResumeAll+0x130>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d010      	beq.n	8004ca6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c84:	f000 f86a 	bl	8004d5c <xTaskIncrementTick>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <xTaskResumeAll+0x12c>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f1      	bne.n	8004c84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ca0:	4b12      	ldr	r3, [pc, #72]	; (8004cec <xTaskResumeAll+0x130>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <xTaskResumeAll+0x12c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <xTaskResumeAll+0x134>)
 8004cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cc2:	f000 fd8f 	bl	80057e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200009d0 	.word	0x200009d0
 8004cd4:	200009a8 	.word	0x200009a8
 8004cd8:	20000968 	.word	0x20000968
 8004cdc:	200009b0 	.word	0x200009b0
 8004ce0:	200008ac 	.word	0x200008ac
 8004ce4:	200008a8 	.word	0x200008a8
 8004ce8:	200009bc 	.word	0x200009bc
 8004cec:	200009b8 	.word	0x200009b8
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <xTaskGetTickCount+0x1c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d00:	687b      	ldr	r3, [r7, #4]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	200009ac 	.word	0x200009ac

08004d14 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <pcTaskGetName+0x14>
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <pcTaskGetName+0x44>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	e000      	b.n	8004d2a <pcTaskGetName+0x16>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <pcTaskGetName+0x34>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	60bb      	str	r3, [r7, #8]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3334      	adds	r3, #52	; 0x34
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	200008a8 	.word	0x200008a8

08004d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d66:	4b4e      	ldr	r3, [pc, #312]	; (8004ea0 <xTaskIncrementTick+0x144>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 808e 	bne.w	8004e8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d70:	4b4c      	ldr	r3, [pc, #304]	; (8004ea4 <xTaskIncrementTick+0x148>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d78:	4a4a      	ldr	r2, [pc, #296]	; (8004ea4 <xTaskIncrementTick+0x148>)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d120      	bne.n	8004dc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d84:	4b48      	ldr	r3, [pc, #288]	; (8004ea8 <xTaskIncrementTick+0x14c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	603b      	str	r3, [r7, #0]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <xTaskIncrementTick+0x46>
 8004da4:	4b40      	ldr	r3, [pc, #256]	; (8004ea8 <xTaskIncrementTick+0x14c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	4b40      	ldr	r3, [pc, #256]	; (8004eac <xTaskIncrementTick+0x150>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a3e      	ldr	r2, [pc, #248]	; (8004ea8 <xTaskIncrementTick+0x14c>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4a3e      	ldr	r2, [pc, #248]	; (8004eac <xTaskIncrementTick+0x150>)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <xTaskIncrementTick+0x154>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	4a3c      	ldr	r2, [pc, #240]	; (8004eb0 <xTaskIncrementTick+0x154>)
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	f000 fa8b 	bl	80052dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <xTaskIncrementTick+0x158>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d348      	bcc.n	8004e62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd0:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <xTaskIncrementTick+0x14c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dda:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <xTaskIncrementTick+0x158>)
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	601a      	str	r2, [r3, #0]
					break;
 8004de2:	e03e      	b.n	8004e62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de4:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <xTaskIncrementTick+0x14c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d203      	bcs.n	8004e04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <xTaskIncrementTick+0x158>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e02:	e02e      	b.n	8004e62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff f889 	bl	8003f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3318      	adds	r3, #24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff f880 	bl	8003f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	2201      	movs	r2, #1
 8004e26:	409a      	lsls	r2, r3
 8004e28:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <xTaskIncrementTick+0x15c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <xTaskIncrementTick+0x15c>)
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <xTaskIncrementTick+0x160>)
 8004e40:	441a      	add	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7ff f80c 	bl	8003e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <xTaskIncrementTick+0x164>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d3b9      	bcc.n	8004dd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e60:	e7b6      	b.n	8004dd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e62:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <xTaskIncrementTick+0x164>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4914      	ldr	r1, [pc, #80]	; (8004ebc <xTaskIncrementTick+0x160>)
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d901      	bls.n	8004e7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <xTaskIncrementTick+0x168>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e86:	2301      	movs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e004      	b.n	8004e96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <xTaskIncrementTick+0x16c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <xTaskIncrementTick+0x16c>)
 8004e94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e96:	697b      	ldr	r3, [r7, #20]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200009d0 	.word	0x200009d0
 8004ea4:	200009ac 	.word	0x200009ac
 8004ea8:	20000960 	.word	0x20000960
 8004eac:	20000964 	.word	0x20000964
 8004eb0:	200009c0 	.word	0x200009c0
 8004eb4:	200009c8 	.word	0x200009c8
 8004eb8:	200009b0 	.word	0x200009b0
 8004ebc:	200008ac 	.word	0x200008ac
 8004ec0:	200008a8 	.word	0x200008a8
 8004ec4:	200009bc 	.word	0x200009bc
 8004ec8:	200009b8 	.word	0x200009b8

08004ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ed2:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <vTaskSwitchContext+0xac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <vTaskSwitchContext+0xb0>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ee0:	e044      	b.n	8004f6c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <vTaskSwitchContext+0xb0>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <vTaskSwitchContext+0xb4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	f1c3 031f 	rsb	r3, r3, #31
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	4921      	ldr	r1, [pc, #132]	; (8004f84 <vTaskSwitchContext+0xb8>)
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	607b      	str	r3, [r7, #4]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <vTaskSwitchContext+0x5a>
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <vTaskSwitchContext+0xb8>)
 8004f34:	4413      	add	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3308      	adds	r3, #8
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d104      	bne.n	8004f58 <vTaskSwitchContext+0x8c>
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <vTaskSwitchContext+0xbc>)
 8004f60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <vTaskSwitchContext+0xbc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	334c      	adds	r3, #76	; 0x4c
 8004f68:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <vTaskSwitchContext+0xc0>)
 8004f6a:	6013      	str	r3, [r2, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	200009d0 	.word	0x200009d0
 8004f7c:	200009bc 	.word	0x200009bc
 8004f80:	200009b0 	.word	0x200009b0
 8004f84:	200008ac 	.word	0x200008ac
 8004f88:	200008a8 	.word	0x200008a8
 8004f8c:	20000048 	.word	0x20000048

08004f90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <vTaskPlaceOnEventList+0x44>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3318      	adds	r3, #24
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fe ff75 	bl	8003eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	6838      	ldr	r0, [r7, #0]
 8004fc8:	f000 fa4c 	bl	8005464 <prvAddCurrentTaskToDelayedList>
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	200008a8 	.word	0x200008a8

08004fd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	3318      	adds	r3, #24
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe ff89 	bl	8003f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500e:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <xTaskRemoveFromEventList+0xac>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d11c      	bne.n	8005050 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3304      	adds	r3, #4
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe ff80 	bl	8003f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	2201      	movs	r2, #1
 8005026:	409a      	lsls	r2, r3
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <xTaskRemoveFromEventList+0xb0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	4a16      	ldr	r2, [pc, #88]	; (8005088 <xTaskRemoveFromEventList+0xb0>)
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4a13      	ldr	r2, [pc, #76]	; (800508c <xTaskRemoveFromEventList+0xb4>)
 8005040:	441a      	add	r2, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3304      	adds	r3, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7fe ff0c 	bl	8003e66 <vListInsertEnd>
 800504e:	e005      	b.n	800505c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3318      	adds	r3, #24
 8005054:	4619      	mov	r1, r3
 8005056:	480e      	ldr	r0, [pc, #56]	; (8005090 <xTaskRemoveFromEventList+0xb8>)
 8005058:	f7fe ff05 	bl	8003e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <xTaskRemoveFromEventList+0xbc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	429a      	cmp	r2, r3
 8005068:	d905      	bls.n	8005076 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800506a:	2301      	movs	r3, #1
 800506c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <xTaskRemoveFromEventList+0xc0>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e001      	b.n	800507a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800507a:	697b      	ldr	r3, [r7, #20]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	200009d0 	.word	0x200009d0
 8005088:	200009b0 	.word	0x200009b0
 800508c:	200008ac 	.word	0x200008ac
 8005090:	20000968 	.word	0x20000968
 8005094:	200008a8 	.word	0x200008a8
 8005098:	200009bc 	.word	0x200009bc

0800509c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <vTaskInternalSetTimeOutState+0x24>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <vTaskInternalSetTimeOutState+0x28>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	605a      	str	r2, [r3, #4]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	200009c0 	.word	0x200009c0
 80050c4:	200009ac 	.word	0x200009ac

080050c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	613b      	str	r3, [r7, #16]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60fb      	str	r3, [r7, #12]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800510a:	f000 fb3b 	bl	8005784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <xTaskCheckForTimeOut+0xbc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d102      	bne.n	800512e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e023      	b.n	8005176 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <xTaskCheckForTimeOut+0xc0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d007      	beq.n	800514a <xTaskCheckForTimeOut+0x82>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e015      	b.n	8005176 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	429a      	cmp	r2, r3
 8005152:	d20b      	bcs.n	800516c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff9b 	bl	800509c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	e004      	b.n	8005176 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005172:	2301      	movs	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005176:	f000 fb35 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 800517a:	69fb      	ldr	r3, [r7, #28]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	200009ac 	.word	0x200009ac
 8005188:	200009c0 	.word	0x200009c0

0800518c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <vTaskMissedYield+0x14>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	200009bc 	.word	0x200009bc

080051a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051ac:	f000 f852 	bl	8005254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <prvIdleTask+0x28>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d9f9      	bls.n	80051ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <prvIdleTask+0x2c>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051c8:	e7f0      	b.n	80051ac <prvIdleTask+0x8>
 80051ca:	bf00      	nop
 80051cc:	200008ac 	.word	0x200008ac
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051da:	2300      	movs	r3, #0
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	e00c      	b.n	80051fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <prvInitialiseTaskLists+0x60>)
 80051ec:	4413      	add	r3, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fe0c 	bl	8003e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3301      	adds	r3, #1
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d9ef      	bls.n	80051e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005200:	480d      	ldr	r0, [pc, #52]	; (8005238 <prvInitialiseTaskLists+0x64>)
 8005202:	f7fe fe03 	bl	8003e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005206:	480d      	ldr	r0, [pc, #52]	; (800523c <prvInitialiseTaskLists+0x68>)
 8005208:	f7fe fe00 	bl	8003e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800520c:	480c      	ldr	r0, [pc, #48]	; (8005240 <prvInitialiseTaskLists+0x6c>)
 800520e:	f7fe fdfd 	bl	8003e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005212:	480c      	ldr	r0, [pc, #48]	; (8005244 <prvInitialiseTaskLists+0x70>)
 8005214:	f7fe fdfa 	bl	8003e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005218:	480b      	ldr	r0, [pc, #44]	; (8005248 <prvInitialiseTaskLists+0x74>)
 800521a:	f7fe fdf7 	bl	8003e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <prvInitialiseTaskLists+0x78>)
 8005220:	4a05      	ldr	r2, [pc, #20]	; (8005238 <prvInitialiseTaskLists+0x64>)
 8005222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <prvInitialiseTaskLists+0x7c>)
 8005226:	4a05      	ldr	r2, [pc, #20]	; (800523c <prvInitialiseTaskLists+0x68>)
 8005228:	601a      	str	r2, [r3, #0]
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200008ac 	.word	0x200008ac
 8005238:	20000938 	.word	0x20000938
 800523c:	2000094c 	.word	0x2000094c
 8005240:	20000968 	.word	0x20000968
 8005244:	2000097c 	.word	0x2000097c
 8005248:	20000994 	.word	0x20000994
 800524c:	20000960 	.word	0x20000960
 8005250:	20000964 	.word	0x20000964

08005254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800525a:	e019      	b.n	8005290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800525c:	f000 fa92 	bl	8005784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005260:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <prvCheckTasksWaitingTermination+0x50>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe fe57 	bl	8003f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <prvCheckTasksWaitingTermination+0x54>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	4a0b      	ldr	r2, [pc, #44]	; (80052a8 <prvCheckTasksWaitingTermination+0x54>)
 800527a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <prvCheckTasksWaitingTermination+0x58>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <prvCheckTasksWaitingTermination+0x58>)
 8005284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005286:	f000 faad 	bl	80057e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f810 	bl	80052b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <prvCheckTasksWaitingTermination+0x58>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e1      	bne.n	800525c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	2000097c 	.word	0x2000097c
 80052a8:	200009a8 	.word	0x200009a8
 80052ac:	20000990 	.word	0x20000990

080052b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	334c      	adds	r3, #76	; 0x4c
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 f8a1 	bl	8006404 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fc0a 	bl	8005ae0 <vPortFree>
			vPortFree( pxTCB );
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fc07 	bl	8005ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <prvResetNextTaskUnblockTime+0x38>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <prvResetNextTaskUnblockTime+0x3c>)
 80052ee:	f04f 32ff 	mov.w	r2, #4294967295
 80052f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052f4:	e008      	b.n	8005308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <prvResetNextTaskUnblockTime+0x38>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <prvResetNextTaskUnblockTime+0x3c>)
 8005306:	6013      	str	r3, [r2, #0]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	20000960 	.word	0x20000960
 8005318:	200009c8 	.word	0x200009c8

0800531c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <xTaskGetSchedulerState+0x34>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800532a:	2301      	movs	r3, #1
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	e008      	b.n	8005342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005330:	4b08      	ldr	r3, [pc, #32]	; (8005354 <xTaskGetSchedulerState+0x38>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005338:	2302      	movs	r3, #2
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e001      	b.n	8005342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005342:	687b      	ldr	r3, [r7, #4]
	}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	200009b4 	.word	0x200009b4
 8005354:	200009d0 	.word	0x200009d0

08005358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d06e      	beq.n	800544c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <xTaskPriorityDisinherit+0x100>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d00a      	beq.n	800538e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	60fb      	str	r3, [r7, #12]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60bb      	str	r3, [r7, #8]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	1e5a      	subs	r2, r3, #1
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	429a      	cmp	r2, r3
 80053c0:	d044      	beq.n	800544c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d140      	bne.n	800544c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fda6 	bl	8003f20 <uxListRemove>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d115      	bne.n	8005406 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	491f      	ldr	r1, [pc, #124]	; (800545c <xTaskPriorityDisinherit+0x104>)
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <xTaskPriorityDisinherit+0xae>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	2201      	movs	r2, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43da      	mvns	r2, r3
 80053fc:	4b18      	ldr	r3, [pc, #96]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4013      	ands	r3, r2
 8005402:	4a17      	ldr	r2, [pc, #92]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 8005404:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f1c3 0207 	rsb	r2, r3, #7
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	2201      	movs	r2, #1
 8005420:	409a      	lsls	r2, r3
 8005422:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4313      	orrs	r3, r2
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <xTaskPriorityDisinherit+0x108>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <xTaskPriorityDisinherit+0x104>)
 800543a:	441a      	add	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fd0f 	bl	8003e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800544c:	697b      	ldr	r3, [r7, #20]
	}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	200008a8 	.word	0x200008a8
 800545c:	200008ac 	.word	0x200008ac
 8005460:	200009b0 	.word	0x200009b0

08005464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800546e:	4b29      	ldr	r3, [pc, #164]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005474:	4b28      	ldr	r3, [pc, #160]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3304      	adds	r3, #4
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe fd50 	bl	8003f20 <uxListRemove>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005486:	4b24      	ldr	r3, [pc, #144]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	2201      	movs	r2, #1
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43da      	mvns	r2, r3
 8005494:	4b21      	ldr	r3, [pc, #132]	; (800551c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4013      	ands	r3, r2
 800549a:	4a20      	ldr	r2, [pc, #128]	; (800551c <prvAddCurrentTaskToDelayedList+0xb8>)
 800549c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d10a      	bne.n	80054bc <prvAddCurrentTaskToDelayedList+0x58>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ac:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	481a      	ldr	r0, [pc, #104]	; (8005520 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054b6:	f7fe fcd6 	bl	8003e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054ba:	e026      	b.n	800550a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d209      	bcs.n	80054e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f7fe fce4 	bl	8003eae <vListInsert>
}
 80054e6:	e010      	b.n	800550a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f7fe fcda 	bl	8003eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <prvAddCurrentTaskToDelayedList+0xc8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	d202      	bcs.n	800550a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005504:	4a09      	ldr	r2, [pc, #36]	; (800552c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	6013      	str	r3, [r2, #0]
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200009ac 	.word	0x200009ac
 8005518:	200008a8 	.word	0x200008a8
 800551c:	200009b0 	.word	0x200009b0
 8005520:	20000994 	.word	0x20000994
 8005524:	20000964 	.word	0x20000964
 8005528:	20000960 	.word	0x20000960
 800552c:	200009c8 	.word	0x200009c8

08005530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3b04      	subs	r3, #4
 8005540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3b04      	subs	r3, #4
 800554e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3b04      	subs	r3, #4
 800555e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005560:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <pxPortInitialiseStack+0x64>)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3b14      	subs	r3, #20
 800556a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3b04      	subs	r3, #4
 8005576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f06f 0202 	mvn.w	r2, #2
 800557e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b20      	subs	r3, #32
 8005584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	08005599 	.word	0x08005599

08005598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <prvTaskExitError+0x54>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d00a      	beq.n	80055c2 <prvTaskExitError+0x2a>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60fb      	str	r3, [r7, #12]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <prvTaskExitError+0x28>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60bb      	str	r3, [r7, #8]
}
 80055d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055d6:	bf00      	nop
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0fc      	beq.n	80055d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20000044 	.word	0x20000044

080055f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <pxCurrentTCBConst2>)
 80055f2:	6819      	ldr	r1, [r3, #0]
 80055f4:	6808      	ldr	r0, [r1, #0]
 80055f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fa:	f380 8809 	msr	PSP, r0
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f380 8811 	msr	BASEPRI, r0
 800560a:	4770      	bx	lr
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst2>:
 8005610:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005618:	4808      	ldr	r0, [pc, #32]	; (800563c <prvPortStartFirstTask+0x24>)
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	6800      	ldr	r0, [r0, #0]
 800561e:	f380 8808 	msr	MSP, r0
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8814 	msr	CONTROL, r0
 800562a:	b662      	cpsie	i
 800562c:	b661      	cpsie	f
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	df00      	svc	0
 8005638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800563a:	bf00      	nop
 800563c:	e000ed08 	.word	0xe000ed08

08005640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005646:	4b46      	ldr	r3, [pc, #280]	; (8005760 <xPortStartScheduler+0x120>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a46      	ldr	r2, [pc, #280]	; (8005764 <xPortStartScheduler+0x124>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10a      	bne.n	8005666 <xPortStartScheduler+0x26>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	613b      	str	r3, [r7, #16]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005666:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <xPortStartScheduler+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a3f      	ldr	r2, [pc, #252]	; (8005768 <xPortStartScheduler+0x128>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10a      	bne.n	8005686 <xPortStartScheduler+0x46>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <xPortStartScheduler+0x12c>)
 8005688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b31      	ldr	r3, [pc, #196]	; (8005770 <xPortStartScheduler+0x130>)
 80056ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ae:	4b31      	ldr	r3, [pc, #196]	; (8005774 <xPortStartScheduler+0x134>)
 80056b0:	2207      	movs	r2, #7
 80056b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056b4:	e009      	b.n	80056ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <xPortStartScheduler+0x134>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <xPortStartScheduler+0x134>)
 80056be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d0ef      	beq.n	80056b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056d6:	4b27      	ldr	r3, [pc, #156]	; (8005774 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1c3 0307 	rsb	r3, r3, #7
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d00a      	beq.n	80056f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <xPortStartScheduler+0x134>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <xPortStartScheduler+0x134>)
 8005700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <xPortStartScheduler+0x134>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <xPortStartScheduler+0x134>)
 800570c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005716:	4b18      	ldr	r3, [pc, #96]	; (8005778 <xPortStartScheduler+0x138>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a17      	ldr	r2, [pc, #92]	; (8005778 <xPortStartScheduler+0x138>)
 800571c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <xPortStartScheduler+0x138>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a14      	ldr	r2, [pc, #80]	; (8005778 <xPortStartScheduler+0x138>)
 8005728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800572c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800572e:	f000 f8dd 	bl	80058ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <xPortStartScheduler+0x13c>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005738:	f000 f8fc 	bl	8005934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <xPortStartScheduler+0x140>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <xPortStartScheduler+0x140>)
 8005742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005748:	f7ff ff66 	bl	8005618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800574c:	f7ff fbbe 	bl	8004ecc <vTaskSwitchContext>
	prvTaskExitError();
 8005750:	f7ff ff22 	bl	8005598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	e000ed00 	.word	0xe000ed00
 8005764:	410fc271 	.word	0x410fc271
 8005768:	410fc270 	.word	0x410fc270
 800576c:	e000e400 	.word	0xe000e400
 8005770:	200009d4 	.word	0x200009d4
 8005774:	200009d8 	.word	0x200009d8
 8005778:	e000ed20 	.word	0xe000ed20
 800577c:	20000044 	.word	0x20000044
 8005780:	e000ef34 	.word	0xe000ef34

08005784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	607b      	str	r3, [r7, #4]
}
 800579c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <vPortEnterCritical+0x58>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <vPortEnterCritical+0x58>)
 80057a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <vPortEnterCritical+0x58>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10f      	bne.n	80057d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <vPortEnterCritical+0x5c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	603b      	str	r3, [r7, #0]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <vPortEnterCritical+0x4a>
	}
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000044 	.word	0x20000044
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <vPortExitCritical+0x50>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <vPortExitCritical+0x24>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	607b      	str	r3, [r7, #4]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <vPortExitCritical+0x50>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3b01      	subs	r3, #1
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <vPortExitCritical+0x50>)
 8005810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005812:	4b08      	ldr	r3, [pc, #32]	; (8005834 <vPortExitCritical+0x50>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <vPortExitCritical+0x42>
 800581a:	2300      	movs	r3, #0
 800581c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000044 	.word	0x20000044
	...

08005840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005840:	f3ef 8009 	mrs	r0, PSP
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <pxCurrentTCBConst>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	f01e 0f10 	tst.w	lr, #16
 8005850:	bf08      	it	eq
 8005852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585a:	6010      	str	r0, [r2, #0]
 800585c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005864:	f380 8811 	msr	BASEPRI, r0
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f7ff fb2c 	bl	8004ecc <vTaskSwitchContext>
 8005874:	f04f 0000 	mov.w	r0, #0
 8005878:	f380 8811 	msr	BASEPRI, r0
 800587c:	bc09      	pop	{r0, r3}
 800587e:	6819      	ldr	r1, [r3, #0]
 8005880:	6808      	ldr	r0, [r1, #0]
 8005882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005886:	f01e 0f10 	tst.w	lr, #16
 800588a:	bf08      	it	eq
 800588c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005890:	f380 8809 	msr	PSP, r0
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst>:
 80058a0:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	607b      	str	r3, [r7, #4]
}
 80058c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058c2:	f7ff fa4b 	bl	8004d5c <xTaskIncrementTick>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <SysTick_Handler+0x40>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	2300      	movs	r3, #0
 80058d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f383 8811 	msr	BASEPRI, r3
}
 80058de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <vPortSetupTimerInterrupt+0x34>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <vPortSetupTimerInterrupt+0x38>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <vPortSetupTimerInterrupt+0x3c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0a      	ldr	r2, [pc, #40]	; (800592c <vPortSetupTimerInterrupt+0x40>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	099b      	lsrs	r3, r3, #6
 8005908:	4a09      	ldr	r2, [pc, #36]	; (8005930 <vPortSetupTimerInterrupt+0x44>)
 800590a:	3b01      	subs	r3, #1
 800590c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <vPortSetupTimerInterrupt+0x34>)
 8005910:	2207      	movs	r2, #7
 8005912:	601a      	str	r2, [r3, #0]
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	e000e010 	.word	0xe000e010
 8005924:	e000e018 	.word	0xe000e018
 8005928:	20000038 	.word	0x20000038
 800592c:	10624dd3 	.word	0x10624dd3
 8005930:	e000e014 	.word	0xe000e014

08005934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005944 <vPortEnableVFP+0x10>
 8005938:	6801      	ldr	r1, [r0, #0]
 800593a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800593e:	6001      	str	r1, [r0, #0]
 8005940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005942:	bf00      	nop
 8005944:	e000ed88 	.word	0xe000ed88

08005948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	; 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005954:	f7ff f924 	bl	8004ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005958:	4b5b      	ldr	r3, [pc, #364]	; (8005ac8 <pvPortMalloc+0x180>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005960:	f000 f920 	bl	8005ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005964:	4b59      	ldr	r3, [pc, #356]	; (8005acc <pvPortMalloc+0x184>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 8093 	bne.w	8005a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01d      	beq.n	80059b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005978:	2208      	movs	r2, #8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	2b00      	cmp	r3, #0
 8005988:	d014      	beq.n	80059b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f023 0307 	bic.w	r3, r3, #7
 8005990:	3308      	adds	r3, #8
 8005992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <pvPortMalloc+0x6c>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	617b      	str	r3, [r7, #20]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d06e      	beq.n	8005a98 <pvPortMalloc+0x150>
 80059ba:	4b45      	ldr	r3, [pc, #276]	; (8005ad0 <pvPortMalloc+0x188>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d869      	bhi.n	8005a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059c4:	4b43      	ldr	r3, [pc, #268]	; (8005ad4 <pvPortMalloc+0x18c>)
 80059c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059c8:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <pvPortMalloc+0x18c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ce:	e004      	b.n	80059da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d903      	bls.n	80059ec <pvPortMalloc+0xa4>
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f1      	bne.n	80059d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059ec:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <pvPortMalloc+0x180>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d050      	beq.n	8005a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2208      	movs	r2, #8
 80059fc:	4413      	add	r3, r2
 80059fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	2308      	movs	r3, #8
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d91f      	bls.n	8005a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <pvPortMalloc+0xf8>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	613b      	str	r3, [r7, #16]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a52:	69b8      	ldr	r0, [r7, #24]
 8005a54:	f000 f908 	bl	8005c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <pvPortMalloc+0x190>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d203      	bcs.n	8005a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a72:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <pvPortMalloc+0x190>)
 8005a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <pvPortMalloc+0x184>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <pvPortMalloc+0x194>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a11      	ldr	r2, [pc, #68]	; (8005adc <pvPortMalloc+0x194>)
 8005a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a98:	f7ff f890 	bl	8004bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <pvPortMalloc+0x174>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60fb      	str	r3, [r7, #12]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <pvPortMalloc+0x172>
	return pvReturn;
 8005abc:	69fb      	ldr	r3, [r7, #28]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200045e4 	.word	0x200045e4
 8005acc:	200045f8 	.word	0x200045f8
 8005ad0:	200045e8 	.word	0x200045e8
 8005ad4:	200045dc 	.word	0x200045dc
 8005ad8:	200045ec 	.word	0x200045ec
 8005adc:	200045f0 	.word	0x200045f0

08005ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d04d      	beq.n	8005b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005af2:	2308      	movs	r3, #8
 8005af4:	425b      	negs	r3, r3
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4413      	add	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <vPortFree+0xb8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <vPortFree+0x44>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	60fb      	str	r3, [r7, #12]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <vPortFree+0x62>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60bb      	str	r3, [r7, #8]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <vPortFree+0xb8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01e      	beq.n	8005b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11a      	bne.n	8005b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <vPortFree+0xb8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b68:	f7ff f81a 	bl	8004ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <vPortFree+0xbc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4413      	add	r3, r2
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <vPortFree+0xbc>)
 8005b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b7a:	6938      	ldr	r0, [r7, #16]
 8005b7c:	f000 f874 	bl	8005c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <vPortFree+0xc0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <vPortFree+0xc0>)
 8005b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b8a:	f7ff f817 	bl	8004bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b8e:	bf00      	nop
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200045f8 	.word	0x200045f8
 8005b9c:	200045e8 	.word	0x200045e8
 8005ba0:	200045f4 	.word	0x200045f4

08005ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <prvHeapInit+0xac>)
 8005bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3307      	adds	r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0307 	bic.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <prvHeapInit+0xac>)
 8005bd4:	4413      	add	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <prvHeapInit+0xb0>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005be2:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <prvHeapInit+0xb0>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4413      	add	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0307 	bic.w	r3, r3, #7
 8005bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <prvHeapInit+0xb4>)
 8005c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c06:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <prvHeapInit+0xb4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <prvHeapInit+0xb4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c24:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <prvHeapInit+0xb4>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <prvHeapInit+0xb8>)
 8005c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <prvHeapInit+0xbc>)
 8005c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <prvHeapInit+0xc0>)
 8005c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c42:	601a      	str	r2, [r3, #0]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	200009dc 	.word	0x200009dc
 8005c54:	200045dc 	.word	0x200045dc
 8005c58:	200045e4 	.word	0x200045e4
 8005c5c:	200045ec 	.word	0x200045ec
 8005c60:	200045e8 	.word	0x200045e8
 8005c64:	200045f8 	.word	0x200045f8

08005c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <prvInsertBlockIntoFreeList+0xac>)
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e002      	b.n	8005c7c <prvInsertBlockIntoFreeList+0x14>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d8f7      	bhi.n	8005c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	4413      	add	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d108      	bne.n	8005caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d118      	bne.n	8005cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <prvInsertBlockIntoFreeList+0xb0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d00d      	beq.n	8005ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	441a      	add	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e008      	b.n	8005cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e003      	b.n	8005cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d002      	beq.n	8005d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	200045dc 	.word	0x200045dc
 8005d18:	200045e4 	.word	0x200045e4

08005d1c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8005d24:	1d39      	adds	r1, r7, #4
 8005d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4803      	ldr	r0, [pc, #12]	; (8005d3c <__io_putchar+0x20>)
 8005d2e:	f7fd f99c 	bl	800306a <HAL_UART_Transmit>

	return ch;
 8005d32:	687b      	ldr	r3, [r7, #4]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	200002fc 	.word	0x200002fc

08005d40 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 8005d48:	f7ff fd1c 	bl	8005784 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4807      	ldr	r0, [pc, #28]	; (8005d6c <vPrintString+0x2c>)
 8005d50:	f000 fb32 	bl	80063b8 <iprintf>
		fflush( stdout );
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <vPrintString+0x30>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f906 	bl	8005f6c <fflush>
	}
	taskEXIT_CRITICAL();
 8005d60:	f7ff fd40 	bl	80057e4 <vPortExitCritical>
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08006fec 	.word	0x08006fec
 8005d70:	20000048 	.word	0x20000048

08005d74 <vPrintStringAndNumber>:
/*-----------------------------------------------------------*/

void vPrintStringAndNumber( const char *pcString, uint32_t ulValue )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 8005d7e:	f7ff fd01 	bl	8005784 <vPortEnterCritical>
	{
		printf( "%s %lu\r\n", pcString, ulValue );
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4807      	ldr	r0, [pc, #28]	; (8005da4 <vPrintStringAndNumber+0x30>)
 8005d88:	f000 fb16 	bl	80063b8 <iprintf>
		fflush( stdout );
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <vPrintStringAndNumber+0x34>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f8ea 	bl	8005f6c <fflush>
	}
	taskEXIT_CRITICAL();
 8005d98:	f7ff fd24 	bl	80057e4 <vPortExitCritical>
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	08006ff0 	.word	0x08006ff0
 8005da8:	20000048 	.word	0x20000048

08005dac <vPrintTwoStrings>:
/*-----------------------------------------------------------*/

void vPrintTwoStrings( const char *pcString1, const char *pcString2 )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	vTaskSuspendAll();
 8005db6:	f7fe fef3 	bl	8004ba0 <vTaskSuspendAll>
	{
		printf( "At time %lu: %s %s\r\n", xTaskGetTickCount(), pcString1, pcString2 );
 8005dba:	f7fe ff9b 	bl	8004cf4 <xTaskGetTickCount>
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4804      	ldr	r0, [pc, #16]	; (8005dd8 <vPrintTwoStrings+0x2c>)
 8005dc6:	f000 faf7 	bl	80063b8 <iprintf>
	}
	xTaskResumeAll();
 8005dca:	f7fe fef7 	bl	8004bbc <xTaskResumeAll>
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	08006ffc 	.word	0x08006ffc

08005ddc <__errno>:
 8005ddc:	4b01      	ldr	r3, [pc, #4]	; (8005de4 <__errno+0x8>)
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000048 	.word	0x20000048

08005de8 <__sflush_r>:
 8005de8:	898a      	ldrh	r2, [r1, #12]
 8005dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dee:	4605      	mov	r5, r0
 8005df0:	0710      	lsls	r0, r2, #28
 8005df2:	460c      	mov	r4, r1
 8005df4:	d458      	bmi.n	8005ea8 <__sflush_r+0xc0>
 8005df6:	684b      	ldr	r3, [r1, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	dc05      	bgt.n	8005e08 <__sflush_r+0x20>
 8005dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	dc02      	bgt.n	8005e08 <__sflush_r+0x20>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	d0f9      	beq.n	8005e02 <__sflush_r+0x1a>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e14:	682f      	ldr	r7, [r5, #0]
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	d032      	beq.n	8005e80 <__sflush_r+0x98>
 8005e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	075a      	lsls	r2, r3, #29
 8005e20:	d505      	bpl.n	8005e2e <__sflush_r+0x46>
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	1ac0      	subs	r0, r0, r3
 8005e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e28:	b10b      	cbz	r3, 8005e2e <__sflush_r+0x46>
 8005e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e2c:	1ac0      	subs	r0, r0, r3
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4602      	mov	r2, r0
 8005e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e34:	6a21      	ldr	r1, [r4, #32]
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b0      	blx	r6
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	d106      	bne.n	8005e4e <__sflush_r+0x66>
 8005e40:	6829      	ldr	r1, [r5, #0]
 8005e42:	291d      	cmp	r1, #29
 8005e44:	d82c      	bhi.n	8005ea0 <__sflush_r+0xb8>
 8005e46:	4a2a      	ldr	r2, [pc, #168]	; (8005ef0 <__sflush_r+0x108>)
 8005e48:	40ca      	lsrs	r2, r1
 8005e4a:	07d6      	lsls	r6, r2, #31
 8005e4c:	d528      	bpl.n	8005ea0 <__sflush_r+0xb8>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	6062      	str	r2, [r4, #4]
 8005e52:	04d9      	lsls	r1, r3, #19
 8005e54:	6922      	ldr	r2, [r4, #16]
 8005e56:	6022      	str	r2, [r4, #0]
 8005e58:	d504      	bpl.n	8005e64 <__sflush_r+0x7c>
 8005e5a:	1c42      	adds	r2, r0, #1
 8005e5c:	d101      	bne.n	8005e62 <__sflush_r+0x7a>
 8005e5e:	682b      	ldr	r3, [r5, #0]
 8005e60:	b903      	cbnz	r3, 8005e64 <__sflush_r+0x7c>
 8005e62:	6560      	str	r0, [r4, #84]	; 0x54
 8005e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e66:	602f      	str	r7, [r5, #0]
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	d0ca      	beq.n	8005e02 <__sflush_r+0x1a>
 8005e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e70:	4299      	cmp	r1, r3
 8005e72:	d002      	beq.n	8005e7a <__sflush_r+0x92>
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 f9bf 	bl	80061f8 <_free_r>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e7e:	e7c1      	b.n	8005e04 <__sflush_r+0x1c>
 8005e80:	6a21      	ldr	r1, [r4, #32]
 8005e82:	2301      	movs	r3, #1
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b0      	blx	r6
 8005e88:	1c41      	adds	r1, r0, #1
 8005e8a:	d1c7      	bne.n	8005e1c <__sflush_r+0x34>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0c4      	beq.n	8005e1c <__sflush_r+0x34>
 8005e92:	2b1d      	cmp	r3, #29
 8005e94:	d001      	beq.n	8005e9a <__sflush_r+0xb2>
 8005e96:	2b16      	cmp	r3, #22
 8005e98:	d101      	bne.n	8005e9e <__sflush_r+0xb6>
 8005e9a:	602f      	str	r7, [r5, #0]
 8005e9c:	e7b1      	b.n	8005e02 <__sflush_r+0x1a>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	e7ad      	b.n	8005e04 <__sflush_r+0x1c>
 8005ea8:	690f      	ldr	r7, [r1, #16]
 8005eaa:	2f00      	cmp	r7, #0
 8005eac:	d0a9      	beq.n	8005e02 <__sflush_r+0x1a>
 8005eae:	0793      	lsls	r3, r2, #30
 8005eb0:	680e      	ldr	r6, [r1, #0]
 8005eb2:	bf08      	it	eq
 8005eb4:	694b      	ldreq	r3, [r1, #20]
 8005eb6:	600f      	str	r7, [r1, #0]
 8005eb8:	bf18      	it	ne
 8005eba:	2300      	movne	r3, #0
 8005ebc:	eba6 0807 	sub.w	r8, r6, r7
 8005ec0:	608b      	str	r3, [r1, #8]
 8005ec2:	f1b8 0f00 	cmp.w	r8, #0
 8005ec6:	dd9c      	ble.n	8005e02 <__sflush_r+0x1a>
 8005ec8:	6a21      	ldr	r1, [r4, #32]
 8005eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ecc:	4643      	mov	r3, r8
 8005ece:	463a      	mov	r2, r7
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b0      	blx	r6
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	dc06      	bgt.n	8005ee6 <__sflush_r+0xfe>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ede:	81a3      	strh	r3, [r4, #12]
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	e78e      	b.n	8005e04 <__sflush_r+0x1c>
 8005ee6:	4407      	add	r7, r0
 8005ee8:	eba8 0800 	sub.w	r8, r8, r0
 8005eec:	e7e9      	b.n	8005ec2 <__sflush_r+0xda>
 8005eee:	bf00      	nop
 8005ef0:	20400001 	.word	0x20400001

08005ef4 <_fflush_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	690b      	ldr	r3, [r1, #16]
 8005ef8:	4605      	mov	r5, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	b913      	cbnz	r3, 8005f04 <_fflush_r+0x10>
 8005efe:	2500      	movs	r5, #0
 8005f00:	4628      	mov	r0, r5
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	b118      	cbz	r0, 8005f0e <_fflush_r+0x1a>
 8005f06:	6983      	ldr	r3, [r0, #24]
 8005f08:	b90b      	cbnz	r3, 8005f0e <_fflush_r+0x1a>
 8005f0a:	f000 f899 	bl	8006040 <__sinit>
 8005f0e:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <_fflush_r+0x6c>)
 8005f10:	429c      	cmp	r4, r3
 8005f12:	d11b      	bne.n	8005f4c <_fflush_r+0x58>
 8005f14:	686c      	ldr	r4, [r5, #4]
 8005f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0ef      	beq.n	8005efe <_fflush_r+0xa>
 8005f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f20:	07d0      	lsls	r0, r2, #31
 8005f22:	d404      	bmi.n	8005f2e <_fflush_r+0x3a>
 8005f24:	0599      	lsls	r1, r3, #22
 8005f26:	d402      	bmi.n	8005f2e <_fflush_r+0x3a>
 8005f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f2a:	f000 f94c 	bl	80061c6 <__retarget_lock_acquire_recursive>
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4621      	mov	r1, r4
 8005f32:	f7ff ff59 	bl	8005de8 <__sflush_r>
 8005f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f38:	07da      	lsls	r2, r3, #31
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	d4e0      	bmi.n	8005f00 <_fflush_r+0xc>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	059b      	lsls	r3, r3, #22
 8005f42:	d4dd      	bmi.n	8005f00 <_fflush_r+0xc>
 8005f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f46:	f000 f93f 	bl	80061c8 <__retarget_lock_release_recursive>
 8005f4a:	e7d9      	b.n	8005f00 <_fflush_r+0xc>
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <_fflush_r+0x70>)
 8005f4e:	429c      	cmp	r4, r3
 8005f50:	d101      	bne.n	8005f56 <_fflush_r+0x62>
 8005f52:	68ac      	ldr	r4, [r5, #8]
 8005f54:	e7df      	b.n	8005f16 <_fflush_r+0x22>
 8005f56:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <_fflush_r+0x74>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	bf08      	it	eq
 8005f5c:	68ec      	ldreq	r4, [r5, #12]
 8005f5e:	e7da      	b.n	8005f16 <_fflush_r+0x22>
 8005f60:	0800704c 	.word	0x0800704c
 8005f64:	0800706c 	.word	0x0800706c
 8005f68:	0800702c 	.word	0x0800702c

08005f6c <fflush>:
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	b920      	cbnz	r0, 8005f7a <fflush+0xe>
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <fflush+0x18>)
 8005f72:	4905      	ldr	r1, [pc, #20]	; (8005f88 <fflush+0x1c>)
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	f000 b8e1 	b.w	800613c <_fwalk_reent>
 8005f7a:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <fflush+0x20>)
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	f7ff bfb9 	b.w	8005ef4 <_fflush_r>
 8005f82:	bf00      	nop
 8005f84:	0800708c 	.word	0x0800708c
 8005f88:	08005ef5 	.word	0x08005ef5
 8005f8c:	20000048 	.word	0x20000048

08005f90 <std>:
 8005f90:	2300      	movs	r3, #0
 8005f92:	b510      	push	{r4, lr}
 8005f94:	4604      	mov	r4, r0
 8005f96:	e9c0 3300 	strd	r3, r3, [r0]
 8005f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f9e:	6083      	str	r3, [r0, #8]
 8005fa0:	8181      	strh	r1, [r0, #12]
 8005fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8005fa4:	81c2      	strh	r2, [r0, #14]
 8005fa6:	6183      	str	r3, [r0, #24]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	2208      	movs	r2, #8
 8005fac:	305c      	adds	r0, #92	; 0x5c
 8005fae:	f000 f91a 	bl	80061e6 <memset>
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <std+0x38>)
 8005fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8005fb6:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <std+0x3c>)
 8005fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <std+0x40>)
 8005fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <std+0x44>)
 8005fc0:	6224      	str	r4, [r4, #32]
 8005fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8005fc4:	bd10      	pop	{r4, pc}
 8005fc6:	bf00      	nop
 8005fc8:	080064dd 	.word	0x080064dd
 8005fcc:	080064ff 	.word	0x080064ff
 8005fd0:	08006537 	.word	0x08006537
 8005fd4:	0800655b 	.word	0x0800655b

08005fd8 <_cleanup_r>:
 8005fd8:	4901      	ldr	r1, [pc, #4]	; (8005fe0 <_cleanup_r+0x8>)
 8005fda:	f000 b8af 	b.w	800613c <_fwalk_reent>
 8005fde:	bf00      	nop
 8005fe0:	08005ef5 	.word	0x08005ef5

08005fe4 <__sfmoreglue>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	2268      	movs	r2, #104	; 0x68
 8005fe8:	1e4d      	subs	r5, r1, #1
 8005fea:	4355      	muls	r5, r2
 8005fec:	460e      	mov	r6, r1
 8005fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ff2:	f000 f96d 	bl	80062d0 <_malloc_r>
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	b140      	cbz	r0, 800600c <__sfmoreglue+0x28>
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	e9c0 1600 	strd	r1, r6, [r0]
 8006000:	300c      	adds	r0, #12
 8006002:	60a0      	str	r0, [r4, #8]
 8006004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006008:	f000 f8ed 	bl	80061e6 <memset>
 800600c:	4620      	mov	r0, r4
 800600e:	bd70      	pop	{r4, r5, r6, pc}

08006010 <__sfp_lock_acquire>:
 8006010:	4801      	ldr	r0, [pc, #4]	; (8006018 <__sfp_lock_acquire+0x8>)
 8006012:	f000 b8d8 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 8006016:	bf00      	nop
 8006018:	200045fd 	.word	0x200045fd

0800601c <__sfp_lock_release>:
 800601c:	4801      	ldr	r0, [pc, #4]	; (8006024 <__sfp_lock_release+0x8>)
 800601e:	f000 b8d3 	b.w	80061c8 <__retarget_lock_release_recursive>
 8006022:	bf00      	nop
 8006024:	200045fd 	.word	0x200045fd

08006028 <__sinit_lock_acquire>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__sinit_lock_acquire+0x8>)
 800602a:	f000 b8cc 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	200045fe 	.word	0x200045fe

08006034 <__sinit_lock_release>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__sinit_lock_release+0x8>)
 8006036:	f000 b8c7 	b.w	80061c8 <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	200045fe 	.word	0x200045fe

08006040 <__sinit>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	f7ff fff0 	bl	8006028 <__sinit_lock_acquire>
 8006048:	69a3      	ldr	r3, [r4, #24]
 800604a:	b11b      	cbz	r3, 8006054 <__sinit+0x14>
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	f7ff bff0 	b.w	8006034 <__sinit_lock_release>
 8006054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006058:	6523      	str	r3, [r4, #80]	; 0x50
 800605a:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <__sinit+0x68>)
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <__sinit+0x6c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	62a2      	str	r2, [r4, #40]	; 0x28
 8006062:	42a3      	cmp	r3, r4
 8006064:	bf04      	itt	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	61a3      	streq	r3, [r4, #24]
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f820 	bl	80060b0 <__sfp>
 8006070:	6060      	str	r0, [r4, #4]
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f81c 	bl	80060b0 <__sfp>
 8006078:	60a0      	str	r0, [r4, #8]
 800607a:	4620      	mov	r0, r4
 800607c:	f000 f818 	bl	80060b0 <__sfp>
 8006080:	2200      	movs	r2, #0
 8006082:	60e0      	str	r0, [r4, #12]
 8006084:	2104      	movs	r1, #4
 8006086:	6860      	ldr	r0, [r4, #4]
 8006088:	f7ff ff82 	bl	8005f90 <std>
 800608c:	68a0      	ldr	r0, [r4, #8]
 800608e:	2201      	movs	r2, #1
 8006090:	2109      	movs	r1, #9
 8006092:	f7ff ff7d 	bl	8005f90 <std>
 8006096:	68e0      	ldr	r0, [r4, #12]
 8006098:	2202      	movs	r2, #2
 800609a:	2112      	movs	r1, #18
 800609c:	f7ff ff78 	bl	8005f90 <std>
 80060a0:	2301      	movs	r3, #1
 80060a2:	61a3      	str	r3, [r4, #24]
 80060a4:	e7d2      	b.n	800604c <__sinit+0xc>
 80060a6:	bf00      	nop
 80060a8:	0800708c 	.word	0x0800708c
 80060ac:	08005fd9 	.word	0x08005fd9

080060b0 <__sfp>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	4607      	mov	r7, r0
 80060b4:	f7ff ffac 	bl	8006010 <__sfp_lock_acquire>
 80060b8:	4b1e      	ldr	r3, [pc, #120]	; (8006134 <__sfp+0x84>)
 80060ba:	681e      	ldr	r6, [r3, #0]
 80060bc:	69b3      	ldr	r3, [r6, #24]
 80060be:	b913      	cbnz	r3, 80060c6 <__sfp+0x16>
 80060c0:	4630      	mov	r0, r6
 80060c2:	f7ff ffbd 	bl	8006040 <__sinit>
 80060c6:	3648      	adds	r6, #72	; 0x48
 80060c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	d503      	bpl.n	80060d8 <__sfp+0x28>
 80060d0:	6833      	ldr	r3, [r6, #0]
 80060d2:	b30b      	cbz	r3, 8006118 <__sfp+0x68>
 80060d4:	6836      	ldr	r6, [r6, #0]
 80060d6:	e7f7      	b.n	80060c8 <__sfp+0x18>
 80060d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060dc:	b9d5      	cbnz	r5, 8006114 <__sfp+0x64>
 80060de:	4b16      	ldr	r3, [pc, #88]	; (8006138 <__sfp+0x88>)
 80060e0:	60e3      	str	r3, [r4, #12]
 80060e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060e6:	6665      	str	r5, [r4, #100]	; 0x64
 80060e8:	f000 f86c 	bl	80061c4 <__retarget_lock_init_recursive>
 80060ec:	f7ff ff96 	bl	800601c <__sfp_lock_release>
 80060f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060f8:	6025      	str	r5, [r4, #0]
 80060fa:	61a5      	str	r5, [r4, #24]
 80060fc:	2208      	movs	r2, #8
 80060fe:	4629      	mov	r1, r5
 8006100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006104:	f000 f86f 	bl	80061e6 <memset>
 8006108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800610c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006110:	4620      	mov	r0, r4
 8006112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006114:	3468      	adds	r4, #104	; 0x68
 8006116:	e7d9      	b.n	80060cc <__sfp+0x1c>
 8006118:	2104      	movs	r1, #4
 800611a:	4638      	mov	r0, r7
 800611c:	f7ff ff62 	bl	8005fe4 <__sfmoreglue>
 8006120:	4604      	mov	r4, r0
 8006122:	6030      	str	r0, [r6, #0]
 8006124:	2800      	cmp	r0, #0
 8006126:	d1d5      	bne.n	80060d4 <__sfp+0x24>
 8006128:	f7ff ff78 	bl	800601c <__sfp_lock_release>
 800612c:	230c      	movs	r3, #12
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	e7ee      	b.n	8006110 <__sfp+0x60>
 8006132:	bf00      	nop
 8006134:	0800708c 	.word	0x0800708c
 8006138:	ffff0001 	.word	0xffff0001

0800613c <_fwalk_reent>:
 800613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006140:	4606      	mov	r6, r0
 8006142:	4688      	mov	r8, r1
 8006144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006148:	2700      	movs	r7, #0
 800614a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800614e:	f1b9 0901 	subs.w	r9, r9, #1
 8006152:	d505      	bpl.n	8006160 <_fwalk_reent+0x24>
 8006154:	6824      	ldr	r4, [r4, #0]
 8006156:	2c00      	cmp	r4, #0
 8006158:	d1f7      	bne.n	800614a <_fwalk_reent+0xe>
 800615a:	4638      	mov	r0, r7
 800615c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006160:	89ab      	ldrh	r3, [r5, #12]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d907      	bls.n	8006176 <_fwalk_reent+0x3a>
 8006166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800616a:	3301      	adds	r3, #1
 800616c:	d003      	beq.n	8006176 <_fwalk_reent+0x3a>
 800616e:	4629      	mov	r1, r5
 8006170:	4630      	mov	r0, r6
 8006172:	47c0      	blx	r8
 8006174:	4307      	orrs	r7, r0
 8006176:	3568      	adds	r5, #104	; 0x68
 8006178:	e7e9      	b.n	800614e <_fwalk_reent+0x12>
	...

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4d0d      	ldr	r5, [pc, #52]	; (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	; (80061b8 <__libc_init_array+0x3c>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2600      	movs	r6, #0
 8006188:	42a6      	cmp	r6, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4d0b      	ldr	r5, [pc, #44]	; (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <__libc_init_array+0x44>)
 8006190:	f000 fe70 	bl	8006e74 <_init>
 8006194:	1b64      	subs	r4, r4, r5
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2600      	movs	r6, #0
 800619a:	42a6      	cmp	r6, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a4:	4798      	blx	r3
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ae:	4798      	blx	r3
 80061b0:	3601      	adds	r6, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	080070cc 	.word	0x080070cc
 80061b8:	080070cc 	.word	0x080070cc
 80061bc:	080070cc 	.word	0x080070cc
 80061c0:	080070d0 	.word	0x080070d0

080061c4 <__retarget_lock_init_recursive>:
 80061c4:	4770      	bx	lr

080061c6 <__retarget_lock_acquire_recursive>:
 80061c6:	4770      	bx	lr

080061c8 <__retarget_lock_release_recursive>:
 80061c8:	4770      	bx	lr

080061ca <memcpy>:
 80061ca:	440a      	add	r2, r1
 80061cc:	4291      	cmp	r1, r2
 80061ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80061d2:	d100      	bne.n	80061d6 <memcpy+0xc>
 80061d4:	4770      	bx	lr
 80061d6:	b510      	push	{r4, lr}
 80061d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061e0:	4291      	cmp	r1, r2
 80061e2:	d1f9      	bne.n	80061d8 <memcpy+0xe>
 80061e4:	bd10      	pop	{r4, pc}

080061e6 <memset>:
 80061e6:	4402      	add	r2, r0
 80061e8:	4603      	mov	r3, r0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d100      	bne.n	80061f0 <memset+0xa>
 80061ee:	4770      	bx	lr
 80061f0:	f803 1b01 	strb.w	r1, [r3], #1
 80061f4:	e7f9      	b.n	80061ea <memset+0x4>
	...

080061f8 <_free_r>:
 80061f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061fa:	2900      	cmp	r1, #0
 80061fc:	d044      	beq.n	8006288 <_free_r+0x90>
 80061fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006202:	9001      	str	r0, [sp, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f1a1 0404 	sub.w	r4, r1, #4
 800620a:	bfb8      	it	lt
 800620c:	18e4      	addlt	r4, r4, r3
 800620e:	f000 f9dd 	bl	80065cc <__malloc_lock>
 8006212:	4a1e      	ldr	r2, [pc, #120]	; (800628c <_free_r+0x94>)
 8006214:	9801      	ldr	r0, [sp, #4]
 8006216:	6813      	ldr	r3, [r2, #0]
 8006218:	b933      	cbnz	r3, 8006228 <_free_r+0x30>
 800621a:	6063      	str	r3, [r4, #4]
 800621c:	6014      	str	r4, [r2, #0]
 800621e:	b003      	add	sp, #12
 8006220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006224:	f000 b9d8 	b.w	80065d8 <__malloc_unlock>
 8006228:	42a3      	cmp	r3, r4
 800622a:	d908      	bls.n	800623e <_free_r+0x46>
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	1961      	adds	r1, r4, r5
 8006230:	428b      	cmp	r3, r1
 8006232:	bf01      	itttt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	1949      	addeq	r1, r1, r5
 800623a:	6021      	streq	r1, [r4, #0]
 800623c:	e7ed      	b.n	800621a <_free_r+0x22>
 800623e:	461a      	mov	r2, r3
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	b10b      	cbz	r3, 8006248 <_free_r+0x50>
 8006244:	42a3      	cmp	r3, r4
 8006246:	d9fa      	bls.n	800623e <_free_r+0x46>
 8006248:	6811      	ldr	r1, [r2, #0]
 800624a:	1855      	adds	r5, r2, r1
 800624c:	42a5      	cmp	r5, r4
 800624e:	d10b      	bne.n	8006268 <_free_r+0x70>
 8006250:	6824      	ldr	r4, [r4, #0]
 8006252:	4421      	add	r1, r4
 8006254:	1854      	adds	r4, r2, r1
 8006256:	42a3      	cmp	r3, r4
 8006258:	6011      	str	r1, [r2, #0]
 800625a:	d1e0      	bne.n	800621e <_free_r+0x26>
 800625c:	681c      	ldr	r4, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	6053      	str	r3, [r2, #4]
 8006262:	4421      	add	r1, r4
 8006264:	6011      	str	r1, [r2, #0]
 8006266:	e7da      	b.n	800621e <_free_r+0x26>
 8006268:	d902      	bls.n	8006270 <_free_r+0x78>
 800626a:	230c      	movs	r3, #12
 800626c:	6003      	str	r3, [r0, #0]
 800626e:	e7d6      	b.n	800621e <_free_r+0x26>
 8006270:	6825      	ldr	r5, [r4, #0]
 8006272:	1961      	adds	r1, r4, r5
 8006274:	428b      	cmp	r3, r1
 8006276:	bf04      	itt	eq
 8006278:	6819      	ldreq	r1, [r3, #0]
 800627a:	685b      	ldreq	r3, [r3, #4]
 800627c:	6063      	str	r3, [r4, #4]
 800627e:	bf04      	itt	eq
 8006280:	1949      	addeq	r1, r1, r5
 8006282:	6021      	streq	r1, [r4, #0]
 8006284:	6054      	str	r4, [r2, #4]
 8006286:	e7ca      	b.n	800621e <_free_r+0x26>
 8006288:	b003      	add	sp, #12
 800628a:	bd30      	pop	{r4, r5, pc}
 800628c:	20004600 	.word	0x20004600

08006290 <sbrk_aligned>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4e0e      	ldr	r6, [pc, #56]	; (80062cc <sbrk_aligned+0x3c>)
 8006294:	460c      	mov	r4, r1
 8006296:	6831      	ldr	r1, [r6, #0]
 8006298:	4605      	mov	r5, r0
 800629a:	b911      	cbnz	r1, 80062a2 <sbrk_aligned+0x12>
 800629c:	f000 f90e 	bl	80064bc <_sbrk_r>
 80062a0:	6030      	str	r0, [r6, #0]
 80062a2:	4621      	mov	r1, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 f909 	bl	80064bc <_sbrk_r>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	d00a      	beq.n	80062c4 <sbrk_aligned+0x34>
 80062ae:	1cc4      	adds	r4, r0, #3
 80062b0:	f024 0403 	bic.w	r4, r4, #3
 80062b4:	42a0      	cmp	r0, r4
 80062b6:	d007      	beq.n	80062c8 <sbrk_aligned+0x38>
 80062b8:	1a21      	subs	r1, r4, r0
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f8fe 	bl	80064bc <_sbrk_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d101      	bne.n	80062c8 <sbrk_aligned+0x38>
 80062c4:	f04f 34ff 	mov.w	r4, #4294967295
 80062c8:	4620      	mov	r0, r4
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	20004604 	.word	0x20004604

080062d0 <_malloc_r>:
 80062d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d4:	1ccd      	adds	r5, r1, #3
 80062d6:	f025 0503 	bic.w	r5, r5, #3
 80062da:	3508      	adds	r5, #8
 80062dc:	2d0c      	cmp	r5, #12
 80062de:	bf38      	it	cc
 80062e0:	250c      	movcc	r5, #12
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	4607      	mov	r7, r0
 80062e6:	db01      	blt.n	80062ec <_malloc_r+0x1c>
 80062e8:	42a9      	cmp	r1, r5
 80062ea:	d905      	bls.n	80062f8 <_malloc_r+0x28>
 80062ec:	230c      	movs	r3, #12
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	2600      	movs	r6, #0
 80062f2:	4630      	mov	r0, r6
 80062f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f8:	4e2e      	ldr	r6, [pc, #184]	; (80063b4 <_malloc_r+0xe4>)
 80062fa:	f000 f967 	bl	80065cc <__malloc_lock>
 80062fe:	6833      	ldr	r3, [r6, #0]
 8006300:	461c      	mov	r4, r3
 8006302:	bb34      	cbnz	r4, 8006352 <_malloc_r+0x82>
 8006304:	4629      	mov	r1, r5
 8006306:	4638      	mov	r0, r7
 8006308:	f7ff ffc2 	bl	8006290 <sbrk_aligned>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	4604      	mov	r4, r0
 8006310:	d14d      	bne.n	80063ae <_malloc_r+0xde>
 8006312:	6834      	ldr	r4, [r6, #0]
 8006314:	4626      	mov	r6, r4
 8006316:	2e00      	cmp	r6, #0
 8006318:	d140      	bne.n	800639c <_malloc_r+0xcc>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	4631      	mov	r1, r6
 800631e:	4638      	mov	r0, r7
 8006320:	eb04 0803 	add.w	r8, r4, r3
 8006324:	f000 f8ca 	bl	80064bc <_sbrk_r>
 8006328:	4580      	cmp	r8, r0
 800632a:	d13a      	bne.n	80063a2 <_malloc_r+0xd2>
 800632c:	6821      	ldr	r1, [r4, #0]
 800632e:	3503      	adds	r5, #3
 8006330:	1a6d      	subs	r5, r5, r1
 8006332:	f025 0503 	bic.w	r5, r5, #3
 8006336:	3508      	adds	r5, #8
 8006338:	2d0c      	cmp	r5, #12
 800633a:	bf38      	it	cc
 800633c:	250c      	movcc	r5, #12
 800633e:	4629      	mov	r1, r5
 8006340:	4638      	mov	r0, r7
 8006342:	f7ff ffa5 	bl	8006290 <sbrk_aligned>
 8006346:	3001      	adds	r0, #1
 8006348:	d02b      	beq.n	80063a2 <_malloc_r+0xd2>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	442b      	add	r3, r5
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	e00e      	b.n	8006370 <_malloc_r+0xa0>
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	1b52      	subs	r2, r2, r5
 8006356:	d41e      	bmi.n	8006396 <_malloc_r+0xc6>
 8006358:	2a0b      	cmp	r2, #11
 800635a:	d916      	bls.n	800638a <_malloc_r+0xba>
 800635c:	1961      	adds	r1, r4, r5
 800635e:	42a3      	cmp	r3, r4
 8006360:	6025      	str	r5, [r4, #0]
 8006362:	bf18      	it	ne
 8006364:	6059      	strne	r1, [r3, #4]
 8006366:	6863      	ldr	r3, [r4, #4]
 8006368:	bf08      	it	eq
 800636a:	6031      	streq	r1, [r6, #0]
 800636c:	5162      	str	r2, [r4, r5]
 800636e:	604b      	str	r3, [r1, #4]
 8006370:	4638      	mov	r0, r7
 8006372:	f104 060b 	add.w	r6, r4, #11
 8006376:	f000 f92f 	bl	80065d8 <__malloc_unlock>
 800637a:	f026 0607 	bic.w	r6, r6, #7
 800637e:	1d23      	adds	r3, r4, #4
 8006380:	1af2      	subs	r2, r6, r3
 8006382:	d0b6      	beq.n	80062f2 <_malloc_r+0x22>
 8006384:	1b9b      	subs	r3, r3, r6
 8006386:	50a3      	str	r3, [r4, r2]
 8006388:	e7b3      	b.n	80062f2 <_malloc_r+0x22>
 800638a:	6862      	ldr	r2, [r4, #4]
 800638c:	42a3      	cmp	r3, r4
 800638e:	bf0c      	ite	eq
 8006390:	6032      	streq	r2, [r6, #0]
 8006392:	605a      	strne	r2, [r3, #4]
 8006394:	e7ec      	b.n	8006370 <_malloc_r+0xa0>
 8006396:	4623      	mov	r3, r4
 8006398:	6864      	ldr	r4, [r4, #4]
 800639a:	e7b2      	b.n	8006302 <_malloc_r+0x32>
 800639c:	4634      	mov	r4, r6
 800639e:	6876      	ldr	r6, [r6, #4]
 80063a0:	e7b9      	b.n	8006316 <_malloc_r+0x46>
 80063a2:	230c      	movs	r3, #12
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4638      	mov	r0, r7
 80063a8:	f000 f916 	bl	80065d8 <__malloc_unlock>
 80063ac:	e7a1      	b.n	80062f2 <_malloc_r+0x22>
 80063ae:	6025      	str	r5, [r4, #0]
 80063b0:	e7de      	b.n	8006370 <_malloc_r+0xa0>
 80063b2:	bf00      	nop
 80063b4:	20004600 	.word	0x20004600

080063b8 <iprintf>:
 80063b8:	b40f      	push	{r0, r1, r2, r3}
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <iprintf+0x2c>)
 80063bc:	b513      	push	{r0, r1, r4, lr}
 80063be:	681c      	ldr	r4, [r3, #0]
 80063c0:	b124      	cbz	r4, 80063cc <iprintf+0x14>
 80063c2:	69a3      	ldr	r3, [r4, #24]
 80063c4:	b913      	cbnz	r3, 80063cc <iprintf+0x14>
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7ff fe3a 	bl	8006040 <__sinit>
 80063cc:	ab05      	add	r3, sp, #20
 80063ce:	9a04      	ldr	r2, [sp, #16]
 80063d0:	68a1      	ldr	r1, [r4, #8]
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 f92f 	bl	8006638 <_vfiprintf_r>
 80063da:	b002      	add	sp, #8
 80063dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e0:	b004      	add	sp, #16
 80063e2:	4770      	bx	lr
 80063e4:	20000048 	.word	0x20000048

080063e8 <cleanup_glue>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	460c      	mov	r4, r1
 80063ec:	6809      	ldr	r1, [r1, #0]
 80063ee:	4605      	mov	r5, r0
 80063f0:	b109      	cbz	r1, 80063f6 <cleanup_glue+0xe>
 80063f2:	f7ff fff9 	bl	80063e8 <cleanup_glue>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4628      	mov	r0, r5
 80063fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063fe:	f7ff befb 	b.w	80061f8 <_free_r>
	...

08006404 <_reclaim_reent>:
 8006404:	4b2c      	ldr	r3, [pc, #176]	; (80064b8 <_reclaim_reent+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4283      	cmp	r3, r0
 800640a:	b570      	push	{r4, r5, r6, lr}
 800640c:	4604      	mov	r4, r0
 800640e:	d051      	beq.n	80064b4 <_reclaim_reent+0xb0>
 8006410:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006412:	b143      	cbz	r3, 8006426 <_reclaim_reent+0x22>
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d14a      	bne.n	80064b0 <_reclaim_reent+0xac>
 800641a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641c:	6819      	ldr	r1, [r3, #0]
 800641e:	b111      	cbz	r1, 8006426 <_reclaim_reent+0x22>
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff fee9 	bl	80061f8 <_free_r>
 8006426:	6961      	ldr	r1, [r4, #20]
 8006428:	b111      	cbz	r1, 8006430 <_reclaim_reent+0x2c>
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff fee4 	bl	80061f8 <_free_r>
 8006430:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006432:	b111      	cbz	r1, 800643a <_reclaim_reent+0x36>
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff fedf 	bl	80061f8 <_free_r>
 800643a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800643c:	b111      	cbz	r1, 8006444 <_reclaim_reent+0x40>
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff feda 	bl	80061f8 <_free_r>
 8006444:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006446:	b111      	cbz	r1, 800644e <_reclaim_reent+0x4a>
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fed5 	bl	80061f8 <_free_r>
 800644e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006450:	b111      	cbz	r1, 8006458 <_reclaim_reent+0x54>
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff fed0 	bl	80061f8 <_free_r>
 8006458:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800645a:	b111      	cbz	r1, 8006462 <_reclaim_reent+0x5e>
 800645c:	4620      	mov	r0, r4
 800645e:	f7ff fecb 	bl	80061f8 <_free_r>
 8006462:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006464:	b111      	cbz	r1, 800646c <_reclaim_reent+0x68>
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff fec6 	bl	80061f8 <_free_r>
 800646c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800646e:	b111      	cbz	r1, 8006476 <_reclaim_reent+0x72>
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff fec1 	bl	80061f8 <_free_r>
 8006476:	69a3      	ldr	r3, [r4, #24]
 8006478:	b1e3      	cbz	r3, 80064b4 <_reclaim_reent+0xb0>
 800647a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800647c:	4620      	mov	r0, r4
 800647e:	4798      	blx	r3
 8006480:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006482:	b1b9      	cbz	r1, 80064b4 <_reclaim_reent+0xb0>
 8006484:	4620      	mov	r0, r4
 8006486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800648a:	f7ff bfad 	b.w	80063e8 <cleanup_glue>
 800648e:	5949      	ldr	r1, [r1, r5]
 8006490:	b941      	cbnz	r1, 80064a4 <_reclaim_reent+0xa0>
 8006492:	3504      	adds	r5, #4
 8006494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006496:	2d80      	cmp	r5, #128	; 0x80
 8006498:	68d9      	ldr	r1, [r3, #12]
 800649a:	d1f8      	bne.n	800648e <_reclaim_reent+0x8a>
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff feab 	bl	80061f8 <_free_r>
 80064a2:	e7ba      	b.n	800641a <_reclaim_reent+0x16>
 80064a4:	680e      	ldr	r6, [r1, #0]
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7ff fea6 	bl	80061f8 <_free_r>
 80064ac:	4631      	mov	r1, r6
 80064ae:	e7ef      	b.n	8006490 <_reclaim_reent+0x8c>
 80064b0:	2500      	movs	r5, #0
 80064b2:	e7ef      	b.n	8006494 <_reclaim_reent+0x90>
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	bf00      	nop
 80064b8:	20000048 	.word	0x20000048

080064bc <_sbrk_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d06      	ldr	r5, [pc, #24]	; (80064d8 <_sbrk_r+0x1c>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	f7fa fe2e 	bl	8001128 <_sbrk>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_sbrk_r+0x1a>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_sbrk_r+0x1a>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20004608 	.word	0x20004608

080064dc <__sread>:
 80064dc:	b510      	push	{r4, lr}
 80064de:	460c      	mov	r4, r1
 80064e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e4:	f000 fb6c 	bl	8006bc0 <_read_r>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	bfab      	itete	ge
 80064ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064ee:	89a3      	ldrhlt	r3, [r4, #12]
 80064f0:	181b      	addge	r3, r3, r0
 80064f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064f6:	bfac      	ite	ge
 80064f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80064fa:	81a3      	strhlt	r3, [r4, #12]
 80064fc:	bd10      	pop	{r4, pc}

080064fe <__swrite>:
 80064fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006502:	461f      	mov	r7, r3
 8006504:	898b      	ldrh	r3, [r1, #12]
 8006506:	05db      	lsls	r3, r3, #23
 8006508:	4605      	mov	r5, r0
 800650a:	460c      	mov	r4, r1
 800650c:	4616      	mov	r6, r2
 800650e:	d505      	bpl.n	800651c <__swrite+0x1e>
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	2302      	movs	r3, #2
 8006516:	2200      	movs	r2, #0
 8006518:	f000 f846 	bl	80065a8 <_lseek_r>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	4632      	mov	r2, r6
 800652a:	463b      	mov	r3, r7
 800652c:	4628      	mov	r0, r5
 800652e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	f000 b817 	b.w	8006564 <_write_r>

08006536 <__sseek>:
 8006536:	b510      	push	{r4, lr}
 8006538:	460c      	mov	r4, r1
 800653a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800653e:	f000 f833 	bl	80065a8 <_lseek_r>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	bf15      	itete	ne
 8006548:	6560      	strne	r0, [r4, #84]	; 0x54
 800654a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800654e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006552:	81a3      	strheq	r3, [r4, #12]
 8006554:	bf18      	it	ne
 8006556:	81a3      	strhne	r3, [r4, #12]
 8006558:	bd10      	pop	{r4, pc}

0800655a <__sclose>:
 800655a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655e:	f000 b813 	b.w	8006588 <_close_r>
	...

08006564 <_write_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	; (8006584 <_write_r+0x20>)
 8006568:	4604      	mov	r4, r0
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	2200      	movs	r2, #0
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fa fd87 	bl	8001086 <_write>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_write_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_write_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20004608 	.word	0x20004608

08006588 <_close_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	; (80065a4 <_close_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa fd93 	bl	80010be <_close>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_close_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_close_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20004608 	.word	0x20004608

080065a8 <_lseek_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d07      	ldr	r5, [pc, #28]	; (80065c8 <_lseek_r+0x20>)
 80065ac:	4604      	mov	r4, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fa fda8 	bl	800110c <_lseek>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_lseek_r+0x1e>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_lseek_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20004608 	.word	0x20004608

080065cc <__malloc_lock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	; (80065d4 <__malloc_lock+0x8>)
 80065ce:	f7ff bdfa 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 80065d2:	bf00      	nop
 80065d4:	200045fc 	.word	0x200045fc

080065d8 <__malloc_unlock>:
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <__malloc_unlock+0x8>)
 80065da:	f7ff bdf5 	b.w	80061c8 <__retarget_lock_release_recursive>
 80065de:	bf00      	nop
 80065e0:	200045fc 	.word	0x200045fc

080065e4 <__sfputc_r>:
 80065e4:	6893      	ldr	r3, [r2, #8]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	b410      	push	{r4}
 80065ec:	6093      	str	r3, [r2, #8]
 80065ee:	da08      	bge.n	8006602 <__sfputc_r+0x1e>
 80065f0:	6994      	ldr	r4, [r2, #24]
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	db01      	blt.n	80065fa <__sfputc_r+0x16>
 80065f6:	290a      	cmp	r1, #10
 80065f8:	d103      	bne.n	8006602 <__sfputc_r+0x1e>
 80065fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065fe:	f000 baf1 	b.w	8006be4 <__swbuf_r>
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	1c58      	adds	r0, r3, #1
 8006606:	6010      	str	r0, [r2, #0]
 8006608:	7019      	strb	r1, [r3, #0]
 800660a:	4608      	mov	r0, r1
 800660c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006610:	4770      	bx	lr

08006612 <__sfputs_r>:
 8006612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	4614      	mov	r4, r2
 800661a:	18d5      	adds	r5, r2, r3
 800661c:	42ac      	cmp	r4, r5
 800661e:	d101      	bne.n	8006624 <__sfputs_r+0x12>
 8006620:	2000      	movs	r0, #0
 8006622:	e007      	b.n	8006634 <__sfputs_r+0x22>
 8006624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006628:	463a      	mov	r2, r7
 800662a:	4630      	mov	r0, r6
 800662c:	f7ff ffda 	bl	80065e4 <__sfputc_r>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d1f3      	bne.n	800661c <__sfputs_r+0xa>
 8006634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006638 <_vfiprintf_r>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	460d      	mov	r5, r1
 800663e:	b09d      	sub	sp, #116	; 0x74
 8006640:	4614      	mov	r4, r2
 8006642:	4698      	mov	r8, r3
 8006644:	4606      	mov	r6, r0
 8006646:	b118      	cbz	r0, 8006650 <_vfiprintf_r+0x18>
 8006648:	6983      	ldr	r3, [r0, #24]
 800664a:	b90b      	cbnz	r3, 8006650 <_vfiprintf_r+0x18>
 800664c:	f7ff fcf8 	bl	8006040 <__sinit>
 8006650:	4b89      	ldr	r3, [pc, #548]	; (8006878 <_vfiprintf_r+0x240>)
 8006652:	429d      	cmp	r5, r3
 8006654:	d11b      	bne.n	800668e <_vfiprintf_r+0x56>
 8006656:	6875      	ldr	r5, [r6, #4]
 8006658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800665a:	07d9      	lsls	r1, r3, #31
 800665c:	d405      	bmi.n	800666a <_vfiprintf_r+0x32>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	059a      	lsls	r2, r3, #22
 8006662:	d402      	bmi.n	800666a <_vfiprintf_r+0x32>
 8006664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006666:	f7ff fdae 	bl	80061c6 <__retarget_lock_acquire_recursive>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	071b      	lsls	r3, r3, #28
 800666e:	d501      	bpl.n	8006674 <_vfiprintf_r+0x3c>
 8006670:	692b      	ldr	r3, [r5, #16]
 8006672:	b9eb      	cbnz	r3, 80066b0 <_vfiprintf_r+0x78>
 8006674:	4629      	mov	r1, r5
 8006676:	4630      	mov	r0, r6
 8006678:	f000 fb06 	bl	8006c88 <__swsetup_r>
 800667c:	b1c0      	cbz	r0, 80066b0 <_vfiprintf_r+0x78>
 800667e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006680:	07dc      	lsls	r4, r3, #31
 8006682:	d50e      	bpl.n	80066a2 <_vfiprintf_r+0x6a>
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	b01d      	add	sp, #116	; 0x74
 800668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668e:	4b7b      	ldr	r3, [pc, #492]	; (800687c <_vfiprintf_r+0x244>)
 8006690:	429d      	cmp	r5, r3
 8006692:	d101      	bne.n	8006698 <_vfiprintf_r+0x60>
 8006694:	68b5      	ldr	r5, [r6, #8]
 8006696:	e7df      	b.n	8006658 <_vfiprintf_r+0x20>
 8006698:	4b79      	ldr	r3, [pc, #484]	; (8006880 <_vfiprintf_r+0x248>)
 800669a:	429d      	cmp	r5, r3
 800669c:	bf08      	it	eq
 800669e:	68f5      	ldreq	r5, [r6, #12]
 80066a0:	e7da      	b.n	8006658 <_vfiprintf_r+0x20>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	0598      	lsls	r0, r3, #22
 80066a6:	d4ed      	bmi.n	8006684 <_vfiprintf_r+0x4c>
 80066a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066aa:	f7ff fd8d 	bl	80061c8 <__retarget_lock_release_recursive>
 80066ae:	e7e9      	b.n	8006684 <_vfiprintf_r+0x4c>
 80066b0:	2300      	movs	r3, #0
 80066b2:	9309      	str	r3, [sp, #36]	; 0x24
 80066b4:	2320      	movs	r3, #32
 80066b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80066be:	2330      	movs	r3, #48	; 0x30
 80066c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006884 <_vfiprintf_r+0x24c>
 80066c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066c8:	f04f 0901 	mov.w	r9, #1
 80066cc:	4623      	mov	r3, r4
 80066ce:	469a      	mov	sl, r3
 80066d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d4:	b10a      	cbz	r2, 80066da <_vfiprintf_r+0xa2>
 80066d6:	2a25      	cmp	r2, #37	; 0x25
 80066d8:	d1f9      	bne.n	80066ce <_vfiprintf_r+0x96>
 80066da:	ebba 0b04 	subs.w	fp, sl, r4
 80066de:	d00b      	beq.n	80066f8 <_vfiprintf_r+0xc0>
 80066e0:	465b      	mov	r3, fp
 80066e2:	4622      	mov	r2, r4
 80066e4:	4629      	mov	r1, r5
 80066e6:	4630      	mov	r0, r6
 80066e8:	f7ff ff93 	bl	8006612 <__sfputs_r>
 80066ec:	3001      	adds	r0, #1
 80066ee:	f000 80aa 	beq.w	8006846 <_vfiprintf_r+0x20e>
 80066f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f4:	445a      	add	r2, fp
 80066f6:	9209      	str	r2, [sp, #36]	; 0x24
 80066f8:	f89a 3000 	ldrb.w	r3, [sl]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80a2 	beq.w	8006846 <_vfiprintf_r+0x20e>
 8006702:	2300      	movs	r3, #0
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800670c:	f10a 0a01 	add.w	sl, sl, #1
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	9307      	str	r3, [sp, #28]
 8006714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006718:	931a      	str	r3, [sp, #104]	; 0x68
 800671a:	4654      	mov	r4, sl
 800671c:	2205      	movs	r2, #5
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4858      	ldr	r0, [pc, #352]	; (8006884 <_vfiprintf_r+0x24c>)
 8006724:	f7f9 fd64 	bl	80001f0 <memchr>
 8006728:	9a04      	ldr	r2, [sp, #16]
 800672a:	b9d8      	cbnz	r0, 8006764 <_vfiprintf_r+0x12c>
 800672c:	06d1      	lsls	r1, r2, #27
 800672e:	bf44      	itt	mi
 8006730:	2320      	movmi	r3, #32
 8006732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006736:	0713      	lsls	r3, r2, #28
 8006738:	bf44      	itt	mi
 800673a:	232b      	movmi	r3, #43	; 0x2b
 800673c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006740:	f89a 3000 	ldrb.w	r3, [sl]
 8006744:	2b2a      	cmp	r3, #42	; 0x2a
 8006746:	d015      	beq.n	8006774 <_vfiprintf_r+0x13c>
 8006748:	9a07      	ldr	r2, [sp, #28]
 800674a:	4654      	mov	r4, sl
 800674c:	2000      	movs	r0, #0
 800674e:	f04f 0c0a 	mov.w	ip, #10
 8006752:	4621      	mov	r1, r4
 8006754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006758:	3b30      	subs	r3, #48	; 0x30
 800675a:	2b09      	cmp	r3, #9
 800675c:	d94e      	bls.n	80067fc <_vfiprintf_r+0x1c4>
 800675e:	b1b0      	cbz	r0, 800678e <_vfiprintf_r+0x156>
 8006760:	9207      	str	r2, [sp, #28]
 8006762:	e014      	b.n	800678e <_vfiprintf_r+0x156>
 8006764:	eba0 0308 	sub.w	r3, r0, r8
 8006768:	fa09 f303 	lsl.w	r3, r9, r3
 800676c:	4313      	orrs	r3, r2
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	46a2      	mov	sl, r4
 8006772:	e7d2      	b.n	800671a <_vfiprintf_r+0xe2>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	1d19      	adds	r1, r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	9103      	str	r1, [sp, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfbb      	ittet	lt
 8006780:	425b      	neglt	r3, r3
 8006782:	f042 0202 	orrlt.w	r2, r2, #2
 8006786:	9307      	strge	r3, [sp, #28]
 8006788:	9307      	strlt	r3, [sp, #28]
 800678a:	bfb8      	it	lt
 800678c:	9204      	strlt	r2, [sp, #16]
 800678e:	7823      	ldrb	r3, [r4, #0]
 8006790:	2b2e      	cmp	r3, #46	; 0x2e
 8006792:	d10c      	bne.n	80067ae <_vfiprintf_r+0x176>
 8006794:	7863      	ldrb	r3, [r4, #1]
 8006796:	2b2a      	cmp	r3, #42	; 0x2a
 8006798:	d135      	bne.n	8006806 <_vfiprintf_r+0x1ce>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	9203      	str	r2, [sp, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bfb8      	it	lt
 80067a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80067aa:	3402      	adds	r4, #2
 80067ac:	9305      	str	r3, [sp, #20]
 80067ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006894 <_vfiprintf_r+0x25c>
 80067b2:	7821      	ldrb	r1, [r4, #0]
 80067b4:	2203      	movs	r2, #3
 80067b6:	4650      	mov	r0, sl
 80067b8:	f7f9 fd1a 	bl	80001f0 <memchr>
 80067bc:	b140      	cbz	r0, 80067d0 <_vfiprintf_r+0x198>
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	eba0 000a 	sub.w	r0, r0, sl
 80067c4:	fa03 f000 	lsl.w	r0, r3, r0
 80067c8:	9b04      	ldr	r3, [sp, #16]
 80067ca:	4303      	orrs	r3, r0
 80067cc:	3401      	adds	r4, #1
 80067ce:	9304      	str	r3, [sp, #16]
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	482c      	ldr	r0, [pc, #176]	; (8006888 <_vfiprintf_r+0x250>)
 80067d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067da:	2206      	movs	r2, #6
 80067dc:	f7f9 fd08 	bl	80001f0 <memchr>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d03f      	beq.n	8006864 <_vfiprintf_r+0x22c>
 80067e4:	4b29      	ldr	r3, [pc, #164]	; (800688c <_vfiprintf_r+0x254>)
 80067e6:	bb1b      	cbnz	r3, 8006830 <_vfiprintf_r+0x1f8>
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	3307      	adds	r3, #7
 80067ec:	f023 0307 	bic.w	r3, r3, #7
 80067f0:	3308      	adds	r3, #8
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f6:	443b      	add	r3, r7
 80067f8:	9309      	str	r3, [sp, #36]	; 0x24
 80067fa:	e767      	b.n	80066cc <_vfiprintf_r+0x94>
 80067fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006800:	460c      	mov	r4, r1
 8006802:	2001      	movs	r0, #1
 8006804:	e7a5      	b.n	8006752 <_vfiprintf_r+0x11a>
 8006806:	2300      	movs	r3, #0
 8006808:	3401      	adds	r4, #1
 800680a:	9305      	str	r3, [sp, #20]
 800680c:	4619      	mov	r1, r3
 800680e:	f04f 0c0a 	mov.w	ip, #10
 8006812:	4620      	mov	r0, r4
 8006814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006818:	3a30      	subs	r2, #48	; 0x30
 800681a:	2a09      	cmp	r2, #9
 800681c:	d903      	bls.n	8006826 <_vfiprintf_r+0x1ee>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0c5      	beq.n	80067ae <_vfiprintf_r+0x176>
 8006822:	9105      	str	r1, [sp, #20]
 8006824:	e7c3      	b.n	80067ae <_vfiprintf_r+0x176>
 8006826:	fb0c 2101 	mla	r1, ip, r1, r2
 800682a:	4604      	mov	r4, r0
 800682c:	2301      	movs	r3, #1
 800682e:	e7f0      	b.n	8006812 <_vfiprintf_r+0x1da>
 8006830:	ab03      	add	r3, sp, #12
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	462a      	mov	r2, r5
 8006836:	4b16      	ldr	r3, [pc, #88]	; (8006890 <_vfiprintf_r+0x258>)
 8006838:	a904      	add	r1, sp, #16
 800683a:	4630      	mov	r0, r6
 800683c:	f3af 8000 	nop.w
 8006840:	4607      	mov	r7, r0
 8006842:	1c78      	adds	r0, r7, #1
 8006844:	d1d6      	bne.n	80067f4 <_vfiprintf_r+0x1bc>
 8006846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006848:	07d9      	lsls	r1, r3, #31
 800684a:	d405      	bmi.n	8006858 <_vfiprintf_r+0x220>
 800684c:	89ab      	ldrh	r3, [r5, #12]
 800684e:	059a      	lsls	r2, r3, #22
 8006850:	d402      	bmi.n	8006858 <_vfiprintf_r+0x220>
 8006852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006854:	f7ff fcb8 	bl	80061c8 <__retarget_lock_release_recursive>
 8006858:	89ab      	ldrh	r3, [r5, #12]
 800685a:	065b      	lsls	r3, r3, #25
 800685c:	f53f af12 	bmi.w	8006684 <_vfiprintf_r+0x4c>
 8006860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006862:	e711      	b.n	8006688 <_vfiprintf_r+0x50>
 8006864:	ab03      	add	r3, sp, #12
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	462a      	mov	r2, r5
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <_vfiprintf_r+0x258>)
 800686c:	a904      	add	r1, sp, #16
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f880 	bl	8006974 <_printf_i>
 8006874:	e7e4      	b.n	8006840 <_vfiprintf_r+0x208>
 8006876:	bf00      	nop
 8006878:	0800704c 	.word	0x0800704c
 800687c:	0800706c 	.word	0x0800706c
 8006880:	0800702c 	.word	0x0800702c
 8006884:	08007090 	.word	0x08007090
 8006888:	0800709a 	.word	0x0800709a
 800688c:	00000000 	.word	0x00000000
 8006890:	08006613 	.word	0x08006613
 8006894:	08007096 	.word	0x08007096

08006898 <_printf_common>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	4616      	mov	r6, r2
 800689e:	4699      	mov	r9, r3
 80068a0:	688a      	ldr	r2, [r1, #8]
 80068a2:	690b      	ldr	r3, [r1, #16]
 80068a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bfb8      	it	lt
 80068ac:	4613      	movlt	r3, r2
 80068ae:	6033      	str	r3, [r6, #0]
 80068b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b4:	4607      	mov	r7, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	b10a      	cbz	r2, 80068be <_printf_common+0x26>
 80068ba:	3301      	adds	r3, #1
 80068bc:	6033      	str	r3, [r6, #0]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	0699      	lsls	r1, r3, #26
 80068c2:	bf42      	ittt	mi
 80068c4:	6833      	ldrmi	r3, [r6, #0]
 80068c6:	3302      	addmi	r3, #2
 80068c8:	6033      	strmi	r3, [r6, #0]
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	f015 0506 	ands.w	r5, r5, #6
 80068d0:	d106      	bne.n	80068e0 <_printf_common+0x48>
 80068d2:	f104 0a19 	add.w	sl, r4, #25
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	6832      	ldr	r2, [r6, #0]
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	42ab      	cmp	r3, r5
 80068de:	dc26      	bgt.n	800692e <_printf_common+0x96>
 80068e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068e4:	1e13      	subs	r3, r2, #0
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	bf18      	it	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	0692      	lsls	r2, r2, #26
 80068ee:	d42b      	bmi.n	8006948 <_printf_common+0xb0>
 80068f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f4:	4649      	mov	r1, r9
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	3001      	adds	r0, #1
 80068fc:	d01e      	beq.n	800693c <_printf_common+0xa4>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	68e5      	ldr	r5, [r4, #12]
 8006902:	6832      	ldr	r2, [r6, #0]
 8006904:	f003 0306 	and.w	r3, r3, #6
 8006908:	2b04      	cmp	r3, #4
 800690a:	bf08      	it	eq
 800690c:	1aad      	subeq	r5, r5, r2
 800690e:	68a3      	ldr	r3, [r4, #8]
 8006910:	6922      	ldr	r2, [r4, #16]
 8006912:	bf0c      	ite	eq
 8006914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006918:	2500      	movne	r5, #0
 800691a:	4293      	cmp	r3, r2
 800691c:	bfc4      	itt	gt
 800691e:	1a9b      	subgt	r3, r3, r2
 8006920:	18ed      	addgt	r5, r5, r3
 8006922:	2600      	movs	r6, #0
 8006924:	341a      	adds	r4, #26
 8006926:	42b5      	cmp	r5, r6
 8006928:	d11a      	bne.n	8006960 <_printf_common+0xc8>
 800692a:	2000      	movs	r0, #0
 800692c:	e008      	b.n	8006940 <_printf_common+0xa8>
 800692e:	2301      	movs	r3, #1
 8006930:	4652      	mov	r2, sl
 8006932:	4649      	mov	r1, r9
 8006934:	4638      	mov	r0, r7
 8006936:	47c0      	blx	r8
 8006938:	3001      	adds	r0, #1
 800693a:	d103      	bne.n	8006944 <_printf_common+0xac>
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006944:	3501      	adds	r5, #1
 8006946:	e7c6      	b.n	80068d6 <_printf_common+0x3e>
 8006948:	18e1      	adds	r1, r4, r3
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	2030      	movs	r0, #48	; 0x30
 800694e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006952:	4422      	add	r2, r4
 8006954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800695c:	3302      	adds	r3, #2
 800695e:	e7c7      	b.n	80068f0 <_printf_common+0x58>
 8006960:	2301      	movs	r3, #1
 8006962:	4622      	mov	r2, r4
 8006964:	4649      	mov	r1, r9
 8006966:	4638      	mov	r0, r7
 8006968:	47c0      	blx	r8
 800696a:	3001      	adds	r0, #1
 800696c:	d0e6      	beq.n	800693c <_printf_common+0xa4>
 800696e:	3601      	adds	r6, #1
 8006970:	e7d9      	b.n	8006926 <_printf_common+0x8e>
	...

08006974 <_printf_i>:
 8006974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	7e0f      	ldrb	r7, [r1, #24]
 800697a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800697c:	2f78      	cmp	r7, #120	; 0x78
 800697e:	4691      	mov	r9, r2
 8006980:	4680      	mov	r8, r0
 8006982:	460c      	mov	r4, r1
 8006984:	469a      	mov	sl, r3
 8006986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800698a:	d807      	bhi.n	800699c <_printf_i+0x28>
 800698c:	2f62      	cmp	r7, #98	; 0x62
 800698e:	d80a      	bhi.n	80069a6 <_printf_i+0x32>
 8006990:	2f00      	cmp	r7, #0
 8006992:	f000 80d8 	beq.w	8006b46 <_printf_i+0x1d2>
 8006996:	2f58      	cmp	r7, #88	; 0x58
 8006998:	f000 80a3 	beq.w	8006ae2 <_printf_i+0x16e>
 800699c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069a4:	e03a      	b.n	8006a1c <_printf_i+0xa8>
 80069a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069aa:	2b15      	cmp	r3, #21
 80069ac:	d8f6      	bhi.n	800699c <_printf_i+0x28>
 80069ae:	a101      	add	r1, pc, #4	; (adr r1, 80069b4 <_printf_i+0x40>)
 80069b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069b4:	08006a0d 	.word	0x08006a0d
 80069b8:	08006a21 	.word	0x08006a21
 80069bc:	0800699d 	.word	0x0800699d
 80069c0:	0800699d 	.word	0x0800699d
 80069c4:	0800699d 	.word	0x0800699d
 80069c8:	0800699d 	.word	0x0800699d
 80069cc:	08006a21 	.word	0x08006a21
 80069d0:	0800699d 	.word	0x0800699d
 80069d4:	0800699d 	.word	0x0800699d
 80069d8:	0800699d 	.word	0x0800699d
 80069dc:	0800699d 	.word	0x0800699d
 80069e0:	08006b2d 	.word	0x08006b2d
 80069e4:	08006a51 	.word	0x08006a51
 80069e8:	08006b0f 	.word	0x08006b0f
 80069ec:	0800699d 	.word	0x0800699d
 80069f0:	0800699d 	.word	0x0800699d
 80069f4:	08006b4f 	.word	0x08006b4f
 80069f8:	0800699d 	.word	0x0800699d
 80069fc:	08006a51 	.word	0x08006a51
 8006a00:	0800699d 	.word	0x0800699d
 8006a04:	0800699d 	.word	0x0800699d
 8006a08:	08006b17 	.word	0x08006b17
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	1d1a      	adds	r2, r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	602a      	str	r2, [r5, #0]
 8006a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0a3      	b.n	8006b68 <_printf_i+0x1f4>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	6829      	ldr	r1, [r5, #0]
 8006a24:	0606      	lsls	r6, r0, #24
 8006a26:	f101 0304 	add.w	r3, r1, #4
 8006a2a:	d50a      	bpl.n	8006a42 <_printf_i+0xce>
 8006a2c:	680e      	ldr	r6, [r1, #0]
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	2e00      	cmp	r6, #0
 8006a32:	da03      	bge.n	8006a3c <_printf_i+0xc8>
 8006a34:	232d      	movs	r3, #45	; 0x2d
 8006a36:	4276      	negs	r6, r6
 8006a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3c:	485e      	ldr	r0, [pc, #376]	; (8006bb8 <_printf_i+0x244>)
 8006a3e:	230a      	movs	r3, #10
 8006a40:	e019      	b.n	8006a76 <_printf_i+0x102>
 8006a42:	680e      	ldr	r6, [r1, #0]
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a4a:	bf18      	it	ne
 8006a4c:	b236      	sxthne	r6, r6
 8006a4e:	e7ef      	b.n	8006a30 <_printf_i+0xbc>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	6820      	ldr	r0, [r4, #0]
 8006a54:	1d19      	adds	r1, r3, #4
 8006a56:	6029      	str	r1, [r5, #0]
 8006a58:	0601      	lsls	r1, r0, #24
 8006a5a:	d501      	bpl.n	8006a60 <_printf_i+0xec>
 8006a5c:	681e      	ldr	r6, [r3, #0]
 8006a5e:	e002      	b.n	8006a66 <_printf_i+0xf2>
 8006a60:	0646      	lsls	r6, r0, #25
 8006a62:	d5fb      	bpl.n	8006a5c <_printf_i+0xe8>
 8006a64:	881e      	ldrh	r6, [r3, #0]
 8006a66:	4854      	ldr	r0, [pc, #336]	; (8006bb8 <_printf_i+0x244>)
 8006a68:	2f6f      	cmp	r7, #111	; 0x6f
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2308      	moveq	r3, #8
 8006a6e:	230a      	movne	r3, #10
 8006a70:	2100      	movs	r1, #0
 8006a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a76:	6865      	ldr	r5, [r4, #4]
 8006a78:	60a5      	str	r5, [r4, #8]
 8006a7a:	2d00      	cmp	r5, #0
 8006a7c:	bfa2      	ittt	ge
 8006a7e:	6821      	ldrge	r1, [r4, #0]
 8006a80:	f021 0104 	bicge.w	r1, r1, #4
 8006a84:	6021      	strge	r1, [r4, #0]
 8006a86:	b90e      	cbnz	r6, 8006a8c <_printf_i+0x118>
 8006a88:	2d00      	cmp	r5, #0
 8006a8a:	d04d      	beq.n	8006b28 <_printf_i+0x1b4>
 8006a8c:	4615      	mov	r5, r2
 8006a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a92:	fb03 6711 	mls	r7, r3, r1, r6
 8006a96:	5dc7      	ldrb	r7, [r0, r7]
 8006a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a9c:	4637      	mov	r7, r6
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	460e      	mov	r6, r1
 8006aa2:	d9f4      	bls.n	8006a8e <_printf_i+0x11a>
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d10b      	bne.n	8006ac0 <_printf_i+0x14c>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	07de      	lsls	r6, r3, #31
 8006aac:	d508      	bpl.n	8006ac0 <_printf_i+0x14c>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	bfde      	ittt	le
 8006ab6:	2330      	movle	r3, #48	; 0x30
 8006ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ac0:	1b52      	subs	r2, r2, r5
 8006ac2:	6122      	str	r2, [r4, #16]
 8006ac4:	f8cd a000 	str.w	sl, [sp]
 8006ac8:	464b      	mov	r3, r9
 8006aca:	aa03      	add	r2, sp, #12
 8006acc:	4621      	mov	r1, r4
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fee2 	bl	8006898 <_printf_common>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d14c      	bne.n	8006b72 <_printf_i+0x1fe>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	b004      	add	sp, #16
 8006ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae2:	4835      	ldr	r0, [pc, #212]	; (8006bb8 <_printf_i+0x244>)
 8006ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ae8:	6829      	ldr	r1, [r5, #0]
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8006af0:	6029      	str	r1, [r5, #0]
 8006af2:	061d      	lsls	r5, r3, #24
 8006af4:	d514      	bpl.n	8006b20 <_printf_i+0x1ac>
 8006af6:	07df      	lsls	r7, r3, #31
 8006af8:	bf44      	itt	mi
 8006afa:	f043 0320 	orrmi.w	r3, r3, #32
 8006afe:	6023      	strmi	r3, [r4, #0]
 8006b00:	b91e      	cbnz	r6, 8006b0a <_printf_i+0x196>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	f023 0320 	bic.w	r3, r3, #32
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	e7b0      	b.n	8006a70 <_printf_i+0xfc>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	f043 0320 	orr.w	r3, r3, #32
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	2378      	movs	r3, #120	; 0x78
 8006b18:	4828      	ldr	r0, [pc, #160]	; (8006bbc <_printf_i+0x248>)
 8006b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b1e:	e7e3      	b.n	8006ae8 <_printf_i+0x174>
 8006b20:	0659      	lsls	r1, r3, #25
 8006b22:	bf48      	it	mi
 8006b24:	b2b6      	uxthmi	r6, r6
 8006b26:	e7e6      	b.n	8006af6 <_printf_i+0x182>
 8006b28:	4615      	mov	r5, r2
 8006b2a:	e7bb      	b.n	8006aa4 <_printf_i+0x130>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	6826      	ldr	r6, [r4, #0]
 8006b30:	6961      	ldr	r1, [r4, #20]
 8006b32:	1d18      	adds	r0, r3, #4
 8006b34:	6028      	str	r0, [r5, #0]
 8006b36:	0635      	lsls	r5, r6, #24
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	d501      	bpl.n	8006b40 <_printf_i+0x1cc>
 8006b3c:	6019      	str	r1, [r3, #0]
 8006b3e:	e002      	b.n	8006b46 <_printf_i+0x1d2>
 8006b40:	0670      	lsls	r0, r6, #25
 8006b42:	d5fb      	bpl.n	8006b3c <_printf_i+0x1c8>
 8006b44:	8019      	strh	r1, [r3, #0]
 8006b46:	2300      	movs	r3, #0
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	4615      	mov	r5, r2
 8006b4c:	e7ba      	b.n	8006ac4 <_printf_i+0x150>
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	1d1a      	adds	r2, r3, #4
 8006b52:	602a      	str	r2, [r5, #0]
 8006b54:	681d      	ldr	r5, [r3, #0]
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f7f9 fb48 	bl	80001f0 <memchr>
 8006b60:	b108      	cbz	r0, 8006b66 <_printf_i+0x1f2>
 8006b62:	1b40      	subs	r0, r0, r5
 8006b64:	6060      	str	r0, [r4, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b70:	e7a8      	b.n	8006ac4 <_printf_i+0x150>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	462a      	mov	r2, r5
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d0ab      	beq.n	8006ad8 <_printf_i+0x164>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	079b      	lsls	r3, r3, #30
 8006b84:	d413      	bmi.n	8006bae <_printf_i+0x23a>
 8006b86:	68e0      	ldr	r0, [r4, #12]
 8006b88:	9b03      	ldr	r3, [sp, #12]
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	bfb8      	it	lt
 8006b8e:	4618      	movlt	r0, r3
 8006b90:	e7a4      	b.n	8006adc <_printf_i+0x168>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4632      	mov	r2, r6
 8006b96:	4649      	mov	r1, r9
 8006b98:	4640      	mov	r0, r8
 8006b9a:	47d0      	blx	sl
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d09b      	beq.n	8006ad8 <_printf_i+0x164>
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	9903      	ldr	r1, [sp, #12]
 8006ba6:	1a5b      	subs	r3, r3, r1
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dcf2      	bgt.n	8006b92 <_printf_i+0x21e>
 8006bac:	e7eb      	b.n	8006b86 <_printf_i+0x212>
 8006bae:	2500      	movs	r5, #0
 8006bb0:	f104 0619 	add.w	r6, r4, #25
 8006bb4:	e7f5      	b.n	8006ba2 <_printf_i+0x22e>
 8006bb6:	bf00      	nop
 8006bb8:	080070a1 	.word	0x080070a1
 8006bbc:	080070b2 	.word	0x080070b2

08006bc0 <_read_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d07      	ldr	r5, [pc, #28]	; (8006be0 <_read_r+0x20>)
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	4608      	mov	r0, r1
 8006bc8:	4611      	mov	r1, r2
 8006bca:	2200      	movs	r2, #0
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f7fa fa3c 	bl	800104c <_read>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_read_r+0x1e>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_read_r+0x1e>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	20004608 	.word	0x20004608

08006be4 <__swbuf_r>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	460e      	mov	r6, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	4605      	mov	r5, r0
 8006bec:	b118      	cbz	r0, 8006bf6 <__swbuf_r+0x12>
 8006bee:	6983      	ldr	r3, [r0, #24]
 8006bf0:	b90b      	cbnz	r3, 8006bf6 <__swbuf_r+0x12>
 8006bf2:	f7ff fa25 	bl	8006040 <__sinit>
 8006bf6:	4b21      	ldr	r3, [pc, #132]	; (8006c7c <__swbuf_r+0x98>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	d12b      	bne.n	8006c54 <__swbuf_r+0x70>
 8006bfc:	686c      	ldr	r4, [r5, #4]
 8006bfe:	69a3      	ldr	r3, [r4, #24]
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	071a      	lsls	r2, r3, #28
 8006c06:	d52f      	bpl.n	8006c68 <__swbuf_r+0x84>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	b36b      	cbz	r3, 8006c68 <__swbuf_r+0x84>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	1ac0      	subs	r0, r0, r3
 8006c12:	6963      	ldr	r3, [r4, #20]
 8006c14:	b2f6      	uxtb	r6, r6
 8006c16:	4283      	cmp	r3, r0
 8006c18:	4637      	mov	r7, r6
 8006c1a:	dc04      	bgt.n	8006c26 <__swbuf_r+0x42>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f7ff f968 	bl	8005ef4 <_fflush_r>
 8006c24:	bb30      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	701e      	strb	r6, [r3, #0]
 8006c34:	6963      	ldr	r3, [r4, #20]
 8006c36:	3001      	adds	r0, #1
 8006c38:	4283      	cmp	r3, r0
 8006c3a:	d004      	beq.n	8006c46 <__swbuf_r+0x62>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	07db      	lsls	r3, r3, #31
 8006c40:	d506      	bpl.n	8006c50 <__swbuf_r+0x6c>
 8006c42:	2e0a      	cmp	r6, #10
 8006c44:	d104      	bne.n	8006c50 <__swbuf_r+0x6c>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f7ff f953 	bl	8005ef4 <_fflush_r>
 8006c4e:	b988      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c50:	4638      	mov	r0, r7
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <__swbuf_r+0x9c>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d101      	bne.n	8006c5e <__swbuf_r+0x7a>
 8006c5a:	68ac      	ldr	r4, [r5, #8]
 8006c5c:	e7cf      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <__swbuf_r+0xa0>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	bf08      	it	eq
 8006c64:	68ec      	ldreq	r4, [r5, #12]
 8006c66:	e7ca      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f80c 	bl	8006c88 <__swsetup_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0cb      	beq.n	8006c0c <__swbuf_r+0x28>
 8006c74:	f04f 37ff 	mov.w	r7, #4294967295
 8006c78:	e7ea      	b.n	8006c50 <__swbuf_r+0x6c>
 8006c7a:	bf00      	nop
 8006c7c:	0800704c 	.word	0x0800704c
 8006c80:	0800706c 	.word	0x0800706c
 8006c84:	0800702c 	.word	0x0800702c

08006c88 <__swsetup_r>:
 8006c88:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <__swsetup_r+0xcc>)
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	b125      	cbz	r5, 8006c9e <__swsetup_r+0x16>
 8006c94:	69ab      	ldr	r3, [r5, #24]
 8006c96:	b913      	cbnz	r3, 8006c9e <__swsetup_r+0x16>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f7ff f9d1 	bl	8006040 <__sinit>
 8006c9e:	4b2e      	ldr	r3, [pc, #184]	; (8006d58 <__swsetup_r+0xd0>)
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	d10f      	bne.n	8006cc4 <__swsetup_r+0x3c>
 8006ca4:	686c      	ldr	r4, [r5, #4]
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cac:	0719      	lsls	r1, r3, #28
 8006cae:	d42c      	bmi.n	8006d0a <__swsetup_r+0x82>
 8006cb0:	06dd      	lsls	r5, r3, #27
 8006cb2:	d411      	bmi.n	8006cd8 <__swsetup_r+0x50>
 8006cb4:	2309      	movs	r3, #9
 8006cb6:	6033      	str	r3, [r6, #0]
 8006cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	e03e      	b.n	8006d42 <__swsetup_r+0xba>
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <__swsetup_r+0xd4>)
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d101      	bne.n	8006cce <__swsetup_r+0x46>
 8006cca:	68ac      	ldr	r4, [r5, #8]
 8006ccc:	e7eb      	b.n	8006ca6 <__swsetup_r+0x1e>
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <__swsetup_r+0xd8>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	bf08      	it	eq
 8006cd4:	68ec      	ldreq	r4, [r5, #12]
 8006cd6:	e7e6      	b.n	8006ca6 <__swsetup_r+0x1e>
 8006cd8:	0758      	lsls	r0, r3, #29
 8006cda:	d512      	bpl.n	8006d02 <__swsetup_r+0x7a>
 8006cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cde:	b141      	cbz	r1, 8006cf2 <__swsetup_r+0x6a>
 8006ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	d002      	beq.n	8006cee <__swsetup_r+0x66>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff fa85 	bl	80061f8 <_free_r>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cf8:	81a3      	strh	r3, [r4, #12]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6063      	str	r3, [r4, #4]
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f043 0308 	orr.w	r3, r3, #8
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	b94b      	cbnz	r3, 8006d22 <__swsetup_r+0x9a>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d18:	d003      	beq.n	8006d22 <__swsetup_r+0x9a>
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f000 f847 	bl	8006db0 <__smakebuf_r>
 8006d22:	89a0      	ldrh	r0, [r4, #12]
 8006d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d28:	f010 0301 	ands.w	r3, r0, #1
 8006d2c:	d00a      	beq.n	8006d44 <__swsetup_r+0xbc>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60a3      	str	r3, [r4, #8]
 8006d32:	6963      	ldr	r3, [r4, #20]
 8006d34:	425b      	negs	r3, r3
 8006d36:	61a3      	str	r3, [r4, #24]
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	b943      	cbnz	r3, 8006d4e <__swsetup_r+0xc6>
 8006d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d40:	d1ba      	bne.n	8006cb8 <__swsetup_r+0x30>
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	0781      	lsls	r1, r0, #30
 8006d46:	bf58      	it	pl
 8006d48:	6963      	ldrpl	r3, [r4, #20]
 8006d4a:	60a3      	str	r3, [r4, #8]
 8006d4c:	e7f4      	b.n	8006d38 <__swsetup_r+0xb0>
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e7f7      	b.n	8006d42 <__swsetup_r+0xba>
 8006d52:	bf00      	nop
 8006d54:	20000048 	.word	0x20000048
 8006d58:	0800704c 	.word	0x0800704c
 8006d5c:	0800706c 	.word	0x0800706c
 8006d60:	0800702c 	.word	0x0800702c

08006d64 <__swhatbuf_r>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	460e      	mov	r6, r1
 8006d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	b096      	sub	sp, #88	; 0x58
 8006d70:	4614      	mov	r4, r2
 8006d72:	461d      	mov	r5, r3
 8006d74:	da08      	bge.n	8006d88 <__swhatbuf_r+0x24>
 8006d76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	602a      	str	r2, [r5, #0]
 8006d7e:	061a      	lsls	r2, r3, #24
 8006d80:	d410      	bmi.n	8006da4 <__swhatbuf_r+0x40>
 8006d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d86:	e00e      	b.n	8006da6 <__swhatbuf_r+0x42>
 8006d88:	466a      	mov	r2, sp
 8006d8a:	f000 f851 	bl	8006e30 <_fstat_r>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	dbf1      	blt.n	8006d76 <__swhatbuf_r+0x12>
 8006d92:	9a01      	ldr	r2, [sp, #4]
 8006d94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d9c:	425a      	negs	r2, r3
 8006d9e:	415a      	adcs	r2, r3
 8006da0:	602a      	str	r2, [r5, #0]
 8006da2:	e7ee      	b.n	8006d82 <__swhatbuf_r+0x1e>
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	2000      	movs	r0, #0
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	b016      	add	sp, #88	; 0x58
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08006db0 <__smakebuf_r>:
 8006db0:	898b      	ldrh	r3, [r1, #12]
 8006db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006db4:	079d      	lsls	r5, r3, #30
 8006db6:	4606      	mov	r6, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	d507      	bpl.n	8006dcc <__smakebuf_r+0x1c>
 8006dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	6163      	str	r3, [r4, #20]
 8006dc8:	b002      	add	sp, #8
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	ab01      	add	r3, sp, #4
 8006dce:	466a      	mov	r2, sp
 8006dd0:	f7ff ffc8 	bl	8006d64 <__swhatbuf_r>
 8006dd4:	9900      	ldr	r1, [sp, #0]
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff fa79 	bl	80062d0 <_malloc_r>
 8006dde:	b948      	cbnz	r0, 8006df4 <__smakebuf_r+0x44>
 8006de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de4:	059a      	lsls	r2, r3, #22
 8006de6:	d4ef      	bmi.n	8006dc8 <__smakebuf_r+0x18>
 8006de8:	f023 0303 	bic.w	r3, r3, #3
 8006dec:	f043 0302 	orr.w	r3, r3, #2
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	e7e3      	b.n	8006dbc <__smakebuf_r+0xc>
 8006df4:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <__smakebuf_r+0x7c>)
 8006df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	6020      	str	r0, [r4, #0]
 8006dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	9b00      	ldr	r3, [sp, #0]
 8006e04:	6163      	str	r3, [r4, #20]
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	6120      	str	r0, [r4, #16]
 8006e0a:	b15b      	cbz	r3, 8006e24 <__smakebuf_r+0x74>
 8006e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 f81f 	bl	8006e54 <_isatty_r>
 8006e16:	b128      	cbz	r0, 8006e24 <__smakebuf_r+0x74>
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	89a0      	ldrh	r0, [r4, #12]
 8006e26:	4305      	orrs	r5, r0
 8006e28:	81a5      	strh	r5, [r4, #12]
 8006e2a:	e7cd      	b.n	8006dc8 <__smakebuf_r+0x18>
 8006e2c:	08005fd9 	.word	0x08005fd9

08006e30 <_fstat_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d07      	ldr	r5, [pc, #28]	; (8006e50 <_fstat_r+0x20>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f7fa f94a 	bl	80010d6 <_fstat>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d102      	bne.n	8006e4c <_fstat_r+0x1c>
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	b103      	cbz	r3, 8006e4c <_fstat_r+0x1c>
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	bf00      	nop
 8006e50:	20004608 	.word	0x20004608

08006e54 <_isatty_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4d06      	ldr	r5, [pc, #24]	; (8006e70 <_isatty_r+0x1c>)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fa f949 	bl	80010f6 <_isatty>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_isatty_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_isatty_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20004608 	.word	0x20004608

08006e74 <_init>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	bf00      	nop
 8006e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7a:	bc08      	pop	{r3}
 8006e7c:	469e      	mov	lr, r3
 8006e7e:	4770      	bx	lr

08006e80 <_fini>:
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	bf00      	nop
 8006e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e86:	bc08      	pop	{r3}
 8006e88:	469e      	mov	lr, r3
 8006e8a:	4770      	bx	lr
